{"version":3,"file":"react-imgix.js","names":["_propTypes","_interopRequireDefault","require","_react","_interopRequireWildcard","_common","_constants","_constructUrl","_extractQueryParams3","_HOCs","_HOFs","_excluded","_excluded2","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","obj","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","enumerable","configurable","writable","_toPropertyKey","key","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","constructor","value","_setPrototypeOf","o","p","setPrototypeOf","bind","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","getPrototypeOf","_defineProperty","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","Number","_objectWithoutProperties","source","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","minLen","_arrayLikeToArray","toString","slice","name","Array","from","test","len","arr2","l","iterator","f","next","done","push","return","isArray","_extends","assign","NODE_ENV","process","env","buildKey","idx","concat","defaultImgixParams","auto","defaultAttributeMap","src","srcSet","sizes","noop","COMMON_PROP_TYPES","className","PropTypes","string","onMounted","func","htmlAttributes","object","alt","SHARED_IMGIX_AND_SOURCE_PROP_TYPES","disableQualityByDPR","bool","disableSrcSet","disableLibraryParam","disablePathEncoding","imgixParams","width","number","height","isRequired","srcSetOptions","shape","widths","arrayOf","widthTolerance","minWidth","maxWidth","devicePixelRatios","REACT_IMGIX_PROP_TYPES","aspectRatioIsValid","aspectRatio","setParentRef","parentRef","el","current","buildSrcSet","rawSrc","params","options","_extractClientAndPath","extractClientAndPathComponents","client","pathComponents","compactedParams","compactParamKeys","join","buildSrc","_ref","inputSrc","fixedSize","_extractQueryParams","extractQueryParams","_extractQueryParams2","srcImgixParams","ixlib","PACKAGE_VERSION","srcOptions","constructUrl","sharedSrcSetOptions","w","h","q","urlParams","finalWidth","finalHeight","disableVariableQuality","ar","showARWarning","config","warnings","invalidARFormat","console","warn","ReactImgix","exports","__ReactImgixImpl","_Component","_super","_this","imgRef","componentDidMount","render","_this$props$htmlAttri","_this$props$htmlAttri2","_this2","_this$props","sizesAttribute","_inPicture","_buildSrc","type","attributeConfig","childProps","ref","createElement","Component","displayName","PictureImpl","__PictureImpl","_Component2","_super2","_this3","pictureRef","_this4","children","_children","React","Children","map","child","_child$type","childIsReactImgix","cloneElement","imgIdx","findIndex","c","ReactImgixWrapped","fallbackImage","splice","any","SourceImpl","__SourceImpl","_Component3","_super3","_this5","sourceRef","_this$props$htmlAttri3","_this$props$htmlAttri4","_this6","_this$props2","_buildSrc2","mergeComponentPropsHOF","processPropsHOF","ShouldComponentUpdateHOC","Picture","Source","_default"],"sources":["../src/react-imgix.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport \"./array-findindex\";\nimport { config } from \"./common\";\nimport { PACKAGE_VERSION } from \"./constants\";\nimport constructUrl, {\n  compactParamKeys,\n  extractClientAndPathComponents,\n} from \"./constructUrl\";\nimport extractQueryParams from \"./extractQueryParams\";\nimport { ShouldComponentUpdateHOC } from \"./HOCs\";\nimport { mergeComponentPropsHOF, processPropsHOF } from \"./HOFs\";\n\nconst NODE_ENV = process.env.NODE_ENV;\n\nconst buildKey = (idx) => `react-imgix-${idx}`;\n\nconst defaultImgixParams = {\n  auto: [\"format\"],\n};\n\nconst defaultAttributeMap = {\n  src: \"src\",\n  srcSet: \"srcSet\",\n  sizes: \"sizes\",\n};\n\nconst noop = () => {};\n\nconst COMMON_PROP_TYPES = {\n  className: PropTypes.string,\n  onMounted: PropTypes.func,\n  htmlAttributes: PropTypes.object,\n  alt: PropTypes.string,\n};\n\nconst SHARED_IMGIX_AND_SOURCE_PROP_TYPES = Object.assign(\n  {},\n  COMMON_PROP_TYPES,\n  {\n    disableQualityByDPR: PropTypes.bool,\n    disableSrcSet: PropTypes.bool,\n    disableLibraryParam: PropTypes.bool,\n    disablePathEncoding: PropTypes.bool,\n    imgixParams: PropTypes.object,\n    sizes: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    src: PropTypes.string.isRequired,\n    srcSetOptions: PropTypes.shape({\n      widths: PropTypes.arrayOf(PropTypes.number),\n      widthTolerance: PropTypes.number,\n      minWidth: PropTypes.number,\n      maxWidth: PropTypes.number,\n      devicePixelRatios: PropTypes.arrayOf(PropTypes.number),\n    }),\n  }\n);\n\nconst REACT_IMGIX_PROP_TYPES = Object.assign(\n  {},\n  SHARED_IMGIX_AND_SOURCE_PROP_TYPES,\n  {\n    alt: PropTypes.string,\n  }\n);\n\n/**\n * Validates that an aspect ratio is in the format w:h. If false is returned, the aspect ratio is in the wrong format.\n */\nfunction aspectRatioIsValid(aspectRatio) {\n  if (typeof aspectRatio !== \"string\") {\n    return false;\n  }\n\n  return /^\\d+(\\.\\d+)?:\\d+(\\.\\d+)?$/.test(aspectRatio);\n}\n\nconst setParentRef = (parentRef, el) => {\n  if (!parentRef) {\n    return;\n  }\n\n  // assign ref based on if it's a callback vs object\n  if (typeof parentRef === \"function\") {\n    parentRef(el);\n  } else {\n    parentRef.current = el;\n  }\n};\n\nfunction buildSrcSet(rawSrc, params = {}, options = {}) {\n  const { client, pathComponents } = extractClientAndPathComponents(rawSrc);\n  const compactedParams = compactParamKeys(params);\n  return client.buildSrcSet(pathComponents.join(\"/\"), compactedParams, options);\n}\n\n/**\n * Build a imgix source url with parameters from a raw url\n */\nfunction buildSrc({\n  src: inputSrc,\n  width,\n  height,\n  disableLibraryParam,\n  disableSrcSet,\n  disablePathEncoding,\n  imgixParams,\n  disableQualityByDPR,\n  srcSetOptions,\n}) {\n  const fixedSize = width != null || height != null;\n\n  const [rawSrc, params] = extractQueryParams(inputSrc);\n\n  const srcImgixParams = Object.assign(\n    {},\n    params,\n    imgixParams,\n    disableLibraryParam ? {} : { ixlib: `react-${PACKAGE_VERSION}` },\n    fixedSize && height ? { height } : {},\n    fixedSize && width ? { width } : {}\n  );\n\n  const srcOptions = {\n    disablePathEncoding,\n  };\n\n  const src = constructUrl(rawSrc, srcImgixParams, srcOptions);\n\n  let srcSet;\n\n  if (disableSrcSet) {\n    srcSet = src;\n  } else {\n    const sharedSrcSetOptions = Object.assign({}, srcSetOptions, {\n      disablePathEncoding,\n    });\n    if (fixedSize) {\n      const { width, w, height, h, q, ...urlParams } = srcImgixParams;\n      if (q) {\n        urlParams[\"q\"] = q;\n      }\n\n      const finalWidth = width || w;\n      const finalHeight = height || h;\n\n      if (finalWidth) {\n        urlParams[\"w\"] = finalWidth;\n      }\n\n      if (finalHeight) {\n        urlParams[\"h\"] = finalHeight;\n      }\n\n      srcSet = buildSrcSet(\n        rawSrc,\n        urlParams,\n        Object.assign(\n          { disableVariableQuality: disableQualityByDPR },\n          sharedSrcSetOptions\n        )\n      );\n    } else {\n      const { width, w, height, h, ...urlParams } = srcImgixParams;\n\n      const aspectRatio = imgixParams.ar;\n      let showARWarning =\n        aspectRatio != null && aspectRatioIsValid(aspectRatio) === false;\n\n      srcSet = buildSrcSet(rawSrc, urlParams, sharedSrcSetOptions);\n\n      if (\n        NODE_ENV !== \"production\" &&\n        showARWarning &&\n        config.warnings.invalidARFormat\n      ) {\n        console.warn(\n          `[Imgix] The aspect ratio passed (\"${aspectRatio}\") is not in the correct format. The correct format is \"W:H\".`\n        );\n      }\n    }\n  }\n\n  return {\n    src,\n    srcSet,\n  };\n}\n\n/**\n * Combines default imgix params with custom imgix params to make a imgix params config object\n */\nfunction imgixParams(props) {\n  const params = Object.assign({}, defaultImgixParams, props.imgixParams);\n  return Object.assign({}, params);\n}\n\n/**\n * React component used to render <img> elements with Imgix\n */\nclass ReactImgix extends Component {\n  static propTypes = Object.assign({}, REACT_IMGIX_PROP_TYPES);\n  static defaultProps = {\n    disableSrcSet: false,\n    onMounted: noop,\n  };\n\n  constructor(props) {\n    super(props);\n    this.imgRef = null;\n  }\n\n  componentDidMount() {\n    this.props.onMounted(this.imgRef);\n  }\n\n  render() {\n    const { disableSrcSet, width, height } = this.props;\n\n    // Pre-render checks\n    if (NODE_ENV !== \"production\" && config.warnings.sizesAttribute) {\n      if (\n        this.props.width == null &&\n        this.props.height == null &&\n        this.props.sizes == null &&\n        !this.props._inPicture\n      ) {\n        console.warn(\n          \"If width and height are not set, a sizes attribute should be passed.\"\n        );\n      }\n    }\n\n    const { src, srcSet } = buildSrc(\n      Object.assign({}, this.props, {\n        type: \"img\",\n        imgixParams: imgixParams(this.props),\n      })\n    );\n\n    const attributeConfig = Object.assign(\n      {},\n      defaultAttributeMap,\n      this.props.attributeConfig\n    );\n    const childProps = Object.assign({}, this.props.htmlAttributes, {\n      [attributeConfig.sizes]: this.props.sizes,\n      className: this.props.className,\n      width: width <= 1 ? null : width ?? this.props.htmlAttributes?.width,\n      height: height <= 1 ? null : height ?? this.props.htmlAttributes?.height,\n      [attributeConfig.src]: src,\n      ref: (el) => {\n        this.imgRef = el;\n        if (\n          this.props.htmlAttributes !== undefined &&\n          \"ref\" in this.props.htmlAttributes\n        ) {\n          setParentRef(this.props.htmlAttributes.ref, this.imgRef);\n        }\n      },\n    });\n    if (!disableSrcSet) {\n      childProps[attributeConfig.srcSet] = srcSet;\n    }\n    if (this.props.alt) {\n      childProps.alt = this.props.alt;\n    }\n\n    return <img {...childProps} />;\n  }\n}\nReactImgix.displayName = \"ReactImgix\";\n\n/**\n * React component used to render <picture> elements with Imgix\n */\nclass PictureImpl extends Component {\n  static propTypes = Object.assign({}, COMMON_PROP_TYPES, {\n    children: PropTypes.any,\n  });\n  static defaultProps = {\n    onMounted: noop,\n  };\n\n  constructor(props) {\n    super(props);\n    this.pictureRef = null;\n  }\n\n  componentDidMount() {\n    this.props.onMounted(this.pictureRef);\n  }\n\n  render() {\n    const { children } = this.props;\n\n    // make sure all of our children have key set, otherwise we get react warnings\n    let _children =\n      React.Children.map(children, (child, idx) => {\n        const childIsReactImgix =\n          child.type?.name === \"mergeComponentPropsHOFInner\";\n        return React.cloneElement(\n          child,\n          Object.assign(\n            {\n              key: buildKey(idx),\n            },\n            // This prevents props._inPicture being set on other children if\n            // they're passed, such as an <img> component, which will cause a\n            // React error\n            childIsReactImgix && {\n              _inPicture: true,\n            }\n          )\n        );\n      }) || [];\n\n    /*\n    We need to make sure an <img /> or <Imgix /> is the last child so we look for one in children\n      a. if we find one, move it to the last entry if it's not already there\n      b. if we don't find one, warn the user as they probably want to pass one.\n    */\n\n    // look for an <img> or <ReactImgix type='img'> - at the bare minimum we have to have a single <img> element or else it will not work.\n    let imgIdx = _children.findIndex(\n      (c) =>\n        c.type === \"img\" ||\n        c.type === ReactImgix ||\n        c.type === ReactImgixWrapped\n    );\n\n    if (imgIdx === -1 && config.warnings.fallbackImage) {\n      console.warn(\n        \"No fallback <img /> or <Imgix /> found in the children of a <picture> component. A fallback image should be passed to ensure the image renders correctly at all dimensions.\"\n      );\n    } else if (imgIdx !== _children.length - 1) {\n      // found one, need to move it to the end\n      _children.push(_children.splice(imgIdx, 1)[0]);\n    }\n\n    return (\n      <picture ref={(el) => (this.pictureRef = el)} children={_children} />\n    );\n  }\n}\nPictureImpl.displayName = \"ReactImgixPicture\";\n\n/**\n * React component used to render <source> elements with Imgix\n */\nclass SourceImpl extends Component {\n  static propTypes = Object.assign({}, SHARED_IMGIX_AND_SOURCE_PROP_TYPES);\n  static defaultProps = {\n    disableSrcSet: false,\n    onMounted: noop,\n  };\n\n  constructor(props) {\n    super(props);\n    this.sourceRef = null;\n  }\n\n  componentDidMount() {\n    this.props.onMounted(this.sourceRef);\n  }\n\n  render() {\n    const { disableSrcSet, width, height } = this.props;\n\n    const { src, srcSet } = buildSrc(\n      Object.assign({}, this.props, {\n        type: \"source\",\n        imgixParams: imgixParams(this.props),\n      })\n    );\n\n    const attributeConfig = Object.assign(\n      {},\n      defaultAttributeMap,\n      this.props.attributeConfig\n    );\n    const childProps = Object.assign({}, this.props.htmlAttributes, {\n      [attributeConfig.sizes]: this.props.sizes,\n      className: this.props.className,\n      width: width <= 1 ? null : width ?? this.props.htmlAttributes?.width,\n      height: height <= 1 ? null : height ?? this.props.htmlAttributes?.height,\n      ref: (el) => {\n        this.sourceRef = el;\n        if (\n          this.props.htmlAttributes !== undefined &&\n          \"ref\" in this.props.htmlAttributes\n        ) {\n          setParentRef(this.props.htmlAttributes.ref, this.sourceRef);\n        }\n      },\n    });\n\n    // inside of a <picture> element a <source> element ignores its src\n    // attribute in favor of srcSet so we set that with either an actual\n    // srcSet or a single src\n    if (disableSrcSet) {\n      childProps[attributeConfig.srcSet] = src;\n    } else {\n      childProps[attributeConfig.srcSet] = `${srcSet}`;\n    }\n    // for now we'll take media from htmlAttributes which isn't ideal because\n    //   a) this isn't an <img>\n    //   b) passing objects as props means that react will always rerender\n    //      since objects dont respond correctly to ===\n\n    return <source {...childProps} />;\n  }\n}\nSourceImpl.displayName = \"ReactImgixSource\";\n\nconst ReactImgixWrapped = mergeComponentPropsHOF(\n  processPropsHOF(ShouldComponentUpdateHOC(ReactImgix))\n);\nconst Picture = mergeComponentPropsHOF(\n  processPropsHOF(ShouldComponentUpdateHOC(PictureImpl))\n);\nconst Source = mergeComponentPropsHOF(\n  processPropsHOF(ShouldComponentUpdateHOC(SourceImpl))\n);\n\nexport default ReactImgixWrapped;\nexport {\n  ReactImgix as __ReactImgixImpl,\n  Picture,\n  Source,\n  SourceImpl as __SourceImpl,\n  PictureImpl as __PictureImpl, // for testing\n};\n"],"mappings":"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"}