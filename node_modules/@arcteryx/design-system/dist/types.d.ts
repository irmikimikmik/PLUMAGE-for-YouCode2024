/// <reference types="react" />
import React$1, { FC } from 'react';
import { PortableTextBlock } from '@portabletext/types';
import { IconKeys } from '@arcteryx/components-icons';
import * as styled_components from 'styled-components';

interface ImageProps {
    alt?: string;
    className?: string;
    height?: number;
    quality?: number;
    src: string;
    srcSet?: string;
    sizes?: string;
    shouldLazyLoad?: boolean;
    width?: number;
}

declare const Image: React$1.FC<ImageProps>;

interface ImgixImageProps {
    alt?: string;
    className?: string;
    height?: number;
    quality?: number;
    shouldCompress?: boolean;
    shouldEnhance?: boolean;
    shouldLazyLoad?: boolean;
    sizes?: string;
    src: string;
    width?: number;
}

declare const ImgixImage: React$1.FC<ImgixImageProps>;

interface VideoIframeProps {
    url: string;
    isMuted?: boolean;
    isAutoPlayed?: boolean;
    allowFullScreen?: boolean;
}

declare const VideoIframe: FC<VideoIframeProps>;

interface VideoPlayerProps {
    autoPlay: boolean;
    loop: boolean;
    muted: boolean;
    playsInline: boolean;
    videoSrc: string;
}

declare const VideoPlayer: React$1.FC<VideoPlayerProps>;

declare const Divider: React$1.FC;

declare const buttonOptions: readonly ["Standard", "Inverted", "Subtle", "Add-To-Cart", "Email", "Find-In-Store", "Secondary-cta"];
type ButtonOptions = typeof buttonOptions;
type ButtonOption = ButtonOptions[number];
interface ButtonProps {
    context?: ButtonOption;
    onClick?: () => void;
    onContextMenu?: () => void;
    url?: string;
    disabled?: boolean;
    href?: string;
    target?: string;
    rel?: string;
    label: string;
    linkType?: "default" | "internalModal" | "externalModal" | "page";
}

type LinkType = "default" | "page" | "internalModal" | "externalModal";
type TextAlign = "left" | "center" | "right";
type Spacing = "0rem" | "1rem" | "1.5rem" | "2rem" | "3rem";
interface PortableTextMarkFragmentId {
    _type: "fragmentId";
    fragmentId: string;
}
interface PortableTextLinkMarkDef {
    _type: string;
    linkType: LinkType;
    url: string;
    target: "_blank" | "_self";
}
interface PortableTextButton {
    _type: "atLink";
    label: string;
    linkType: LinkType;
    shouldDisplayAsButton: boolean;
    variant: ButtonProps["context"];
    url: string;
}
interface PortableTextPhone {
    _type: "phone";
    number: string;
}
interface PortableTable {
    _type: "table";
    rows: Array<{
        _type: "tableRow";
        cells: string[];
    }>;
}
/**
 * Core interface is "block" | string;
 * by using "block" we can enforce a difference between phone and atLink.
 */
interface CustomPortableTextBlock extends Omit<PortableTextBlock, "_type"> {
    _type: "block";
}
interface PortableImageContainer {
    _type: "imageContainer";
    imageContainer: ImageProps[];
}
type RichTextBlocks = Array<PortableTextButton | PortableTextPhone | PortableTable | CustomPortableTextBlock | PortableImageContainer>;
interface RichTextProps {
    content: RichTextBlocks;
    textAlign?: TextAlign;
    spacing?: Spacing;
}

interface CardProps {
    button?: ButtonProps;
    content: RichTextBlocks;
    image?: ImageProps;
    shouldOpenModal?: boolean;
    title?: string;
    video?: VideoPlayerProps;
    variant: "product" | "image" | "dynamic" | "video";
}

declare const Card: React$1.FC<CardProps>;

declare const RichText: React$1.FC<RichTextProps>;

interface FullWidthCardProps {
    content: RichTextBlocks | null;
    image: ImageProps;
    textAlign: "left" | "center" | "right";
    imageVariant?: "default" | "tall" | "square";
}

declare const FullWidthCard: React$1.FC<FullWidthCardProps>;

interface FullWidthImageProps {
    image: ImageProps;
    sourceElementsArray?: Array<{
        size: string;
        media: string;
        srcSet: string;
        width: number;
        height: number;
        sizes: string;
    }> | null;
}

declare const fullWidthImageDimensions: {
    xs: {
        width: number;
        height: number;
    };
    sm: {
        width: number;
        height: number;
    };
    md: {
        width: number;
        height: number;
    };
    lg: {
        width: number;
        height: number;
    };
    xl: {
        width: number;
        height: number;
    };
    xxl: {
        width: number;
        height: number;
    };
};
declare const FullWidthImage: React$1.FC<FullWidthImageProps>;

interface VideoThumbnailProps {
    image?: ImageProps;
    isPlayButtonEnabled?: boolean;
    isThumbnailGradientEnabled?: boolean;
    onClickHandler?: React.MouseEventHandler<HTMLButtonElement>;
    playButtonColour?: string;
    subtitle?: string;
    textColour?: string;
    title?: string;
}

declare const VideoThumbnail: React$1.FC<VideoThumbnailProps>;

interface LinkBoxProps {
    className?: string;
    icon: string;
    label: string;
    url?: string;
    target?: "_blank" | "_self";
}

declare const LinkBox: React$1.FC<LinkBoxProps>;

interface ImageTextLinkBoxProps {
    image: FullWidthImageProps;
    label?: string;
    url?: string;
    target?: "_blank" | "_self";
}

declare const ImageTextLinkBox: React$1.FC<ImageTextLinkBoxProps>;

type IconName = (typeof IconKeys)[number];

interface RichTextIconProps extends RichTextProps {
    icon: IconName;
}

declare const RichTextIcon: React$1.FC<RichTextIconProps>;

interface TableSizingProps {
    description: string;
    measuringType: string;
    table: string[][];
}
declare const TableSizing: ({ description, table, }: TableSizingProps) => React$1.ReactElement;

interface TextImageProps {
    image: ImageProps;
    textItems: RichTextProps[];
    imageSize: string;
    isImageOnLeft?: boolean;
    displayImageBelowMd?: boolean;
}

declare const TextImage: React$1.FC<TextImageProps>;

interface BoxListImageProps {
    image: ImageProps;
    displayImageBelowMd?: boolean;
    children: React$1.ReactNode[];
}
declare const BoxListImage: React$1.FC<BoxListImageProps>;

interface CarouselProps {
    title?: string;
    children: React$1.ReactNode[];
    justifyContent?: "flex-start" | "center" | "flex-end";
}

declare const Carousel: React$1.FC<CarouselProps>;

interface AccordionProps {
    content: RichTextBlocks;
    title: string;
    headingLevel?: "1" | "2" | "3" | "4" | "5" | "6";
    minWidthStayOpen?: number;
    className?: string;
    isOpenOnPageLoad?: boolean;
    id?: string;
    large?: boolean;
}
interface CollapseGroupProps {
    className?: string;
    title?: string;
    items: AccordionProps[];
}

declare const CollapseGroup: React$1.FC<CollapseGroupProps>;

interface HeroBannerProps {
    image: ImageProps;
    isTextShadowApplied?: boolean;
    headline?: string;
    textArea?: string;
    miceType?: string;
}

interface HeroSectionProps {
    image: string;
}
declare const HeroSection: styled_components.StyledComponent<"section", any, HeroSectionProps, never>;
declare const StyledGridDiv: styled_components.StyledComponent<"div", any, {
    $isTextShadowApplied: boolean;
}, never>;
declare const HeroBanner: React$1.FC<HeroBannerProps>;

interface PaginationContainerProps {
    currentPage: number;
    handlePrevPage: () => void;
    handleNextPage: () => void;
    setCurrentPage: (currentPage: number) => void;
    totalPages: number;
    textChildren?: string;
}

declare const Pagination: React$1.FC<PaginationContainerProps>;

interface ShortHeroBannerProps {
    image: ImageProps;
}

interface ShortHeroSectionProps {
    image: string;
}
declare const ShortHeroSection: styled_components.StyledComponent<"section", any, ShortHeroSectionProps, never>;
declare const ShortHeroBanner: React$1.FC<ShortHeroBannerProps>;

interface TableProps {
    category: string;
    disclaimer: string;
    tables: TableSizingProps[];
    title: string;
}
declare const Table: ({ category, disclaimer, tables, title, }: TableProps) => React$1.ReactElement;

interface VideoProps {
    videoSrc: string;
    isAutoPlayed: boolean;
    isMuted: boolean;
    videoThumbnail: VideoThumbnailProps;
}

declare const Video: React$1.FC<VideoProps>;

interface MediumHeroBannerProps {
    image: string;
    richText: RichTextBlocks;
}

declare const MediumHeroBanner: React$1.FC<MediumHeroBannerProps>;

export { AccordionProps, BoxListImage, BoxListImageProps, Card, CardProps, Carousel, CarouselProps, CollapseGroup, CollapseGroupProps, CustomPortableTextBlock, Divider, FullWidthCard, FullWidthCardProps, FullWidthImage, FullWidthImageProps, HeroBanner, HeroBannerProps, HeroSection, Image, ImageProps, ImageTextLinkBox, ImageTextLinkBoxProps, ImgixImage, LinkBox, LinkBoxProps, MediumHeroBanner, MediumHeroBannerProps, Pagination, PortableImageContainer, PortableTextButton, PortableTextLinkMarkDef, PortableTextMarkFragmentId, RichText, RichTextBlocks, RichTextIcon, RichTextIconProps, RichTextProps, ShortHeroBanner, ShortHeroBannerProps, ShortHeroSection, StyledGridDiv, Table, TableProps, TableSizing, TableSizingProps, TextImage, TextImageProps, Video, VideoIframe, VideoIframeProps, VideoPlayer, VideoProps, VideoThumbnail, VideoThumbnailProps, fullWidthImageDimensions };
