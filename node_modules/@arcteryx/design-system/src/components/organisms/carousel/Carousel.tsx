import { H2, ScreenSize } from "@arcteryx/components-typography";
import React from "react";
import Flickity from "react-flickity-component";
import styled from "styled-components";
import { type CarouselProps } from "./Carousel.types";

import { CarouselSliderControls } from "./components/CarouselSliderControls";
import "./flickity.css";

/**
 * Cannot configure jest to test this component.
 * Ran into the following issues:
 * https://stackoverflow.com/questions/76203449/a-jest-worker-process-was-terminated-by-another-process
 * https://stackoverflow.com/questions/32479812/npm-run-segmentation-fault-11
 * https://stackoverflow.com/questions/70007464/jest-worker-encountered-4-child-process-exceptions-exceeding-retry-limit
 */

const StyledContainerDiv = styled.div<{
  $justifyContent: "flex-start" | "center" | "flex-end";
}>`
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  width: 100%;
  .carousel {
    justify-content: ${(props) => props.$justifyContent};
  }
  .carousel:after {
    content: "flickity";
    display: none;
  }

  @media (min-width: ${ScreenSize.lg}px) {
    .carousel {
      display: flex;
      flex-direction: row;
      gap: 0.5rem;
      flex-wrap: wrap;
    }
    /* disable Flickity for large devices */
    .carousel:after {
      content: "";
    }
  }
`;

// This data comes from Figma
const dotWidthMap: Record<number, number> = {
  1: 200,
  2: 171.25,
  3: 111.6666,
  4: 81.875,
  5: 64,
  6: 52.08,
  7: 43.571,
};
interface StyledFlickityProps {
  $itemCount: number;
  $shouldDisplayDots: boolean;
}
const StyledFlickity = styled(Flickity)<StyledFlickityProps>`
  .flickity-page-dots {
    width: 100%;
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    padding-top: ${(props) => (props.$shouldDisplayDots ? "1.5rem" : "0")};
    max-width: none;

    .dot {
      display: ${(props) =>
        props.$shouldDisplayDots ? "inline-block" : "none"};
      border-radius: 0;
      width: ${(props) => dotWidthMap[props.$itemCount]}px;
      margin: 0;
      height: 0.5rem;
    }
  }
  .flickity-prev-next-button {
    top: 0;
  }
`;

const StyledDiv = styled.div`
  width: 100%;
  align-items: center;
  display: flex;
  justify-content: center;
  @media (min-width: ${ScreenSize.lg}px) {
    width: auto;
  }
`;

export const Carousel: React.FC<CarouselProps> = ({
  children,
  title,
  justifyContent = "center",
}) => {
  const [currentIndex, setCurrentIndex] = React.useState(1);
  const hasTitle = title !== undefined && title.length > 0;
  // Design only accounts for 7 items - beyond that we don't display dots.
  const isLessThanMax = children.length < 8;
  const flickityRef = React.useRef<Flickity>();
  const handlePrevious = (): void => {
    flickityRef.current?.previous();
  };
  const handleNext = (): void => {
    flickityRef.current?.next();
  };
  const isPrevButtonDisabled = currentIndex === 1;
  const isNextButtonDisabled = currentIndex === children.length;

  return (
    <StyledContainerDiv $justifyContent={justifyContent}>
      {hasTitle ? <H2>{title}</H2> : null}

      <StyledFlickity
        flickityRef={(ref) => {
          ref.on("change", (index: number) => {
            setCurrentIndex(index + 1);
          });
          flickityRef.current = ref;
        }}
        $itemCount={children.length}
        $shouldDisplayDots={isLessThanMax}
        className="carousel"
        options={{ watchCSS: true, prevNextButtons: false }}
        static={true}
      >
        {children.map((item, index) => (
          <StyledDiv key={`${index}` + "item"}>{item}</StyledDiv>
        ))}
      </StyledFlickity>
      {!isLessThanMax ? (
        <CarouselSliderControls
          currentIndex={currentIndex}
          isNextButtonDisabled={isNextButtonDisabled}
          isPrevButtonDisabled={isPrevButtonDisabled}
          itemCount={children.length}
          onClickNext={handleNext}
          onClickPrevious={handlePrevious}
        />
      ) : null}
    </StyledContainerDiv>
  );
};
