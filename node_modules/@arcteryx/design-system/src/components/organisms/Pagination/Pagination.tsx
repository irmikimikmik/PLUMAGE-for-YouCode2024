import styled from "styled-components";
import { type PaginationContainerProps } from "./Pagination.type";
import React, { useState, useEffect } from "react";
import { ScreenSize, P } from "@arcteryx/components-typography";

const PaginationDiv = styled.div`
  display: flex;
  @media (min-width: ${ScreenSize.sm}px) {
    width: fit-content;
  }
`;

const StyledDiv = styled.div`
  display: flex;
  justify-content: flex-start;
  flex-direction: column;

  @media (min-width: ${ScreenSize.md}px) {
    justify-content: space-between;
  }
`;

const StyledAnchorGroup = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  row-gap: 0.5rem;
`;

const StyledAnchor = styled.a<{ $backgroundColor: string; $color: string }>`
  color: var(--white);
  text-decoration: none;
  cursor: pointer;
  background-color: ${(props) => props.$backgroundColor};
  color: ${(props) => props.$color};
  min-width: 30px;

  display: flex;
  align-items: center;
  justify-content: center;

  &:hover {
    background: var(
      --gradients-gradient-hover,
      linear-gradient(180deg, #646464 5.21%, var(--black) 87.5%),
      var(--white)
    );
  }

  margin: 0 0.75rem;
  width: 45px;
  height: 45px;

  @media (min-width: ${ScreenSize.md}) {
    margin: 0 0.5rem;
    width: 35px;
    height: 35px;
  }
`;

const StyledButton = styled.button`
  cursor: pointer;
  border: none;
  background: none;
  font-family: "urw-din";
`;

const StyledP = styled(P)`
  display: flex;
  align-items: center;
  justify-content: center;

  @media (max-width: ${ScreenSize.md}px) {
    justify-content: flex-start;
    padding-bottom: 1rem;
  }
`;

export const Pagination: React.FC<PaginationContainerProps> = ({
  currentPage,
  handlePrevPage,
  handleNextPage,
  setCurrentPage,
  totalPages,
  textChildren,
}) => {
  const [currentStartPage, setCurrentStartPage] = useState(1);
  const [maxPagesToShow, setMaxPagesToShow] = useState(5);

  useEffect(() => {
    const newStartPage = Math.max(1, currentPage - maxPagesToShow + 1);
    setCurrentStartPage(newStartPage);
  }, [currentPage]);

  const endPage = Math.min(totalPages, currentStartPage + maxPagesToShow - 1);

  const goToNextSet = (): void => {
    if (currentStartPage + maxPagesToShow <= totalPages) {
      setCurrentStartPage(currentStartPage + maxPagesToShow);
    }
  };

  const goToPreviousSet = (): void => {
    const newStartPage = currentStartPage - maxPagesToShow;
    if (newStartPage >= 1) {
      setCurrentStartPage(newStartPage);
    } else {
      setCurrentStartPage(1);
    }
  };

  useEffect(() => {
    const handleResize = (): void => {
      const screenWidth = window.innerWidth;

      if (screenWidth <= 321) {
        setMaxPagesToShow(2);
      } else if (screenWidth <= 388) {
        setMaxPagesToShow(3);
      } else if (screenWidth <= ScreenSize.md) {
        setMaxPagesToShow(4);
      } else {
        setMaxPagesToShow(5);
      }
    };

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  const hasTextChildren = textChildren !== undefined;

  return (
    <StyledDiv>
      {hasTextChildren ? <StyledP>{textChildren}</StyledP> : null}
      <PaginationDiv>
        <StyledButton
          onClick={goToPreviousSet}
          disabled={currentStartPage === 1}
        >
          ❮❮
        </StyledButton>
        <StyledButton onClick={handlePrevPage} disabled={currentPage === 1}>
          ❮
        </StyledButton>
        <StyledAnchorGroup>
          {Array.from({ length: endPage - currentStartPage + 1 }, (_, i) => (
            <StyledAnchor
              key={currentStartPage + i}
              onClick={() => {
                setCurrentPage(currentStartPage + i);
              }}
              $backgroundColor={
                currentPage === currentStartPage + i
                  ? "var(--black)"
                  : "var(--pinline-grey)"
              }
              $color={
                currentPage === currentStartPage + i ? "var(--white)" : ""
              }
            >
              {currentStartPage + i}
            </StyledAnchor>
          ))}
        </StyledAnchorGroup>
        <StyledButton
          onClick={handleNextPage}
          disabled={currentPage === totalPages}
        >
          ❯
        </StyledButton>
        <StyledButton onClick={goToNextSet} disabled={endPage === totalPages}>
          ❯❯
        </StyledButton>
      </PaginationDiv>
    </StyledDiv>
  );
};
