import "@testing-library/jest-dom";
import React from "react";
import { render, fireEvent } from "@testing-library/react";
import { Pagination } from "./Pagination";

const handlePrevPageMock = jest.fn();
const handleNextPageMock = jest.fn();
const setCurrentPageMock = jest.fn();

const mockProps = {
  currentPage: 1,
  handlePrevPage: handlePrevPageMock,
  handleNextPage: handleNextPageMock,
  setCurrentPage: setCurrentPageMock,
  totalPages: 5,
};

describe("Pagination", () => {
  it("renders page numbers", () => {
    const { getByText } = render(<Pagination {...mockProps} />);
    const page1 = getByText("1");
    const page2 = getByText("2");
    const page3 = getByText("3");
    const page4 = getByText("4");
    const page5 = getByText("5");
    expect(page1).toBeInTheDocument();
    expect(page2).toBeInTheDocument();
    expect(page3).toBeInTheDocument();
    expect(page4).toBeInTheDocument();
    expect(page5).toBeInTheDocument();
  });

  it("calls handleNextPage when next button is clicked", () => {
    const { getByText } = render(<Pagination {...mockProps} />);
    const nextButton = getByText("❯");
    fireEvent.click(nextButton);
    expect(handleNextPageMock).toHaveBeenCalledTimes(1);
  });

  it("calls setCurrentPage when a page number is clicked", () => {
    const { getByText } = render(<Pagination {...mockProps} />);
    const page2 = getByText("2");
    fireEvent.click(page2);
    expect(setCurrentPageMock).toHaveBeenCalledWith(2);
  });

  it("calls handlePrevPage when previous button is clicked and current page is not 1", () => {
    const { getByText } = render(
      <Pagination
        currentPage={2} // Set the current page to 2
        handlePrevPage={handlePrevPageMock}
        handleNextPage={handleNextPageMock}
        setCurrentPage={setCurrentPageMock}
        totalPages={5}
      />,
    );
    const prevButton = getByText("❮");
    fireEvent.click(prevButton);
    expect(handlePrevPageMock).toHaveBeenCalledTimes(1);
  });
});
