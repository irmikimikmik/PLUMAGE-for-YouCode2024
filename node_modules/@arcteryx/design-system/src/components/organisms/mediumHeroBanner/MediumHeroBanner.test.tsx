import React from "react";
import { MediumHeroBanner } from "./MediumHeroBanner";
import { type MediumHeroBannerProps } from "./MediumHeroBanner.types";
import {
  RichTextBlocksWithAlternatingColors,
  RichTextBlocksWithDefaultColor,
} from "./__mocks__/richTextBlocks";
import { MediumHeroBannerImage } from "./__mocks__/mediumHeroBannerImage";
import "@testing-library/jest-dom";
import { render, screen } from "@testing-library/react";

const defaultMediumHeroBannerProps: MediumHeroBannerProps = {
  image: MediumHeroBannerImage.src,
  richText: RichTextBlocksWithDefaultColor,
};
describe("MediumHeroBanner", () => {
  it("renders the image correctly", () => {
    render(<MediumHeroBanner {...defaultMediumHeroBannerProps} />);
    const mediumHeroBannerContainer = screen.getByTestId("med-hero-background");
    expect(mediumHeroBannerContainer).toHaveStyle(
      `background-image: url(${defaultMediumHeroBannerProps.image})`,
    );
  });
  it("renders the RichText content correctly", () => {
    const { getByText } = render(
      <MediumHeroBanner {...defaultMediumHeroBannerProps} />,
    );

    // where these are three separate blocks, we must have three separate assertions
    expect(getByText("Best.")).toBeInTheDocument();
    expect(getByText("Seams.")).toBeInTheDocument();
    expect(getByText("Ever.")).toBeInTheDocument();
  });

  it("renders an h1 element", () => {
    const { getByText } = render(
      <MediumHeroBanner {...defaultMediumHeroBannerProps} />,
    );
    expect(getByText("Best.").tagName).toBe("H1");
  });

  it("renders an h1Alt element", () => {
    const { getByText } = render(
      <MediumHeroBanner {...defaultMediumHeroBannerProps} />,
    );
    expect(getByText("Seams.").tagName).toBe("H1");
  });

  it("renders textColor", () => {
    const mediumHeroBannerwithTextColorProps = {
      image: MediumHeroBannerImage.src,
      richText: RichTextBlocksWithAlternatingColors,
    };
    const { getByText } = render(
      <MediumHeroBanner {...mediumHeroBannerwithTextColorProps} />,
    );

    expect(getByText("Best.")).toHaveStyle("color: #ffffff;");
    expect(getByText("Seams.")).toHaveStyle("color: #000000;");
    expect(getByText("Ever.")).toHaveStyle("color: #ffffff;");
  });
});
