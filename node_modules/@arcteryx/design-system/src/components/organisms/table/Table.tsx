import React, { useState } from "react";
import {
  type TableSizingProps,
  TableSizing,
} from "../../molecules/tableSizing/TableSizing";
import styled from "styled-components";
import { Button } from "@arcteryx/components-button";
import { H1, H3 } from "@arcteryx/components-typography";

const StyledH1 = styled(H1)`
  font-size: 1.5rem;
`;
const StyledDiv = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 2rem;
`;

const StyledHeader = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  gap: 1rem;
  @media (min-width: 768px) {
    flex-direction: row;
  }
`;

const StyledText = styled.div`
  display: flex;
  flex-direction: column;
`;

const StyledTitle = styled(H3)`
  font-size: 1.1rem;
  margin-bottom: 0.5rem;
`;

const StyledButtons = styled.div`
  display: flex;
  flex-direction: row;
  @media (min-width: 768px) {
    align-self: flex-end;
  }
`;

// Button component is not typed so the styled() component interface is using any
const StyledButton = styled(Button)<{ $isActive: boolean }>`
  display: inline-block;
  margin-right: 3px;
  background-color: ${(props) =>
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    props.$isActive ? "black" : "var(--colour-grey-background)"};
  color: ${(props) =>
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    props.$isActive ? "var(--colour-grey-background)" : "black"};
  text-transform: lowercase;
  padding: 10px 16px;
  border: 0px;
  font-size: 1rem;
  font-weight: 400;
`;

export interface TableProps {
  category: string;
  disclaimer: string;
  tables: TableSizingProps[];
  title: string;
}

export const Table = ({
  category,
  disclaimer,
  tables,
  title,
}: TableProps): React.ReactElement => {
  const [activeIndex, setActiveIndex] = useState(0);
  const buttons = tables.map((table) => table.measuringType);
  const handleButtonClick = (index: number): void => {
    setActiveIndex(index);
  };

  return (
    <StyledDiv>
      <StyledHeader>
        <StyledText>
          {title !== "" && <StyledTitle>{title}</StyledTitle>}
          {category !== "" && <StyledH1>{category}</StyledH1>}
        </StyledText>
        <StyledButtons>
          {buttons
            ?.filter((label) => label)
            .map((label, index) => (
              <StyledButton
                key={index}
                onClick={() => {
                  handleButtonClick(index);
                }}
                $isActive={index === activeIndex}
              >
                {label}
              </StyledButton>
            ))}
        </StyledButtons>
      </StyledHeader>
      {tables != null && Boolean(tables?.[activeIndex]) && (
        <TableSizing {...tables[activeIndex]} />
      )}
      <p style={{ maxWidth: "100%" }}>{disclaimer}</p>
    </StyledDiv>
  );
};

export default Table;
