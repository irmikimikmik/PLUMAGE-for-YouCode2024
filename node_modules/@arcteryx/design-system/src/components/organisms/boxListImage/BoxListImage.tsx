import React from "react";
import { Image, type ImageProps } from "../../atoms";
import styled from "styled-components";
import { ScreenSize } from "@arcteryx/components-typography";

export interface BoxListImageProps {
  image: ImageProps;
  displayImageBelowMd?: boolean;
  children: React.ReactNode[];
}

const StyledDiv = styled.div`
  display: grid;
  grid-template-rows: auto;
  grid-template-columns: repeat(12, 1fr);
  width: 100%;

  @media (min-width: ${ScreenSize.sm}px) {
    grid-gap: 0px 1rem;
  }
  @media (min-width: ${ScreenSize.md}px) {
    grid-gap: 0px 20px;
  }
  @media (min-width: ${ScreenSize.lg}px) {
    grid-gap: 0px 2rem;
  }
`;

const StyledImage = styled(Image)<{ $display: boolean }>`
  grid-column-start: 3;
  grid-column-end: 11;
  grid-row-start: 1;
  grid-row-end: 8;
  z-index: 1;

  @media (max-width: calc(${ScreenSize.lg}px - 1px)) {
    display: ${(props) => (props.$display ? "block" : "none")};
  }

  /* allows for growing pain between md and lg breakpoints where image becomes uncentered */
  @media (min-width: 800px) {
    grid-column-start: 4;
    grid-column-end: 10;
  }

  @media (min-width: ${ScreenSize.lg}px) {
    grid-column-start: 1;
    grid-column-end: 7;
    grid-row-start: 4;
    grid-row-end: 10;
    z-index: 1;
    width: 100vw;
  }
  @media (min-width: ${ScreenSize.xl}px) {
    grid-column-end: 7;
    grid-row-start: 4;
    grid-row-end: 10;
    z-index: 1;
    width: 100vw;
  }
  @media (min-width: 1440px) {
    grid-column-end: 6;
    grid-row-start: 4;
    grid-row-end: 9;
    z-index: 1;
    width: 100vw;
  }
`;

const StyledBackground = styled.div`
  padding: 2rem 1rem 2rem 0rem;
  grid-row-start: 6;
  grid-row-end: 13;
  grid-column-start: 1;
  grid-column-end: 13;
  background: #e9e9e9;
  display: flex;
  flex-direction: column;
  justify-content: center;

  @media (min-width: ${ScreenSize.sm}px) {
    padding: 2rem 1.5rem 2rem 0rem;
  }
  @media (min-width: ${ScreenSize.md}px) {
    padding: 2rem 2.6rem 2rem 0rem;
  }

  /* allows for growing pain between md and lg breakpoints where box grows but text does not */
  @media (min-width: 800px) {
    align-items: center;
  }

  @media (min-width: ${ScreenSize.lg}px) {
    padding: 2rem 2.6rem 2rem 0rem;
    grid-row-start: 1;
    grid-column-start: 4;
  }

  @media (min-width: ${ScreenSize.xl}px) {
    padding: 2rem 2rem 2rem 0rem;
  }
  // next breakpoint up, xxxl
  @media (min-width: 1720px) {
    grid-column-start: 5;
  }
`;

const StyledText = styled.div<{ $display: boolean }>`
  display: flex;
  flex-direction: column;
  padding-top: ${(props) => (props.$display ? "7.5rem" : "0")};

  @media (min-width: ${ScreenSize.sm}px) {
    padding-top: ${(props) => (props.$display ? "10rem" : "0")};
  }

  @media (min-width: ${ScreenSize.md}px) {
    padding-top: ${(props) => (props.$display ? "12rem" : "0")};
  }

  @media (min-width: ${ScreenSize.lg}px) {
    padding-top: 0rem;
    padding-left: 12rem;
  }
  @media (min-width: ${ScreenSize.xl}px) {
    padding-left: 14rem;
  }
  @media (min-width: 1440px) {
    padding-left: 10rem;
  }
`;

const StyledChildren = styled.div`
  padding: 1rem 0rem 1rem 3rem;
  @media (min-width: ${ScreenSize.lg}px) {
    padding-left: 7.5rem;
  }
  @media (min-width: ${ScreenSize.xl}px) {
    padding-left: 10rem;
  }
`;

export const BoxListImage: React.FC<BoxListImageProps> = ({
  image,
  children,
  displayImageBelowMd = true,
}) => (
  <StyledDiv>
    <StyledImage
      src={image.src}
      alt={image.alt}
      $display={displayImageBelowMd}
    />
    <StyledBackground>
      <StyledText $display={displayImageBelowMd}>
        {children?.map((item, index: number) => (
          <StyledChildren key={index}>{item}</StyledChildren>
        ))}
      </StyledText>
    </StyledBackground>
  </StyledDiv>
);
