import "@testing-library/jest-dom";
import React from "react";
import { Card } from "./Card";
import { type CardProps } from "./Card.types";
import { render, screen } from "@testing-library/react";

const cardProps: CardProps = {
  image: {
    src: "https://example.com/image.jpg",
    alt: "Example Image",
  },
  // content is a Rich Text field, and uses portable text from @portabletext/types
  content: [
    {
      _type: "block",
      children: [
        {
          _type: "span",
          text: "Find out more",
        },
      ],
    },
  ],
  variant: "product",
};

describe("Card", () => {
  it("renders the content correctly", () => {
    render(<Card {...cardProps} />);
    const contentElement = screen.getByText("Find out more");
    expect(contentElement).toBeInTheDocument();
  });

  it("renders the title correctly", () => {
    const props: CardProps = {
      ...cardProps,
      title: "Test Title",
    };
    render(<Card {...props} />);
    const titleElement = screen.getByText("Test Title");
    expect(titleElement).toBeInTheDocument();
  });

  it("renders the image correctly", () => {
    const props: CardProps = {
      ...cardProps,
      image: {
        src: "https://example.com/image.jpg",
        alt: "Example Image",
      },
    };
    render(<Card {...props} />);
    const imageElement = screen.getByAltText(props.image?.alt ?? "");
    expect(imageElement).toBeInTheDocument();
  });

  it("renders the video correctly", () => {
    const props: CardProps = {
      ...cardProps,
      video: {
        autoPlay: true,
        loop: true,
        muted: true,
        playsInline: true,
        videoSrc: "https://example.com/video.mp4",
      },
    };
    const { container } = render(<Card {...props} />);
    const videoElement = container.querySelector("video");
    expect(videoElement).toBeInTheDocument();
    const sourceElement = container.querySelector("source");
    expect(sourceElement).toBeInTheDocument();
    expect(sourceElement).toHaveAttribute(
      "src",
      "https://example.com/video.mp4",
    );
    expect(sourceElement).toHaveAttribute("type", "video/mp4");
  });

  it("renders the button correctly", () => {
    const props: CardProps = {
      ...cardProps,
      button: {
        context: "Standard",
        onClick: jest.fn(),
        onContextMenu: jest.fn(),
        label: "Test Button",
        url: "https://example.com",
      },
    };
    render(<Card {...props} />);
    const buttonElement = screen.getByRole("link", { name: "Test Button" });
    expect(buttonElement).toBeInTheDocument();
  });
});
