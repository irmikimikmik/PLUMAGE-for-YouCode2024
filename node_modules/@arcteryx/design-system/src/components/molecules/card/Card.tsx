import { H3, ScreenSize } from "@arcteryx/components-typography";
import React from "react";
import styled from "styled-components";
import { VideoPlayer, Image } from "../../atoms";
import { RichText } from "../richText";
import { type CardProps } from "./Card.types";
import { CardButton } from "./components/CardButton";
import { variantStylingMap } from "./constants";

interface CardContainerProps {
  $height?: number;
  $width?: number;
  $maxWidth?: number;
}

const CardContainer = styled.div<CardContainerProps>`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  height: ${({ $height }) => ($height !== undefined ? `${$height}px` : null)};
  width: ${({ $width }) => ($width !== undefined ? `${$width}px` : null)};
  max-width: ${({ $maxWidth }) =>
    $maxWidth !== undefined ? `${$maxWidth}px` : null};
`;

interface ContentContainerProps {
  $flexDirectionMobile?: "row" | "column";
  $isMobileFlexDirectionRow: boolean;
}

const ContentContainer = styled.div<ContentContainerProps>`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  align-items: center;
  // 576
  @media (min-width: ${ScreenSize.sm}px) {
    flex-direction: ${({ $flexDirectionMobile }) => $flexDirectionMobile};
    align-items: ${({ $isMobileFlexDirectionRow }) =>
      $isMobileFlexDirectionRow ? "flex-start" : "center"};
  }
`;

interface StyledImageProps {
  $isMobileFlexDirectionRow: boolean;
}

const StyledImage = styled(Image)<StyledImageProps>`
  object-fit: contain;
  // 576
  @media (min-width: ${ScreenSize.sm}px) {
    width: ${({ $isMobileFlexDirectionRow }) =>
      $isMobileFlexDirectionRow ? "50%" : null};
  }
`;

export const Card: React.FC<CardProps> = ({
  button,
  content,
  image,
  title,
  video,
  variant = "image",
}) => {
  const hasButton =
    variant !== "dynamic" && variant !== "image" && button?.url !== undefined;
  const hasTitle = title !== undefined && title !== "";
  const hasImage = image?.src !== undefined;
  const hasVideo = video?.videoSrc !== undefined;
  const variantStyling = variantStylingMap[variant];
  // At 576 and higher, does the card move to a row layout? The default behavious is to stay as a column.
  const isMobileFlexDirectionRow =
    variantStyling?.flexDirectionMobile === "row";
  const shouldOpenModal =
    button?.linkType === "internalModal" ||
    button?.linkType === "externalModal";
  return (
    <CardContainer
      $height={variantStyling.height}
      $width={variantStyling.width}
      $maxWidth={variantStyling.maxWidth}
    >
      {hasTitle ? <H3>{title}</H3> : null}
      <ContentContainer
        $isMobileFlexDirectionRow={isMobileFlexDirectionRow}
        $flexDirectionMobile={variantStyling?.flexDirectionMobile}
      >
        {hasVideo ? (
          <VideoPlayer
            autoPlay={video.autoPlay}
            playsInline={video.playsInline}
            videoSrc={video.videoSrc}
            loop={video.loop}
            muted={video.muted}
          />
        ) : null}
        {hasImage ? (
          <StyledImage
            $isMobileFlexDirectionRow={isMobileFlexDirectionRow}
            width={variantStyling.imageWidth}
            height={variantStyling.imageHeight}
            alt={image.alt}
            shouldLazyLoad={image.shouldLazyLoad}
            src={image.src}
          />
        ) : null}
        <RichText content={content} textAlign={variantStyling?.textAlignment} />
        {/* We may want to consider moving this button logic outside of this component and offering a variant on the card that opens up a modal 
        instead of conducting an onClick or redirect. Right now, only one of our Cards has a button that uses this logic.   */}
        {hasButton ? (
          <CardButton
            onClick={button.onClick}
            onContextMenu={button.onContextMenu}
            shouldOpenModal={shouldOpenModal}
            label={button.label}
            url={button.url ?? ""}
          />
        ) : null}
      </ContentContainer>
    </CardContainer>
  );
};
