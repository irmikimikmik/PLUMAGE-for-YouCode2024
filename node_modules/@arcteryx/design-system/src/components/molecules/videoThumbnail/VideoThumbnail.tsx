import React from "react";
import styled, { css } from "styled-components";
import { Breakpoint } from "@arcteryx/components-typography";
import { Icon } from "@arcteryx/components-icons";
import { type VideoThumbnailProps } from "./VideoThumbnail.types";
import { Image } from "../../atoms";

const StyledVideoThumbnailWrapper = styled.button`
  border: none;
  cursor: pointer;
  padding: 0;
  background: transparent;

  aspect-ratio: 16 / 9;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
`;

const StyledOverlay = styled.div`
  position: absolute;
  width: 100%;
  height: 100%;
  // Black overlay, 40% opacity all the way across
  background: rgba(0, 0, 0, 0.4);
`;

const StyledVideoThumbnail = styled(Image)`
  width: 100%;
  height: 100%;
  object-fit: cover;
`;

const StyledVideoThumbnailContent = styled.div`
  position: absolute;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  max-width: 17rem;
  text-align: center;

  ${Breakpoint("md")`
    max-width: 36rem;
  `}

  svg {
    width: 43.55px;
    height: 43.82px;

    ${Breakpoint("md")`
      width: 75.74px;
      height: 76.21px;
    `}
  }
`;

interface StyledVideoTextProps {
  $colour: string;
}

const DefaultTextStyles = css`
  font-family: "urw-din", arial, sans-serif;
  font-size: 1rem;
  font-weight: 400;
  font-style: normal;
  line-height: 1.5rem;
`;

const StyledVideoTitle = styled.span<StyledVideoTextProps>`
  ${DefaultTextStyles}
  color: ${(props) => props.$colour};
`;

const StyledVideoSubtitle = styled.span<StyledVideoTextProps>`
  ${DefaultTextStyles}
  color: ${(props) => props.$colour};
  font-style: italic;
`;

export const VideoThumbnail: React.FC<VideoThumbnailProps> = ({
  title,
  subtitle,
  image,
  isPlayButtonEnabled = true,
  playButtonColour = "#FFFFFF",
  textColour = "#FFFFFF",
  isThumbnailGradientEnabled = false,
  onClickHandler,
}) => {
  return (
    <StyledVideoThumbnailWrapper
      onClick={onClickHandler}
      data-testid="video-wrapper"
    >
      {isThumbnailGradientEnabled && (
        <StyledOverlay data-testid="thumbnail-gradient" />
      )}
      {image?.src !== "" && image?.src !== undefined && (
        <StyledVideoThumbnail src={image.src} alt={image?.alt} />
      )}
      <StyledVideoThumbnailContent>
        {isPlayButtonEnabled && (
          <Icon
            title="Play button"
            type="play-button"
            color={playButtonColour}
          />
        )}
        <StyledVideoTitle $colour={textColour}>{title}</StyledVideoTitle>
        <StyledVideoSubtitle $colour={textColour}>
          {subtitle}
        </StyledVideoSubtitle>
      </StyledVideoThumbnailContent>
    </StyledVideoThumbnailWrapper>
  );
};
