import React from "react";
import { render, fireEvent } from "@testing-library/react";
import { VideoThumbnail } from "./VideoThumbnail";
import "@testing-library/jest-dom";

describe("VideoThumbnail", () => {
  const mockOnClickHandler = jest.fn();

  const defaultProps = {
    title: "Test Video",
    subtitle: "Test Subtitle",
    image: {
      src: "test-image.jpg",
      alt: "Test Image",
    },
    isPlayButtonEnabled: true,
    playButtonColour: "#FFFFFF",
    textColour: "#FFFFFF",
    isThumbnailGradientEnabled: false,
    onClickHandler: mockOnClickHandler,
  };

  it("calls the onClickHandler when the video thumbnail is clicked", () => {
    const { getByTestId } = render(<VideoThumbnail {...defaultProps} />);
    const videoWrapper = getByTestId("video-wrapper");

    fireEvent.click(videoWrapper);

    expect(mockOnClickHandler).toHaveBeenCalled();
  });

  it("renders the video wrapper correctly", () => {
    const { getByTestId } = render(<VideoThumbnail {...defaultProps} />);
    const videoWrapper = getByTestId("video-wrapper");

    expect(videoWrapper).toBeInTheDocument();
  });

  it("renders the video title correctly", () => {
    const { getByText } = render(<VideoThumbnail {...defaultProps} />);
    const videoTitle = getByText("Test Video");

    expect(videoTitle).toBeInTheDocument();
  });

  it("renders the video subtitle correctly", () => {
    const { getByText } = render(<VideoThumbnail {...defaultProps} />);
    const videoSubtitle = getByText("Test Subtitle");

    expect(videoSubtitle).toBeInTheDocument();
  });

  it("renders the video image correctly", () => {
    const { getByAltText } = render(<VideoThumbnail {...defaultProps} />);
    const videoImage = getByAltText("Test Image");

    expect(videoImage).toBeInTheDocument();
  });

  it("renders the play button correctly", () => {
    const { getByTitle } = render(<VideoThumbnail {...defaultProps} />);
    const playButton = getByTitle("Play button");

    expect(playButton).toBeInTheDocument();
  });

  it("renders the video thumbnail without the play button when isPlayButtonEnabled is false", () => {
    const { queryByTitle } = render(
      <VideoThumbnail {...defaultProps} isPlayButtonEnabled={false} />,
    );

    const playButton = queryByTitle("Play button");

    expect(playButton).not.toBeInTheDocument();
  });

  it("renders the thumbnail gradient correctly", () => {
    const { getByTestId } = render(
      <VideoThumbnail {...defaultProps} isThumbnailGradientEnabled={true} />,
    );
    const thumbnailGradient = getByTestId("thumbnail-gradient");

    expect(thumbnailGradient).toBeInTheDocument();
  });
});
