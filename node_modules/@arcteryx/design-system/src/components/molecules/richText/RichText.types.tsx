import type { PortableTextBlock } from "@portabletext/types";
import { type ButtonProps } from "../../atoms/button/Button.types";
import { type ImageProps } from "../../atoms/image/Image.types";

type LinkType = "default" | "page" | "internalModal" | "externalModal";

type TextAlign = "left" | "center" | "right";

type Spacing = "0rem" | "1rem" | "1.5rem" | "2rem" | "3rem";
export interface PortableTextMarkFragmentId {
  _type: "fragmentId";
  fragmentId: string;
}
export interface PortableTextLinkMarkDef {
  _type: string;
  linkType: LinkType;
  url: string;
  target: "_blank" | "_self";
}
export interface PortableTextButton {
  _type: "atLink";
  label: string;
  linkType: LinkType;
  shouldDisplayAsButton: boolean;
  variant: ButtonProps["context"];
  url: string;
}
interface PortableTextPhone {
  _type: "phone";
  number: string;
}

interface PortableTable {
  _type: "table";
  rows: Array<{
    _type: "tableRow";
    cells: string[];
  }>;
}
/**
 * Core interface is "block" | string;
 * by using "block" we can enforce a difference between phone and atLink.
 */
export interface CustomPortableTextBlock
  extends Omit<PortableTextBlock, "_type"> {
  _type: "block";
}

export interface PortableImageContainer {
  _type: "imageContainer";
  imageContainer: ImageProps[];
}

export type RichTextBlocks = Array<
  | PortableTextButton
  | PortableTextPhone
  | PortableTable
  | CustomPortableTextBlock
  | PortableImageContainer
>;
export interface RichTextProps {
  content: RichTextBlocks;
  textAlign?: TextAlign;
  spacing?: Spacing;
}
