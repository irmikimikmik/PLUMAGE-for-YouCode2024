import { render } from "@testing-library/react";

import { RichText } from "./RichText";
import React from "react";
import "@testing-library/jest-dom";
import {
  richTextBlockList,
  buttonBlock,
  h1Block,
  h2Block,
  h3Block,
  h4Block,
  spanBlock,
  tableBlock,
} from "./__mocks__/blocks";

describe("RichText", () => {
  it("renders without crashing", () => {
    render(<RichText content={[]} />);
  });

  it("renders a single block of text", () => {
    const { getByText } = render(<RichText content={spanBlock} />);
    expect(getByText("Hello, world!")).toBeInTheDocument();
  });

  it("renders a button block", () => {
    const { getByText } = render(<RichText content={buttonBlock} />);
    const button = getByText("Shop").parentNode;
    expect(button).toBeInTheDocument();
    expect(button).toHaveAttribute("href", "https://example.com");
  });

  it("renders multiple blocks", () => {
    const { getByText, container } = render(
      <RichText content={richTextBlockList} />,
    );
    expect(getByText("Hello, world!")).toBeInTheDocument();
    const button = getByText("Shop").parentNode;
    expect(button).toBeInTheDocument();
    expect(button).toHaveAttribute("href", "https://example.com");
    expect(container.childNodes[0].childNodes.length).toBe(2);
  });

  it("renders an h1 element", () => {
    const { getByText } = render(<RichText content={h1Block} />);
    expect(getByText("Hello, world!")).toBeInTheDocument();
    expect(getByText("Hello, world!").tagName).toBe("H1");
  });

  it("renders an h2 element", () => {
    const { getByText } = render(<RichText content={h2Block} />);
    expect(getByText("Hello, world!")).toBeInTheDocument();
    expect(getByText("Hello, world!").tagName).toBe("H2");
  });

  it("renders an h3 element", () => {
    const { getByText } = render(<RichText content={h3Block} />);
    expect(getByText("Hello, world!")).toBeInTheDocument();
    expect(getByText("Hello, world!").tagName).toBe("H3");
  });

  it("renders an h4 element", () => {
    const { getByText } = render(<RichText content={h4Block} />);
    expect(getByText("Hello, world!")).toBeInTheDocument();
    expect(getByText("Hello, world!").tagName).toBe("H4");
  });

  it("renders a table header element", () => {
    const { getByText } = render(<RichText content={tableBlock} />);
    expect(getByText("Table Header")).toBeInTheDocument();
    expect(getByText("Table Header").tagName).toBe("TH");
  });
});
