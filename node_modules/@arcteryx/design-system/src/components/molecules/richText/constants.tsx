import { Button } from "@arcteryx/components-button";
import { H1, H2, H3, H4, P } from "@arcteryx/components-typography";
import type {
  PortableTextComponents,
  PortableTextMarkComponentProps,
} from "@portabletext/react";
import React from "react";
import styled, { css } from "styled-components";
import { Link } from "../../atoms/link/Link";
import { LinkModal } from "../../organisms/linkModal/LinkModal";
import {
  type PortableTextMarkFragmentId,
  type PortableTextButton,
  type PortableTextLinkMarkDef,
} from "./RichText.types";
import { ButtonModal } from "../../organisms/buttonModal/ButtonModal";
import { Image, type ImageProps } from "../../atoms";

const StyledStrong = styled.strong`
  font-weight: 500;
`;

const StyledDiv = styled.div`
  width: 100%;
  height: 100%;
  display: block;
  margin: 0 auto;
`;

const defaultStyles = css`
  margin-bottom: 0;
`;

const headingStyles = css`
  word-break: break-word;
  hyphens: auto;
`;

const defaultListStyles = css`
  list-style-position: inside !important;
`;

const StyledH1 = styled(H1)`
  ${defaultStyles};
  ${headingStyles};
  line-height: 3.5rem;
`;

const StyledH1Alt = styled(H1)`
  ${defaultStyles};
  ${headingStyles};
  line-height: 2.9rem;
`;

// corresponds to H1 in components-typography, see Figma style docs
const StyledH2 = styled(H1)`
  ${defaultStyles};
  ${headingStyles};
  font-size: 2rem;
  line-height: 2.3rem;
`;

const StyledH3 = styled(H2)`
  ${defaultStyles};
  ${headingStyles};
  font-size: 1.5rem;
  line-height: 1.7rem;
`;

const StyledH4 = styled(H3)`
  ${defaultStyles};
  ${headingStyles};
  font-size: 1.25rem;
  line-height: 1.5rem;
`;

const StyledH5 = styled(H4)`
  margin: 0;
  font-size: 1.1rem;
  line-height: 1.5rem;
`;

const StyledH6 = styled(H4)`
  margin: 0;
  font-size: 1rem;
  line-height: 1.5rem;
`;

const StyledP = styled(P)`
  ${defaultStyles};
`;

const StyledSubheading = styled(P)`
  ${defaultStyles};
  font-size: 1.25rem;
  line-height: 1.5rem;
`;

const StyledSubheadingAlt = styled(P)`
  ${defaultStyles};
  font-size: 1.1rem;
  line-height: 1.5rem;
`;

const StyledMiceSmall = styled(P)`
  margin: 0;
  font-size: 0.9rem;
  line-height: 1.25rem;
`;

const StyledMiceXSmall = styled(P)`
  margin: 0;
  font-size: 0.75rem;
  line-height: 1rem;
`;

const StyledUnorderedList = styled.ul`
  ${defaultListStyles};
  list-style-type: disc !important;

  li > & {
    padding-top: 0.5rem !important;
  }
`;

const StyledOrderedList = styled.ol`
  ${defaultListStyles};
  list-style-type: decimal !important;

  li > & {
    padding-top: 0.5rem !important;
  }
`;

const StyledListItem = styled.li`
  padding-left: 1rem;
`;

const StyledTable = styled.table`
  width: 100%;
  border-collapse: separate;
  font-size: 1rem;

  tr {
    word-break: break-word;
  }

  td {
    height: 2rem;
    padding: 7px 0;
  }
`;

const StyledImageContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
`;

// corresponds to Medium Hero Banner instance of Rich Text Editor only
const StyledTextColor = styled.div<{ $textColor: string }>`
  color: ${(props) => props.$textColor};
`;

export const portableTextComponents: PortableTextComponents = {
  block: {
    normal: ({ children }) => <StyledP>{children}</StyledP>,
    h1: ({ children }) => <StyledH1 louder>{children}</StyledH1>,
    h1Alt: ({ children }) => <StyledH1Alt loud>{children}</StyledH1Alt>,
    h2: ({ children }) => <StyledH2 as="h2">{children}</StyledH2>,
    h3: ({ children }) => <StyledH3 as="h3">{children}</StyledH3>,
    h4: ({ children }) => <StyledH4 as="h4">{children}</StyledH4>,
    h5: ({ children }) => <StyledH5 as="h5">{children}</StyledH5>,
    h6: ({ children }) => <StyledH6 as="h6">{children}</StyledH6>,
    subheading: ({ children }) => (
      <StyledSubheading>{children}</StyledSubheading>
    ),
    subheadingAlt: ({ children }) => (
      <StyledSubheadingAlt>{children}</StyledSubheadingAlt>
    ),
    miceSmall: ({ children }) => <StyledMiceSmall>{children}</StyledMiceSmall>,
    miceXSmall: ({ children }) => (
      <StyledMiceXSmall>{children}</StyledMiceXSmall>
    ),
  },
  list: {
    bullet: ({ children }) => (
      <StyledUnorderedList>{children}</StyledUnorderedList>
    ),
    number: ({ children }) => <StyledOrderedList>{children}</StyledOrderedList>,
  },
  listItem: ({ children }) => <StyledListItem>{children}</StyledListItem>,
  // Custom Types that we define in our studio. This refers to the name of the schema, not the type.
  // We may want to consider aligning our names and types in the studio so that it is clear
  // in this file what the type is. ie should this be atButton, atLink etc...
  types: {
    atLink: ({
      value: { label, variant, linkType, url },
    }: {
      value: PortableTextButton;
    }) => {
      const isDefault = linkType === "default";
      const isPage = linkType === "page";
      if (isDefault || isPage) {
        return (
          <StyledDiv>
            <Button context={variant} href={url}>
              {label}
            </Button>
          </StyledDiv>
        );
      } else {
        return <ButtonModal context={variant} url={url} label={label} />;
      }
    },

    table: ({
      value: { rows },
    }: {
      value: { rows: Array<{ cells: string[] }> };
    }) => {
      const tableHeader = rows[0].cells;
      const tableBody = rows.slice(1);
      return (
        <StyledTable>
          <tbody>
            <tr>
              {tableHeader.map((cell, index) => (
                <th key={index}>{cell}</th>
              ))}
            </tr>
            {tableBody.map((row, index) => (
              <tr key={index}>
                {row.cells.map((cell, index) => (
                  <td key={index}>{cell}</td>
                ))}
              </tr>
            ))}
          </tbody>
        </StyledTable>
      );
    },

    phone: ({ value: { number } }: { value: { number: string } }) => {
      return <Link href={`tel:${number}`} text={number} />;
    },
    imageContainer: ({
      value: { imageContainer },
    }: {
      value: { imageContainer: ImageProps[] };
    }) => {
      return (
        <StyledImageContainer>
          {imageContainer.map((image, index) => (
            <Image key={index} {...image} />
          ))}
        </StyledImageContainer>
      );
    },
  },

  marks: {
    link: ({
      value,
      text,
    }: PortableTextMarkComponentProps<PortableTextLinkMarkDef>) => {
      const isDefault = value?.linkType === "default";
      const isPage = value?.linkType === "page";
      if (isDefault || isPage) {
        return (
          <Link href={value?.url ?? ""} target={value?.target} text={text} />
        );
      } else {
        return <LinkModal text={text} href={value?.url ?? ""} />;
      }
    },

    fragmentId: ({
      children,
      value,
    }: PortableTextMarkComponentProps<PortableTextMarkFragmentId>) => {
      const fragmentId = value?.fragmentId ?? "";
      return <span id={fragmentId}>{children}</span>;
    },
    strong: ({ children }) => <StyledStrong>{children}</StyledStrong>,
    textColor: ({ children, value }) => {
      const { value: textColor } = value;
      return (
        <StyledTextColor $textColor={textColor}>{children}</StyledTextColor>
      );
    },
  },
};
