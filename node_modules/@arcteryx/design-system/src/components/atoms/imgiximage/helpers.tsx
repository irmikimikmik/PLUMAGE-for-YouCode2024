// Constants for attributeConfig keys
const DATA_SRC = "data-src";
const DATA_SIZES = "data-sizes";
const DATA_SRCSET = "data-srcset";
const LQIP_HEIGHT = 10;

export interface ImgixConfig {
  attributeConfig:
    | {
        src: string;
        sizes: string;
        srcSet: string;
      }
    | undefined;
  commonImgixProps: {
    fit: string;
    crop: string;
    auto: string;
    q: number;
  };
  lqipSource: string;
  imageClassName: string;
}

interface GenerateImgixConfigOptions {
  shouldLazyLoad: boolean;
  shouldCompress: boolean;
  shouldEnhance: boolean;
  quality: number;
  src: string;
}

export const generateImgixConfig = ({
  shouldLazyLoad,
  shouldCompress,
  shouldEnhance,
  quality,
  src,
}: GenerateImgixConfigOptions): ImgixConfig => {
  // Set the attributeConfig based on the shouldLazyLoad parameter
  const attributeConfig = shouldLazyLoad
    ? {
        src: DATA_SRC,
        sizes: DATA_SIZES,
        srcSet: DATA_SRCSET,
      }
    : undefined;

  // Generate the 'auto' property based on 'shouldCompress' and 'shouldEnhance'
  const auto = generateImgixAuto(shouldCompress, shouldEnhance);

  // Common Imgix properties
  const commonImgixProps = {
    fit: "crop",
    crop: "focalpoint",
    auto,
    q: quality,
  };

  // Low Quality Image Placeholder Technique (LQIP)
  const lqipSource = `${src}?h=${LQIP_HEIGHT}&auto=format,compress`;

  // Only apply the lazyload classname to the image element. When applied to the Source element, it
  // will severely impact performance.
  const imageClassName = shouldLazyLoad ? "lazyload" : "";

  return {
    attributeConfig,
    commonImgixProps,
    lqipSource,
    imageClassName,
  };
};

const generateImgixAuto = (
  shouldCompress: boolean,
  shouldEnhance: boolean,
): string => {
  const compress = shouldCompress ? "compress," : "";
  const enhance = shouldEnhance ? "enhance" : "";
  const auto = `format,${compress}${enhance}`;
  return auto;
};
