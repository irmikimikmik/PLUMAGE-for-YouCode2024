import { css } from "styled-components";
import { generateStyleValue } from "./helpers";

/** Base styles are for the 375 breakpoint. They will all have defaults.
 * If the CMS Passes in a style for tablet or desktop, it will be passed into the component
 * through the tabletStyles or desktopStyles prop. If those objects have properties, they will
 * override the previous breakpoint.
 */

const defaultMargin = 0;
const defaultFontWeight = 400;

/** Mobile - 375 */
export const baseMarginStyles = css`
  margin-top: ${({ marginTop = defaultMargin }) => `${generateStyleValue(marginTop)}`};
  margin-right: ${({ marginRight = defaultMargin }) => `${generateStyleValue(marginRight)}`};
  margin-left: ${({ marginLeft = defaultMargin }) => `${generateStyleValue(marginLeft)}`};
  margin-bottom: ${({ marginBottom = defaultMargin }) => `${generateStyleValue(marginBottom)}`};
`;
/** Tablet - 768 */
export const tabletMarginStyles = css`
  ${(props) =>
    props.tabletStyles.hasOwnProperty("marginTop") &&
    `margin-top: ${generateStyleValue(props.tabletStyles.marginTop)};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("marginRight") &&
    `margin-right: ${generateStyleValue(props.tabletStyles.marginRight)};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("marginLeft") &&
    `margin-left: ${generateStyleValue(props.tabletStyles.marginLeft)};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("marginBottom") &&
    `margin-bottom: ${generateStyleValue(props.tabletStyles.marginBottom)};`};
`;
/** Desktop - 1440 */
export const desktopMarginStyles = css`
  ${(props) =>
    props.desktopStyles.hasOwnProperty("marginTop") &&
    `margin-top: ${generateStyleValue(props.desktopStyles.marginTop)};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("marginRight") &&
    `margin-right: ${generateStyleValue(props.desktopStyles.marginRight)};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("marginLeft") &&
    `margin-left: ${generateStyleValue(props.desktopStyles.marginLeft)};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("marginBottom") &&
    `margin-bottom: ${generateStyleValue(props.desktopStyles.marginBottom)};`};
`;
/** Mobile - 375 */
export const baseFontStyles = css`
  color: ${({ color = "#ffffff" }) => color};
  font-family: ${({ fontFamily = "urw-din,arial,sans-serif" }) => fontFamily};
  font-size: ${({ fontSize = 15 }) => `${generateStyleValue(fontSize)}`};
  font-weight: ${({ fontWeight = defaultFontWeight }) => fontWeight};
  letter-spacing: ${({ letterSpacing = "normal" }) => letterSpacing};
  line-height: ${({ lineHeight = 15 }) => `${generateStyleValue(lineHeight)}`};
  text-align: ${({ textAlign = "center" }) => textAlign};
  text-shadow: ${({ textShadow = "none" }) => textShadow};
  text-transform: ${({ textTransform = "none" }) => textTransform};
`;

/** Tablet - 375 */
export const tabletFontStyles = css`
  ${(props) => props.tabletStyles.hasOwnProperty("color") && `color: ${props.tabletStyles.color};`};
  ${(props) => props.tabletStyles.hasOwnProperty("fontFamily") && `font-family: ${props.tabletStyles.fontFamily};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("fontSize") && `font-size: ${generateStyleValue(props.tabletStyles.fontSize)};`};
  ${(props) => props.tabletStyles.hasOwnProperty("fontWeight") && `font-weight: ${props.tabletStyles.fontWeight};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("letterSpacing") && `letter-spacing: ${props.tabletStyles.letterSpacing};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("lineHeight") &&
    `line-height: ${generateStyleValue(props.tabletStyles.lineHeight)};`};
  ${(props) => props.tabletStyles.hasOwnProperty("textAlign") && `text-align: ${props.tabletStyles.textAlign};`};
  ${(props) => props.tabletStyles.hasOwnProperty("textShadow") && `text-shadow: ${props.tabletStyles.textShadow};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("textTransform") && `text-transform: ${props.tabletStyles.textTransform};`};
`;

/** Desktop - 1440 */
export const desktopFontStyles = css`
  ${(props) => props.desktopStyles.hasOwnProperty("color") && `color: ${props.desktopStyles.color};`};
  ${(props) => props.desktopStyles.hasOwnProperty("fontFamily") && `font-family: ${props.desktopStyles.fontFamily};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("fontSize") &&
    `font-size: ${generateStyleValue(props.desktopStyles.fontSize)};`};
  ${(props) => props.desktopStyles.hasOwnProperty("fontWeight") && `font-weight: ${props.desktopStyles.fontWeight};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("letterSpacing") && `letter-spacing: ${props.desktopStyles.letterSpacing};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("lineHeight") &&
    `line-height: ${generateStyleValue(props.desktopStyles.lineHeight)};`};
  ${(props) => props.desktopStyles.hasOwnProperty("textAlign") && `text-align: ${props.desktopStyles.textAlign};`};
  ${(props) => props.desktopStyles.hasOwnProperty("textShadow") && `text-shadow: ${props.desktopStyles.textShadow};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("textTransform") && `text-transform: ${props.desktopStyles.textTransform};`};
`;

/** Mobile - 375 */
export const baseFlexBox = css`
  display: ${({ display = "flex" }) => display};
  flex-direction: ${({ flexDirection = "column" }) => flexDirection};
  justify-content: ${({ justifyContent = "center" }) => justifyContent};
  gap: ${(props) => (props.gap ? `${generateStyleValue(props.gap)}` : "1rem")};
  align-items: ${({ alignItems = "center" }) => alignItems};
  flex-wrap: wrap;
`;

/** Tablet - 768*/
export const tabletFlexBox = css`
  ${(props) => props.tabletStyles.hasOwnProperty("display") && `display: ${props.tabletStyles.display};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("flexDirection") && `flex-direction: ${props.tabletStyles.flexDirection};`};
  ${(props) =>
    props.tabletStyles.hasOwnProperty("justifyContent") && `justify-content: ${props.tabletStyles.justifyContent};`};
  ${(props) => props.tabletStyles.hasOwnProperty("gap") && `gap: ${generateStyleValue(props.tabletStyles.gap)};`};
  ${(props) => props.tabletStyles.hasOwnProperty("alignItems") && `align-items: ${props.tabletStyles.alignItems};`};
`;

/** Desktop - 1440*/
export const desktopFlexBox = css`
  ${(props) => props.desktopStyles.hasOwnProperty("display") && `display: ${props.desktopStyles.display};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("flexDirection") && `flex-direction: ${props.desktopStyles.flexDirection};`};
  ${(props) =>
    props.desktopStyles.hasOwnProperty("justifyContent") && `justify-content: ${props.desktopStyles.justifyContent};`};
  ${(props) => props.desktopStyles.hasOwnProperty("gap") && `gap: ${generateStyleValue(props.desktopStyles.gap)};`};
  ${(props) => props.desktopStyles.hasOwnProperty("alignItems") && `align-items: ${props.desktopStyles.alignItems};`};
`;

/** Mobile - 375 */
export const baseSizeStyles = css`
  height: ${({ height = "auto" }) => generateStyleValue(height)};
  width: ${({ width = "auto" }) => generateStyleValue(width)};
  max-width: ${({ maxWidth = "none" }) => generateStyleValue(maxWidth)};
  max-height: ${({ maxHeight = "none" }) => generateStyleValue(maxHeight)};
`;

/** Tablet - 768*/
export const tabletSizeStyles = css`
  ${({ tabletStyles }) =>
    tabletStyles &&
    css`
      ${tabletStyles.hasOwnProperty("height") && `height: ${generateStyleValue(tabletStyles.height)};`}
      ${tabletStyles.hasOwnProperty("width") && `width: ${generateStyleValue(tabletStyles.width)};`}
    ${tabletStyles.hasOwnProperty("maxWidth") && `max-width: ${generateStyleValue(tabletStyles.maxWidth)};`}
    ${tabletStyles.hasOwnProperty("maxHeight") && `max-height: ${generateStyleValue(tabletStyles.maxHeight)};`}
    `}
`;

/** Desktop - 1440*/
export const desktopSizeStyles = css`
  ${({ desktopStyles }) =>
    desktopStyles &&
    css`
      ${desktopStyles.hasOwnProperty("height") && `height: ${generateStyleValue(desktopStyles.height)};`}
      ${desktopStyles.hasOwnProperty("width") && `width: ${generateStyleValue(desktopStyles.width)};`}
    ${desktopStyles.hasOwnProperty("maxWidth") && `max-width: ${generateStyleValue(desktopStyles.maxWidth)};`}
    ${desktopStyles.hasOwnProperty("maxHeight") && `max-height: ${generateStyleValue(desktopStyles.maxHeight)};`}
    `}
`;
