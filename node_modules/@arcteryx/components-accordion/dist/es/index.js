import React, { useState, useRef, useEffect } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import { H1, H2, H3, H4, P } from '@arcteryx/components-typography';
import styled, { css } from 'styled-components';

const AccordionElement = styled.div`
  width: 100%;
  display: flex;
  overflow: hidden;
  flex-flow: column nowrap;
  justify-content: flex-start;
  height: auto;
  transition: max-height ease-in 0.5s;
  border-bottom: 1px solid #cccccc;

  .accordion__content {
    width: 100%;
  }

  &.accordion--open {
    max-height: inherit;
  }

  &.accordion--open .accordion__title:after {
    transform: translateY(-50%) rotate(-135deg);
  }

  &:first-of-type {
    margin-top: -1px;
    border-top: 1px solid #cccccc;
  }
`;
const AccordionTitle = styled.div`
  display: block;
  width: 100%;
  position: relative;
  cursor: pointer;
  margin-bottom: 0;
  line-height: 1.5;
  max-width: none;
  text-transform:none;
  padding: 1rem 1rem 1rem 0;


  &:after {
    content: "+";
    position: absolute;
    top: 50%;
    right: 0;
    z-index: 1;
    transition: all ease-in 0.3s;
    transform: translateY(-50%);
    font-size: 1.1rem;
    font-family: "urw-din",arial,sans-serif;
    font-weight: 400;
    font-style: normal;
    line-height: 1.5;
  }
`;
const AccordionButton = styled.button`
  position: relative;
  z-index: 2;
  display: flex;
  flex-direction: row;
  text-transform: none;
  width: 100%;
  padding: 0;
  margin: 0;
  border: 0;
  cursor: pointer;
  text-align: left;
  background-color: transparent;

  &:focus {
    outline: none;
  }

  &:focus-visible {
    outline: 0.2rem solid #5b9dd9;
  }
`;
const AccordionContent$1 = styled.div`
  padding-bottom: 1rem;
`;
const Accordion = props => {
  const windowWidth = typeof window !== "undefined" ? window.innerWidth : 0;
  const [isOpen, toggleAccordion] = useState(false);
  const [width, setWidth] = useState(windowWidth);
  const accordionRef = useRef();
  const toggle = () => {
    toggleAccordion(!isOpen);
  };
  const {
    headingLevel
  } = props;
  const chooseHeadingTag = level => ({
    "1": H1,
    "2": H2,
    "3": H3,
    "4": H4,
    "5": P
  })[level];
  const customTag = chooseHeadingTag(headingLevel);
  useEffect(() => {
    function handleResize() {
      setWidth(window.innerWidth);
    }
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [width]);
  useEffect(() => {
    let toggleState = false;
    if (props.minWidthStayOpen) {
      toggleState = width >= props.minWidthStayOpen ? true : false;
    }
    if (props.isOpenOnPageLoad) {
      toggleState = true;
    }
    toggleAccordion(toggleState);
  }, [width, props.minWidthStayOpen, props.isOpenOnPageLoad]);
  return /*#__PURE__*/React.createElement(AccordionElement, {
    id: props.id,
    className: `${isOpen ? "accordion--open" : ""} ${props.className ? props.className : ""} accordion`,
    ref: accordionRef
  }, /*#__PURE__*/React.createElement(AccordionButton, {
    onClick: toggle,
    "aria-expanded": isOpen
  }, /*#__PURE__*/React.createElement(AccordionTitle, {
    className: "accordion__title",
    size: "m",
    headingLevel: headingLevel,
    as: customTag
  }, props.title)), isOpen ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(AccordionContent$1, {
    className: "accordion__content"
  }, props.children), accordionRef.current) : null);
};
Accordion.propTypes = {
  title: PropTypes.string.isRequired,
  headingLevel: PropTypes.oneOf(["1", "2", "3", "4", "5", "6"]),
  minWidthStayOpen: PropTypes.number,
  className: PropTypes.any
};
Accordion.defaultProps = {
  headingLevel: "3"
};

const AccordionContainer = styled.div`
  border-top: 1px solid var(--colour-grey-pinline);
`;
const AccordionItemStyled = styled.div`
  border-bottom: 1px solid var(--colour-grey-pinline);
  &:last-child {
    border-bottom: 1px solid var(--colour-grey-pinline);
  }
`;
const CustomRadioButton = styled.div`
  position: relative;
  margin-right: 0.6rem;
  border: 1px solid var(--colour-grey-pinline);
  border-radius: 50%;
  height: 1rem;
  width: 1rem;
  transition: border-color 0.2s ease-out, box-shadow 0.2s ease-out;

  &:after {
    content: '';
    position: absolute;
    margin: 0 auto;
    left: 50%;
    top: 50%;
    height: 0.7rem;
    width: 0.7rem;
    background-color: var(--colour-black);
    border-radius: 50%;
    transform: translate(-50%, -50%) scale(0);
    transition: transform 0.3s ease-out;
  }

  ${_ref => {
  let {
    isSelected
  } = _ref;
  return isSelected && css`
      &:after {
        transform: translate(-50%, -50%) scale(1);
      }
    `;
}}
`;
const RadioInput = styled.input`
  opacity: 0;
  position: absolute;
  margin: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
`;
const InputLabelContainer = styled.label`
  display: flex;
  align-items: center;
  cursor: pointer;
  width: 100%;
  margin: 0.6rem 0;
`;
const AccordionContent = styled.div`
  display: none;
  padding: 0.6rem;
  margin-left: 1rem;
  ${_ref2 => {
  let {
    isVisible
  } = _ref2;
  return isVisible && css`
      display: block;
    `;
}}
`;

const RadioAccordion = _ref => {
  let {
    items
  } = _ref;
  const [activeId, setActiveId] = useState(null);
  const handleChange = id => {
    setActiveId(prevId => prevId === id ? null : id);
  };
  return /*#__PURE__*/React.createElement(AccordionContainer, null, items.map(item => /*#__PURE__*/React.createElement(AccordionItemStyled, {
    key: item.id
  }, /*#__PURE__*/React.createElement(InputLabelContainer, null, /*#__PURE__*/React.createElement(CustomRadioButton, {
    isSelected: activeId === item.id
  }, /*#__PURE__*/React.createElement(RadioInput, {
    type: "radio",
    id: item.id,
    name: "accordion",
    checked: activeId === item.id,
    onChange: () => handleChange(item.id)
  })), item.title), /*#__PURE__*/React.createElement(AccordionContent, {
    isVisible: activeId === item.id
  }, item.content))));
};

export { Accordion, RadioAccordion };
//# sourceMappingURL=index.js.map
