import React, { useContext, useMemo } from "react";
import { SiteContext } from "@arcteryx/components-contexts";
import UIComponentsScript from "./UIComponentsScript";
import styled from "styled-components";
import { ScreenSize } from "@arcteryx/components-typography";
import PropTypes from "prop-types";

const HeaderFragment = ({
  className,
  env = "production",
  loadScript = true,
  loadFooter = true,
  fdp = true,
  disableSearchCss = true,
  uiBaseUrl = "",
  scriptPrefix = "",
}) => {
  const { market, country, language } = useContext(SiteContext);
  const header = React.createElement(`arcteryx-${market}-header`, {
    class: className,
    market,
    country,
    language,
    fdp,
    disableSearchCss,
    id: "arcteryx-header",
  });
  const localeSwitcher = React.createElement("arcteryx-locale-switcher", { country, language });
  return (
    <React.Fragment>
      {loadScript && <UIComponentsScript uiBaseUrl={uiBaseUrl} env={env} loadFooter={loadFooter} scriptPrefix={scriptPrefix} />}
      {header}
      {market !== "leaf" ? localeSwitcher : null}
    </React.Fragment>
  );
};

const StyledHeader = styled(HeaderFragment)`
  display: block;
  min-height: ${(props) => props.mobileHeight};
  @media (min-width: ${(props) => props.breakPoint}) {
    min-height: ${(props) => props.desktopHeight};
  }
`;

export const headerData = {
  outdoor: {
    mobileHeight: "119.5px",
    desktopHeight: "184.5px",
    breakPoint: `${ScreenSize.md}px`,
  },
  sale: {
    mobileHeight: "92.5px",
    desktopHeight: "142.5px",
    breakPoint: "900px",
  },
  leaf: {
    mobileHeight: "50px",
    desktopHeight: "100px",
    breakPoint: `${ScreenSize.md}px`,
  },
};

const UIHeader = (props) => {
  const { market } = useContext(SiteContext);

  const headerSizeData = useMemo(() => {
    // Use Leaf as a fallback since it has the smalest height
    const theMarket = market || "leaf";
    return headerData[theMarket];
  }, [market]);

  return (
    <StyledHeader
      desktopHeight={headerSizeData.desktopHeight}
      mobileHeight={headerSizeData.mobileHeight}
      breakPoint={headerSizeData.breakPoint}
      {...props}
    />
  );
};

UIHeader.propTypes = {
  className: PropTypes.any,
  env: PropTypes.string,
  loadScript: PropTypes.bool,
  loadFooter: PropTypes.bool,
  fdp: PropTypes.bool,
  disableSearchCss: PropTypes.bool,
  uiBaseUrl: PropTypes.string,
  scriptPrefix: PropTypes.string,
};

export default UIHeader;
