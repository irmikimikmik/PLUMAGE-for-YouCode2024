import React, { useMemo, useContext } from "react";
import UIFooter from "./UIFooter";
import styled from "styled-components";
import { useIsOnScreen } from "@arcteryx/components-hooks";
import PropTypes from "prop-types";
import { ScreenSize } from "@arcteryx/components-typography";
import { SiteContext } from "@arcteryx/components-contexts";

/** Safe distance to start loading the footer script in.
 * Unless the user is scrolling very fast the footer will load before it appears on screen
 */
export const UI_LAZY_FOOTER_DEFAULT_ROOT_MARGIN = "500px";

const FooterWrapperDiv = styled.div`
  min-height: ${(props) => props.mobileHeight};
  @media (min-width: ${(props) => props.breakPoint}) {
    min-height: ${(props) => props.desktopHeight};
  }
`;

/** Reserve space for the UIFooter element so that it doesn't cause scrollbar jank if it is lazy-loaded
  min-height determined by smallest height of Footer on different viewports for safety
*/
export const footerData = {
  outdoor: {
    appViewHeight: "0px",
    mobileHeight: "814px",
    desktopHeight: "680px",
    breakPoint: `${ScreenSize.md}px`,
  },
  sale: {
    appViewHeight: "800px",
    mobileHeight: "800px",
    desktopHeight: "713px",
    breakPoint: "900px",
  },
  leaf: {
    appViewHeight: "260px",
    mobileHeight: "260px",
    desktopHeight: "260px",
    breakPoint: `${ScreenSize.md}px`,
  },
};

/**
 * @param {string} rootMargin how much space from the screen to when the window meets
 * @param {boolean} appWebview user agent for mobile app
 */
const LazyUIFooter = ({
  deployEnv = "qa",
  rootMargin = UI_LAZY_FOOTER_DEFAULT_ROOT_MARGIN,
  uiBaseUrl = "",
  scriptPrefix = "",
  appWebview = false
}) => {
  const { market } = useContext(SiteContext);
  const { ref, isOnScreen } = useIsOnScreen({ rootMargin });

  const minHeight = useMemo(() => {
    const theMarket = market || "leaf";
    return footerData[theMarket];
  }, [market]);

  const wrapperMobileHeight = appWebview ? minHeight.appViewHeight : minHeight.mobileHeight;

  return (
    <FooterWrapperDiv
      ref={ref}
      className="qa--footer"
      data-testid="qa--footer"
      mobileHeight={wrapperMobileHeight}
      desktopHeight={minHeight.desktopHeight}
      breakPoint={minHeight.breakPoint}
    >
      {isOnScreen ? <UIFooter uiBaseUrl={uiBaseUrl} scriptPrefix={scriptPrefix} loadScript env={deployEnv} /> : null}
    </FooterWrapperDiv>
  );
};

LazyUIFooter.propTypes = {
  deployEnv: PropTypes.oneOf(["production", "stage", "qa"]),
  rootMargin: PropTypes.string,
  uiBaseUrl: PropTypes.string,
  scriptPrefix: PropTypes.string,
  appWebview: PropTypes.bool
};

export default LazyUIFooter;
