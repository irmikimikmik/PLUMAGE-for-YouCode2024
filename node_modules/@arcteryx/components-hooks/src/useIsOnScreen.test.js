import React from "react";
import { render, screen } from "@testing-library/react";
import { useIsOnScreen } from "./useIsOnScreen";
import "@testing-library/jest-dom/extend-expect";
import { useIntersectionObserver } from "./useIntersectionObserver";

jest.mock("./useIntersectionObserver")

describe(useIsOnScreen.name, () => {
  it("should return the ref and isOnScreen properties", () => {
    function TestComponent() {
      const { ref, isOnScreen } = useIsOnScreen({});
      return (
        <div ref={ref}>
          <span>{isOnScreen ? "On screen" : "Off screen"}</span>
        </div>
      );
    }

    render(<TestComponent />);
    expect(screen.getByText("Off screen")).toBeInTheDocument();
  });

  it("returns isOnScreen if is intersecting with screen", () => {
    useIntersectionObserver.mockImplementationOnce(({ onIntersect }) => {
        // Mock the behavior of the IntersectionObserver
        onIntersect([{ isIntersecting: true }]);
    });

    function TestComponent() {
      const { ref, isOnScreen } = useIsOnScreen();
      return (
        <div ref={ref}>
          <span>{isOnScreen ? "On screen" : "Off screen"}</span>
        </div>
      );
    }

    render(<TestComponent />);
    expect(screen.getByText("On screen")).toBeInTheDocument();
  });

it("isOnScreen remains true after item leaves screen",() => {
    let isIntersecting = true
    useIntersectionObserver.mockImplementationOnce(({ onIntersect }) => {
        // Mock the behavior of the IntersectionObserver
        onIntersect([{ isIntersecting }]);
    });

    function TestComponent() {
        const { ref, isOnScreen } = useIsOnScreen({ rootMargin: "100px" });
        return (
        <div ref={ref}>
            <span>{isOnScreen ? "On screen" : "Off screen"}</span>
        </div>
        );
    }

    const { rerender} = render(<TestComponent />)

    expect(screen.getByText("On screen")).toBeInTheDocument(); 

    isIntersecting = false;

    rerender(<TestComponent />);

    expect(screen.getByText("On screen")).toBeInTheDocument(); 

})

});