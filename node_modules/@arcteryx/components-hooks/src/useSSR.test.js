import { renderHook } from "@testing-library/react-hooks";
import { useSSR } from "./useSSR";

const mockWindow = {
  addEventListener: () => {},
  removeEventListener: () => {},
  screen: {},
};

describe("useSSR", () => {
    afterEach(() => {
        jest.restoreAllMocks();
    });
  it("should set inBrowser to true when running in the browser", () => {
    const { result } = renderHook(() => useSSR());

    expect(result.current.isBrowser).toBe(true);
    expect(result.current.isServer).toBe(false);
  });

  it("should set inBrowser to false when running on the server", () => {
    jest.spyOn(global, "window", "get").mockReturnValue(mockWindow);;
    const { result } = renderHook(() => useSSR());

    expect(result.current.isBrowser).toBe(false);
    expect(result.current.isServer).toBe(true);
  });

  it("should detect if workers can be used", () => {
    const { result } = renderHook(() => useSSR());

    expect(result.current.canUseWorkers).toBe(typeof Worker !== "undefined");
  });

  it("should detect if event listeners can be used", () => {
    const { result } = renderHook(() => useSSR());

    expect(result.current.canUseEventListeners).toBe(typeof window !== "undefined" && !!window.addEventListener);
  });

  it("should detect if viewport can be used", () => {
    const { result } = renderHook(() => useSSR());

    expect(result.current.canUseViewport).toBe(typeof window !== "undefined" && !!window.screen);
  });
});
