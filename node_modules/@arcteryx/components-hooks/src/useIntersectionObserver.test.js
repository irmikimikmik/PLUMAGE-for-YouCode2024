import React, { useRef } from "react";
import { render } from "@testing-library/react";
import { useIntersectionObserver } from "./useIntersectionObserver";

const observe = jest.fn();
const unobserve = jest.fn();
const onIntersect = jest.fn();

describe("useIntersectionObserver()", () => {
  beforeEach(() => {
    jest.useRealTimers();
    jest.resetAllMocks();
    window.IntersectionObserver = jest.fn(() => ({
      observe,
      unobserve,
    }));
  });

  it("returns a setTimeout", () => {
    jest.useFakeTimers();
    jest.spyOn(global, "setTimeout");

    const MockComponent = () => {
      const ref = useRef();

      useIntersectionObserver({
        target: ref,
        delay: 1000,
      });
      return <div ref={ref}></div>;
    };

    render(<MockComponent />);
    expect(setTimeout).toHaveBeenCalled();
    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);
  });

  it("change the enabled prop to false", () => {
    jest.useFakeTimers();
    jest.spyOn(global, "setTimeout");
    const MockComponent = () => {
      const ref = useRef();

      useIntersectionObserver({
        target: ref,
        enabled: false,
      });
      return <div ref={ref}></div>;
    };

    render(<MockComponent />);
    expect(setTimeout).toHaveBeenCalledTimes(0);
  });

  it("creates a new IntersectionObserver", () => {
    jest.useFakeTimers();
    const MockComponent = () => {
      const ref = useRef();
      const current = useRef();

      useIntersectionObserver({
        target: ref,
        onIntersect,
      });
      return (
        <>
          <div ref={ref}></div>
          <div ref={current}></div>
        </>
      );
    };

    const { container } = render(<MockComponent />);

    jest.runAllTimers();

    expect(container.querySelector("div")).toBeTruthy();
  });

  it("creates a new IntersectionObserver with src prop defined", () => {
    jest.useFakeTimers();
    const MockComponent = () => {
      const ref = useRef();
      const current = useRef();

      useIntersectionObserver({
        src: { current: <div></div> },
        target: ref,
        onIntersect,
      });
      return (
        <>
          <div ref={ref} className="ref"></div>
          <div ref={current} className="current"></div>
        </>
      );
    };

    const { container } = render(<MockComponent />);

    jest.runAllTimers();

    expect(container.querySelector("div")).toBeTruthy();
  });
});
