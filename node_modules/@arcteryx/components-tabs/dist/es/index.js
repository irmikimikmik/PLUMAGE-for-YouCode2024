import styled from 'styled-components';
import React from 'react';
import { Breakpoint, H1, H3 } from '@arcteryx/components-typography';
import PropTypes from 'prop-types';

const StyledA = styled.a `
  text-decoration: none;
  text-transform: uppercase;
  color: var(--black);

  ${props => props.$hasIcon &&
    `
    display: flex;
    justify-content: center;
    align-items: center;
  `}
`;
const StyledIconWrapper = styled.div `
  margin-right: var(--space-xs);
  margin-bottom: calc(var(--space-xs) * -1);

  display: none;
  ${Breakpoint("md") `
    display: block;
  `}
`;
const TabButton = ({ children, icon }) => {
    return (React.createElement(StyledA, { "$hasIcon": Boolean(icon), "data-testid": "tab-button" },
        React.createElement(React.Fragment, null,
            Boolean(icon) && React.createElement(StyledIconWrapper, { "data-testid": "tab-icon" }, icon),
            children)));
};

const TabUl = styled.ul`
  list-style: none;
  display: flex;
  &.campaigns {
    margin: 0 auto 2rem;
    padding: 1rem 0 0;
    max-width: 95.333rem;
    border-bottom: 1px solid var(--pinline-grey);
  }
  max-width: ${props => props.$maxWidth ? "100%" : "auto"};
`;
const TabLi = styled.li`
  &.default {
    flex: 1;
    font-family: var(--font-urw-din);
    text-align: center;
    font-size: 1.1rem;
    color: ${props => props.selected ? "var(--black)" : "var(--medium-grey);"};
    font-weight: ${props => props.selected ? "600" : "400"};
    height: 30px;
    border-bottom: 1px solid var(--pinline-grey);
    transform-origin: 0% 50%;
    transition: transform 0.3s ease-in-out;
    &:hover {
      cursor: pointer;
      font-weight: 600;
      color: var(--black);
    }
    &:first-child:after {
      transform-origin: 100% 50%;
    }
    &:last-child:after {
      transform-origin: 0% 50%;
    }
    &:after {
      display: block;
      content: "";
      padding-top: 5px;
      border-bottom: 3px solid var(--black);
      transform: scaleX(0);
      transition: transform 0.25s ease-in-out;
    }
    &.selected:after {
      border-bottom: 3px solid var(--black);
      transform: scaleX(1);
      transition: transform 0.25s ease-in-out;
    }
  }
  &.campaigns {
    font-weight: 600;
    text-transform: uppercase;
    text-decoration: none;
    word-wrap: break-word;
    line-height: 1rem;
    justify-content: center;
    align-items: center;
    min-height: 3rem;
    padding: 0 1rem;
    display: inline-flex;
    flex-direction: column;
    position: relative;
    bottom: -1px;
    &:after {
      content: "";
      display: block;
      background: #000;
      height: 3px;
      width: 0%;
      position: relative;
      top: 6px;
      transition: width 300ms ease-out;
      margin-right: auto;
    }
    &:hover:after {
      width: 100%;
    }
    &.selected {
      background: #fff;
      border: 1px solid #aaa;
      border-bottom-color: #fff;
    }
    &.selected:after {
      width: 100%;
    }
    &:first-child {
      margin-left: 1rem;
    }
  }

  ${props => props.isIconList && `
    height: 100% !important;
    padding-bottom: 0;
  `}
`;
function hasIcon(child) {
  const childProps = child.props;
  return childProps.hasOwnProperty("icon");
}

/**
 *
 * @param {node} children pass in children components
 * @param {number} selectedIndex pass in state: tabIndex
 * @param {function} setSelectedIndex pass in setState: setTabIndex
 * @param {boolean} preventClick prevents the index from being manually changed on click
 * @param {string} theme defined themes: default or campaigns
 * @returns TabList Component containing a ul parent and li children
 */

const TabList = _ref => {
  let {
    children,
    selectedIndex,
    setSelectedIndex,
    $maxWidth = false,
    onSelect,
    preventClick = false,
    theme = "default" // options: default, campaigns
  } = _ref;
  const handleClick = index => {
    if (preventClick) {
      return null;
    }
    setSelectedIndex(index);
    if (onSelect) {
      onSelect();
    }
  };
  return /*#__PURE__*/React.createElement(TabUl, {
    className: theme,
    $maxWidth: $maxWidth
  }, children === null || children === void 0 ? void 0 : children.map((listItem, index) => /*#__PURE__*/React.createElement(TabLi, {
    "data-testid": "tab-li",
    className: `${theme} ${index === selectedIndex ? "selected" : ""}`,
    key: `tab-li-{${index}}`,
    onClick: () => handleClick(index),
    selected: index === selectedIndex,
    isIconList: hasIcon(listItem)
  }, listItem)));
};
TabList.propTypes = {
  children: PropTypes.node,
  selectedIndex: PropTypes.number,
  setSelectedIndex: PropTypes.func,
  maxWidth: PropTypes.bool,
  onSelect: PropTypes.func,
  preventClick: PropTypes.bool,
  theme: PropTypes.oneOf(["default", "campaigns"])
};

const TabDiv = styled.div`
  display: ${_ref => {
  let {
    isSelected
  } = _ref;
  return isSelected ? "block" : "none";
}};
`;
const StyledTitle = styled(H1)`
  font-size: 1.1rem;
  text-align: left;
  margin-top: 2rem;
  margin-bottom: 0.5rem;
`;
const StyledCategory = styled(H3)`
  margin-bottom: 1rem;
  font-size: 1.5rem;
  text-align: left;
`;
const TabContainer = _ref2 => {
  let {
    title,
    category,
    children,
    selectedIndex,
    index,
    isConditionalRenderOff = false
  } = _ref2;
  const isSelected = selectedIndex === index;
  const hasTitle = (title === null || title === void 0 ? void 0 : title.length) > 0 || false;
  const hasCategory = (category === null || category === void 0 ? void 0 : category.length) > 0 || false;
  if (isConditionalRenderOff) {
    return /*#__PURE__*/React.createElement(TabDiv, {
      "data-testid": `tab-container-${index}`,
      key: `tab-container-${index}`,
      isSelected: isSelected
    }, children);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, isSelected && /*#__PURE__*/React.createElement("div", {
    "data-testid": `tab-container-${index}`,
    key: `tab-container-${index}`
  }, hasTitle && /*#__PURE__*/React.createElement(StyledTitle, null, title), hasCategory && /*#__PURE__*/React.createElement(StyledCategory, null, category), children));
};
TabContainer.propTypes = {
  title: PropTypes.string,
  category: PropTypes.string,
  children: PropTypes.node,
  selectedIndex: PropTypes.number,
  index: PropTypes.number
};

export { TabButton, TabContainer, TabList };
//# sourceMappingURL=index.js.map
