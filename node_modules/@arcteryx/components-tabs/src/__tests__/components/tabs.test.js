import React, { useState } from "react";
import { render, screen, fireEvent, cleanup } from "@testing-library/react";
import { TabButton, TabContainer, TabList } from "../../index";
import { toHaveStyle } from "@testing-library/jest-dom/matchers";
import * as Typography from "@arcteryx/components-typography";

expect.extend({ toHaveStyle });

afterEach(cleanup);

describe("Test basic rendering for Tabs", () => {
  let TestTabs;
  const onSelect = jest.fn();
  const Tabs = () => {
    const [tabIndex, setTabIndex] = useState(0);
    return (
      <div>
        <TabList selectedIndex={tabIndex} setSelectedIndex={setTabIndex} onSelect={onSelect}>
          <TabButton>Button 1</TabButton>
          <TabButton>Button 2</TabButton>
          <TabButton>Button 3</TabButton>
        </TabList>
        <TabContainer index={0} selectedIndex={tabIndex}>
          Content 1
        </TabContainer>
        <TabContainer index={1} selectedIndex={tabIndex}>
          Content 2
        </TabContainer>
        <TabContainer index={2} selectedIndex={tabIndex}>
          Content 3
        </TabContainer>
      </div>
    );
  };

  beforeEach(() => {
    TestTabs = render(<Tabs />);
  });

  it("Should render all three buttons", () => {
    expect(screen.getByText("Button 1")).toBeTruthy();
    expect(screen.getByText("Button 2")).toBeTruthy();
    expect(screen.getByText("Button 3")).toBeTruthy();
  });

  it("Should only show the first TabContainer", () => {
    expect(screen.getByText("Content 1")).toBeTruthy();
    expect(screen.queryByText("Content 2")).toBeNull();
    expect(screen.queryByText("Content 3")).toBeNull();
  });

  it("Should only show the content for tab container 2 when button 2 is fired", () => {
    fireEvent.click(screen.getByText("Button 2"));
    expect(onSelect).toHaveBeenCalled();
    expect(screen.queryByText("Content 1")).toBeNull();
    expect(screen.getByText("Content 2")).toBeTruthy();
    expect(screen.queryByText("Content 3")).toBeNull();
  });
});

describe("Test preventClick and theme props for TabList", () => {
  const TestTabs2 = () => {
    const [tabIndex, setTabIndex] = useState(0);
    return (
      <div>
        <TabList selectedIndex={tabIndex} setSelectedIndex={setTabIndex} preventClick={true} theme="campaigns">
          <TabButton>Button 1</TabButton>
          <TabButton>Button 2</TabButton>
          <TabButton>Button 3</TabButton>
        </TabList>
        <TabContainer index={0} selectedIndex={tabIndex}>
          Content 1
        </TabContainer>
        <TabContainer index={1} selectedIndex={tabIndex}>
          Content 2
        </TabContainer>
        <TabContainer index={2} selectedIndex={tabIndex}>
          Content 3
        </TabContainer>
      </div>
    );
  };

  it("Should render the campaigns theme styles", () => {
    const { container } = render(<TestTabs2 />);
    expect(container.querySelector(".campaigns")).toBeTruthy();
  });

  it("the preventClick prop should prevent the click from changing the container", () => {
    render(<TestTabs2 />);
    fireEvent.click(screen.getByText("Button 2"));
    expect(screen.getByText("Content 1")).toBeTruthy();
    expect(screen.queryByText("Content 2")).toBeNull();
    expect(screen.queryByText("Content 3")).toBeNull();
  });
});

describe("Test Tabs with conditional rendering turned off", () => {
  const TabsConditionalRenderingOff = () => {
    const [tabIndex, setTabIndex] = useState(0);
    return (
      <div>
        <TabList selectedIndex={tabIndex} setSelectedIndex={setTabIndex}>
          <TabButton>Button 1</TabButton>
          <TabButton>Button 2</TabButton>
          <TabButton>Button 3</TabButton>
        </TabList>
        <TabContainer data-test-id="tab-container-0" index={0} selectedIndex={tabIndex} isConditionalRenderOff>
          Content 1
        </TabContainer>
        <TabContainer data-test-id="tab-container-1" index={1} selectedIndex={tabIndex} isConditionalRenderOff>
          Content 2
        </TabContainer>
        <TabContainer data-test-id="tab-container-2" index={2} selectedIndex={tabIndex} isConditionalRenderOff>
          Content 3
        </TabContainer>
      </div>
    );
  };
  it("Should render out all 3 tabs in the DOM", () => {
    render(<TabsConditionalRenderingOff />);
    expect(screen.getByText("Content 1")).toBeTruthy();
    expect(screen.getByText("Content 2")).toBeTruthy();
    expect(screen.getByText("Content 3")).toBeTruthy();
  });
  it("Should render out with the correct styles", () => {
    const { getByTestId } = render(<TabsConditionalRenderingOff />);
    expect(getByTestId("tab-container-0")).toHaveStyle("display: block");
    expect(getByTestId("tab-container-1")).toHaveStyle("display: none");
    expect(getByTestId("tab-container-2")).toHaveStyle("display: none");
  });
});

describe("Tabs with icons", () => {
  it("changes the style of the tab button when it has an icon", () => {
    const { getAllByTestId } = render(
      <TabList selectedIndex={0} setSelectedIndex={jest.fn} $maxWidth>
        <TabButton icon={<div>some test icon</div>}>Ship to you</TabButton>
        <TabButton icon={<div>another test icon</div>}>Pick up at Store</TabButton>
      </TabList>
    );

    const tabButtons = getAllByTestId("tab-button");
    expect(tabButtons.length).toBe(2);

    tabButtons.forEach(tabButton => {
      expect(tabButton).toHaveStyle(`display: flex`);
      expect(tabButton).toHaveStyle(`justify-content: center`);
      expect(tabButton).toHaveStyle(`align-items: center`);
    });
  });

  it("changes the style of TabLi when it has an icon", () => {
    const { getAllByTestId } = render(
      <TabList selectedIndex={0} setSelectedIndex={jest.fn} $maxWidth>
        <TabButton icon={<div>some test icon</div>}>Ship to you</TabButton>
        <TabButton icon={<div>another test icon</div>}>Pick up at Store</TabButton>
      </TabList>
    );

    const tabLiList = getAllByTestId("tab-li");
    expect(tabLiList.length).toBe(2);

    tabLiList.forEach(tabButton => {
      expect(tabButton).toHaveStyle(`padding-bottom: 0`);
    });
  });

  it("hides TabButton icons when below breakpoint md", () => {
    jest.spyOn(Typography, "Breakpoint").mockReturnValue(false);
    const { getAllByTestId } = render(
      <TabList selectedIndex={0} setSelectedIndex={jest.fn} $maxWidth>
        <TabButton icon={<div>some test icon</div>}>Ship to you</TabButton>
        <TabButton icon={<div>another test icon</div>}>Pick up at Store</TabButton>
      </TabList>
    );

    const tabLiList = getAllByTestId("tab-icon");
    expect(tabLiList.length).toBe(2);

    tabLiList.forEach(tabButton => {
      expect(tabButton).toHaveStyle(`display: none`);
    });
  });
});
