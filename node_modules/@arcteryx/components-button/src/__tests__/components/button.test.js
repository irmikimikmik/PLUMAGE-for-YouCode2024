import React from "react";
import { render, fireEvent } from "@testing-library/react";
import Button from "../../components/button";
import "jest-styled-components";

describe("Button", () => {
  it("renders without crashing", () => {
    const { getByText } = render(<Button>Test Button</Button>);
    expect(getByText("Test Button")).toBeInTheDocument();
  });

  it("calls onClick when clicked", () => {
    const handleClick = jest.fn();
    const { getByText } = render(<Button onClick={handleClick}>Click Me</Button>);
    fireEvent.click(getByText("Click Me"));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it("does not call onClick when disabled", () => {
    const handleClick = jest.fn();
    const { getByText } = render(
      <Button onClick={handleClick} disabled>
        Click Me
      </Button>
    );
    fireEvent.click(getByText("Click Me"));
    expect(handleClick).not.toHaveBeenCalled();
  });

  it("shows loading icon when isWaiting is true", () => {
    const { getByTestId } = render(<Button isWaiting>Click Me</Button>);
    expect(getByTestId("loading-icon")).toBeInTheDocument();
  });

  it("renders as a link when href is provided", () => {
    const { getByText } = render(<Button href="https://arcteryx.com">Link</Button>);
    expect(getByText("Link").closest("a")).toHaveAttribute("href", "https://arcteryx.com");
  });

  it("renders with correct styles for each context", () => {
    const contexts = [
      "Standard",
      "Subtle",
      "Secondary-cta",
      "Secure-checkout",
      "Add-To-Cart",
      "Find-In-Store",
      "Email",
      "Inverted"
    ];
    contexts.forEach(context => {
      const { getByText, rerender } = render(<Button context={context}>{context}</Button>);
      expect(getByText(context)).toHaveStyle(`color: var(--colour-${context.toLowerCase()})`);
    });
  });

  it('renders IconButtonRight when iconPosition is "right"', () => {
    const IconButtonRight = <div>Right Icon</div>;
    const { getByText } = render(
      <Button IconButtonRight={IconButtonRight} iconPosition="right">
        Test
      </Button>
    );
    expect(getByText("Right Icon")).toBeInTheDocument();
  });
  it("does not render IconButtonLeft when isWaiting is true", () => {
    const IconButtonLeft = <div>Left Icon</div>;
    const { queryByText, getByTestId } = render(
      <Button isWaiting={true} IconButtonLeft={IconButtonLeft}>
        Test
      </Button>
    );
    expect(queryByText("Left Icon")).not.toBeInTheDocument();
    expect(getByTestId("loading-icon")).toBeInTheDocument();
  });

  it("renders IconButtonLeft when isWaiting is false", () => {
    const IconButtonLeft = <div>Left Icon</div>;
    const { queryByText, queryByTestId } = render(
      <Button isWaiting={false} IconButtonLeft={IconButtonLeft}>
        Test
      </Button>
    );
    expect(queryByText("Left Icon")).toBeInTheDocument();
    expect(queryByTestId("loading-icon")).not.toBeInTheDocument();
  });
});
