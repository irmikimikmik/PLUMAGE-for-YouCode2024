import React from "react";
import styled, { css } from "styled-components";
import PropTypes from "prop-types";
import cx from "classnames";
import LoadingIcon from "./LoadingIcon";
import { ADDTOCART, EMAIL, SECURE, SUBTLE, FINDINSTORE, SECONDARY, INVERTED, STANDARD } from "../constants";
import { widthValue } from "../helpers";

const ButtonWrapper = styled.div`
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: ${props => widthValue(props)};
  max-width: ${props => (props.context === ADDTOCART && "400px") || (props.context === SECURE && "100%")};
  height: 3rem;
  padding: 0 1rem;
  margin: 0;
  color: ${props =>
    [INVERTED, SUBTLE, FINDINSTORE, SECONDARY].includes(props.context) ? "var(--colour-black)" : "var(--colour-white)"};
  text-decoration: none;
  border-radius: 0;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  border: ${props =>
    [SUBTLE, FINDINSTORE].includes(props.context) ? "1px solid var(--colour-black)" : "1px solid transparent"};
  font-size: 1rem;
  line-height: 1.1rem;
  font-family: var(--font-urw-din);
  font-weight: 400;
  text-transform: ${props => props.context === STANDARD || !props.href ? "uppercase" : "none"};
  word-break: keep-all;
  cursor: pointer;
  background-color: ${props =>
    [INVERTED, SUBTLE, FINDINSTORE, SECONDARY].includes(props.context) ? "var(--colour-white)" : "var(--colour-black)"};

  &:hover,
  &:active {
    border: ${props => (props.context === SECONDARY ? "1px solid var(--colour-black)" : "1px solid transparent")};
    background-image: linear-gradient(var(--colour-black), var(--background-gradient));
    transition: background-color 400ms ease-in;
    text-decoration: none;
    color: ${props => (props.context === SECONDARY ? "var(--colour-black)" : "var(--colour-white)")};
  }

  &.waiting,
  &.is-waiting {
    color: ${props =>
      [SUBTLE, FINDINSTORE, SECONDARY].includes(props.context) ? "var(--colour-white)" : "var(--colour-black)"};
    pointer-events: none;

    &::before,
    &::after {
      display: none;
    }
  }


  ${props =>
    props.disabled &&
    css`
      &:disabled,
      &.disabled {
        color: ${() => (props.context === SECONDARY ? "var(--colour-grey-inactive)" : "var(--colour-white)")};
        cursor: not-allowed;
        background-color: ${() =>
          props.context === SECONDARY ? "var(--colour-grey-background)" : "var(--colour-grey-inactive)"};
        border: none;
        &:hover {
          /* border: 1px solid transparent; */
          background-image: none;
        }
      }
    `};

  ${props =>
    props.context === SECURE &&
    css`
      &::after {
        content: url(//images.arcteryx.com/foundation-ui/svgs/Secure_Icon_White.svg);
        width: 10px;
        height: 10px;
        margin-left: 10px;
        display: inline-block;
      }
    `};

  /* Inverted, Secondary-cta buttons */
  &.button--Secondary-cta {
    border: ${props => (Boolean(props.href) ? "none" : "1px solid transparent")};
    text-decoration-line: ${props => (Boolean(props.href) ? "underline" : "none")};
    &:hover,
    &:active,
    &:focus {
      background: var(--colour-white);
      color: var(--colour-black);
      border: ${props => (Boolean(props.href) ? "none" : "1px solid var(--colour-black)")};
      font-weight: ${props => (Boolean(props.href) ? "600" : "400")};
      cursor: pointer;
      text-decoration-line: ${props => (Boolean(props.href) ? "underline" : "none")};
      
    }
    &.disabled {
      border: none;
      color: var(--colour-grey-inactive);
      cursor: not-allowed;
      background-color: ${props => (Boolean(props.href) ? "transparent" : "var(--colour-grey-background)")};
      font-weight: 400;
      text-decoration-line: ${props => (Boolean(props.href) ? "underline" : "none")};
    }
  }
  ${props =>
    props.context === FINDINSTORE &&
    css`
      display: flex;
      align-items: center;
      justify-content: center;
      width: 400px;
      max-width: 100%;
      line-height: 16px;
      text-transform: none;
      &::before {
        content: url(//images.arcteryx.com/foundation-ui/svgs/Pin.svg);
        width: 16px;
        height: 16px;
        margin-right: 5px;
        display: inline-block;
      }
      &:hover {
        color: var(--colour-black);
        border: 1px solid var(--colour-black);
        background-image: none;
        background-color: var(--colour-white);
      }
    `};

  ${props =>
    props.context === EMAIL &&
    css`
      display: inline-flex;
      justify-content: center;
      align-items: center;
      &::before {
        content: url(//images.arcteryx.com/foundation-ui/svgs/Email_White.svg);
        width: 22px;
        margin-right: 5px;
        display: inline-block;
      }
    `};

  ${props =>
    props.context === ADDTOCART &&
    css`
      display: inline-flex;
      justify-content: center;
      align-items: center;
      &::before {
        content: url(//images.arcteryx.com/foundation-ui/svgs/Cart_Icon_White.svg);
        width: 22px;
        margin-right: 5px;
        display: inline-block;
      }
    `};
`;

const StyledIconWrapper = styled.span`
  margin-left: 5px;
  margin-right: 5px;
`;

const IconButton = ({ icon }) => {
  return <StyledIconWrapper>{icon}</StyledIconWrapper>;
};

const Button = ({
  market,
  context,
  type,
  size,
  IconButtonLeft,
  IconButtonRight,
  disabled,
  isWaiting,
  onClick,
  className,
  id,
  style,
  children,
  href = "",
  width,
  ...otherProps
}) => {
  const baseClass = "button";
  const rootClass = cx(baseClass, className, {
    [`${baseClass}--${market}`]: market,
    [`${baseClass}--${context}`]: context,
    [`${baseClass}--${size}`]: size,
    disabled,
    waiting: isWaiting,
    "is-waiting": isWaiting,
  });

  const isAnchorElement = Boolean(href);
  const as = isAnchorElement ? "a" : "button";
  const hasIconButtonLeft = Boolean(IconButtonLeft);
  const hasIconButtonRight = Boolean(IconButtonRight);

  return (
    <ButtonWrapper
      as={as}
      id={id}
      href={isAnchorElement ? href : undefined}
      className={rootClass}
      type={isAnchorElement ? undefined : type}
      style={style}
      onClick={onClick}
      size={size}
      market={market}
      context={context}
      disabled={disabled}
      width={width}
      {...otherProps}
    >
      {isWaiting && <LoadingIcon data-testid="loading-icon" />}
      {!isWaiting && hasIconButtonLeft && <IconButton icon={IconButtonLeft} />}
      <span>{children}</span>
      {!isWaiting && hasIconButtonRight && <IconButton icon={IconButtonRight} />}
    </ButtonWrapper>
  );
};

Button.displayName = "Button";

Button.defaultProps = {
  context: "Standard",
  market: "Outdoor",
  type: "button",
  disabled: false,
  isWaiting: false,
  onClick: null,
  style: {},
};

Button.propTypes = {
  context: PropTypes.oneOf([
    "Standard",
    "Inverted",
    "Subtle",
    "Secondary-cta",
    "Secure-checkout",
    "Add-To-Cart",
    "Find-In-Store",
    "Email",
  ]),
  type: PropTypes.string,
  market: PropTypes.oneOf(["Outdoor", "Leaf", "Veilance"]),
  id: PropTypes.string,
  size: PropTypes.oneOf(["xs", "sm", "md", "lg"]),
  disabled: PropTypes.bool,
  isWaiting: PropTypes.bool,
  onClick: PropTypes.func,
  className: PropTypes.string,
  style: PropTypes.object,
  children: PropTypes.node,
  IconButtonLeft: PropTypes.node,
  IconButtonRight: PropTypes.node,
};

export default Button;
