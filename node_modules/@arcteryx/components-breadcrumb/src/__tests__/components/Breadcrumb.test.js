import React from "react";
import { render } from "@testing-library/react";
import Breadcrumb from "../../components/Breadcrumb";
import * as BreadcrumbImport from "../../components/Breadcrumb";

let mockData = {};

describe("Breadcrumb Component", () => {
  beforeEach(() => {
    jest.spyOn(BreadcrumbImport, "isIframe").mockReturnValue(false);
  });

  it("Renders Standard correctly", () => {
    mockData = {
      breadcrumbs: [
        { label: "Arc'teryx", url: "https://arcteryx.com/ca/en" },
        { label: "Women's", url: "https://arcteryx.com/ca/en/c/womens" },
        {
          label: "Shell Jackets",
          url: "https://arcteryx.com/ca/en/c/womens/shell-jackets",
        },
        {
          label: "Softshell",
          url: "https://arcteryx.com/ca/en/c/womens/shell-jackets/sub-cat=softshell",
        },
      ],
      tag: "div",
    };
    const { container } = render(
      <Breadcrumb
        breadcrumbs={mockData.breadcrumbs}
        colour={mockData.colour}
        theme={mockData.theme}
        tag={mockData.tag}
      />
    );

    expect(container.firstChild).toBeInTheDocument();
    expect(container.querySelector("div")).toHaveStyle("width: 100%");
    expect(container.querySelector("a")).toHaveAttribute("href", "https://arcteryx.com/ca/en");
  });

  it("Renders correctly for when theme set to 'inline' (PDP test)", () => {
    mockData = {
      breadcrumbs: [
        { label: "Arc'teryx", url: "https://arcteryx.com/ca/en" },
        {
          label: "Men's",
          url: "https://arcteryx.com/ca/en/c/mens",
        },
        {
          label: "Alpha SV Jacket",
          url: "https://arcteryx.com/ca/en/shop/mens/alpha-sv-jacket",
        },
      ],
      theme: "inline",
      tag: "div",
    };
    const { container } = render(
      <Breadcrumb
        breadcrumbs={mockData.breadcrumbs}
        colour={mockData.colour}
        theme={mockData.theme}
        tag={mockData.tag}
      />
    );

    expect(container.firstChild).toBeInTheDocument();
    expect(container.querySelector("div")).toHaveStyle("width: 100%");
  });

  it("Renders an empty string when in iframe", () => {
    jest.spyOn(BreadcrumbImport, "isIframe").mockReturnValue(true);
    const { container } = render(<Breadcrumb path="empty" />);
    expect(container.textContent).toBe("");
  });

  it("Renders breadcrumb when in iframe and overrideHideInIframe is true", () => {
    jest.spyOn(BreadcrumbImport, "isIframe").mockReturnValue(true);
    mockData = {
      breadcrumbs: [
        { label: "Veilance", url: "https://veilance.com/ca/en" },
        {
          label: "Spring Summer Collection",
          url: "https://veilance.com/ca/en/c/spring-summer-collection",
        },
      ],
      market: "urban",
    };
    const { container } = render(<Breadcrumb {...mockData} path="empty" overrideHideInIframe />);
    expect(container.firstChild).toBeInTheDocument();
  });

  it("Renders correctly in Storybook", () => {
    mockData = {
      breadcrumbs: [
        { label: "Example", url: "/example" },
        { label: "Subpage", url: "/example/subpage" },
      ],
      isStorybook: true,
    };
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });

  it("Renders correctly with breadcrumbs containing no URL", () => {
    mockData = {
      breadcrumbs: [
        { label: "Home", url: "/home" },
        { label: "Page without URL", url: "" },
      ],
    };
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });

  it("Renders correctly with a custom HTML tag", () => {
    mockData = {
      breadcrumbs: [
        { label: "Custom", url: "/custom" },
        { label: "Page", url: "/custom/page" },
      ],
      tag: "section",
    };
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });

  it("Renders correctly with a different breadcrumb color", () => {
    mockData = {
      breadcrumbs: [
        { label: "Color", url: "/color" },
        { label: "Page", url: "/color/page" },
      ],
      colour: "#FF0000",
    };
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });

  it("Renders correctly with long breadcrumb labels", () => {
    mockData = {
      breadcrumbs: [
        { label: "Long", url: "/long" },
        { label: "Page with a very long label that exceeds the normal width", url: "/long/page" },
      ],
    };
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });

  it("Renders correctly in mobile view", () => {
    mockData = {
      breadcrumbs: [
        { label: "Mobile", url: "/mobile" },
        { label: "Page", url: "/mobile/page" },
      ],
    };
    global.innerWidth = 500;
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });

  it("Renders correctly when theme is falsy", () => {
    mockData = {
      breadcrumbs: [
        { label: "Example", url: "/example" },
        { label: "Subpage", url: "/example/subpage" },
      ],
      theme: null, // Set to a falsy value
    };
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });

  it("Renders correctly when there's only one breadcrumb", () => {
    mockData = {
      breadcrumbs: [{ label: "Single", url: "/single" }],
    };
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });
  it("Renders correctly when in iframe, but overrideHideInIframe is true", () => {
    jest.spyOn(BreadcrumbImport, "isIframe").mockReturnValue(true);
    mockData = {
      breadcrumbs: [
        { label: "Example", url: "/example" },
        { label: "Subpage", url: "/example/subpage" },
      ],
      overrideHideInIframe: true,
    };
    const { container } = render(<Breadcrumb {...mockData} />);
    expect(container.firstChild).toBeInTheDocument();
  });
});
