import React from "react";
import styled from "styled-components";
import PropTypes from "prop-types";
import { H1, Breakpoint } from "@arcteryx/components-typography";

const BreadcrumbWrapper = styled.div`
  display: inline-block;
  text-align: left;
  clear: both;
  text-transform: capitalize;
  width: 100%;
  padding: 0;
  max-width: 95.333rem;
  margin: var(--space-green) auto;
  background: transparent;
  @media screen and (min-width: 931px) {
    text-align: left;
  }
`;

const BreadcrumbListStyled = styled.h1`
  font-weight: normal;
  font-size: 1rem;
  line-height: 1.5rem;
`;

const BreadcrumbList = ({ tag, children, ...props }) => (
  <BreadcrumbListStyled {...props} as={tag}>
    {children}
  </BreadcrumbListStyled>
);
const BreadcrumbListItem = styled.span`
  display: inline;
  text-transform: capitalize;

  font-size: 1rem;
  line-height: 1rem;

  &:first-of-type {
    span {
      padding-left: 0;
    }
  }

  &:nth-last-child(2) {
    a:after {
      content: "\\203A";
      display: inline-block;
    }
  }

  span,
  a:after {
    color: ${props => (props.colour ? `${props.colour}` : "#fff")};
  }

  &:last-of-type {
    display: block;

    .inline & {
      display: inline;
    }

    span,
    a span {
      display: inline-block;
      width: auto;
      text-decoration: none;
      padding: 0.5rem 0 0;
      text-transform: uppercase;
      font-family: urw-din, sans-serif;
      color: ${props => (props.colour ? `${props.colour}` : "#fff")};
      font-size: 1.6rem;
      line-height: 1.466rem;
      .inline & {
        display: inline-block;
        text-transform: capitalize;
        font-size: 1rem;
        padding: 0 0 0 0.5rem;
      }
      .inline & {
        @media (max-width: 930px) {
          display: none;
        }
      }
    }

    a:after {
      content: none;
    }
  }
`;

const BreadcrumbListItemSpan = styled.span`
  text-transform: capitalize;
  text-shadow: none;
  font-style: normal;
  padding: 0 0.5rem;
  text-decoration: underline;
  font-family: "urw-din", sans-serif;
  font-size: 1rem;
  line-height: 1.4rem;
`;

const BreadcrumbListLink = styled.a`
  &:after {
    content: "\\203A";
    display: inline-block;
  }
`;

const BreadcrumbLabel = styled(H1)`
  text-decoration: none;
  margin-bottom: 0;
  color: ${props => (props.colour ? `${props.colour}` : "#fff")};
  font-weight: 700;
  line-height: 2.4rem;
  font-size: 2rem;
  white-space: nowrap;
  ${Breakpoint("md")`
    font-size: 2.5rem;
    line-height: 2.9rem;
    white-space: pre-wrap;
  `}
`;

export const isIframe = () => {
  if (typeof window === "undefined") {
    return false;
  }
  return window.self !== window.top;
};

const Breadcrumb = props => {
  if ((isIframe() && !props.overrideHideInIframe && !props.isStorybook) || !props.breadcrumbs) {
    return "";
  }

  return (
    <BreadcrumbWrapper id="breadcrumb" itemScope itemType="http://schema.org/WebPage" className={props.theme}>
      <nav aria-label="breadcrumbs">
        <p id="breadcrumbLabel" style={{ display: "none" }}>
          You are here:
        </p>
        <BreadcrumbList
          tag={props.tag}
          aria-labelledby="breadcrumbLabel"
          itemScope
          itemType="http://schema.org/BreadcrumbList"
        >
          {props.breadcrumbs.map((breadcrumb, index) => {
            const isLastBreadcrumb = props.breadcrumbs.length - 1 === index;

            let breadcrumbLabel;

            if (isLastBreadcrumb) {
              breadcrumbLabel = (
                <BreadcrumbListItemSpan itemProp="name">
                  {props.theme?.includes("inline") ? (
                    breadcrumb.label
                  ) : (
                    <BreadcrumbLabel colour={props.colour}>{breadcrumb.label}</BreadcrumbLabel>
                  )}
                </BreadcrumbListItemSpan>
              );
            } else {
              breadcrumbLabel = (
                <BreadcrumbListLink itemProp="item" href={breadcrumb.url}>
                  <BreadcrumbListItemSpan itemProp="name">{breadcrumb.label}</BreadcrumbListItemSpan>
                </BreadcrumbListLink>
              );
            }

            return (
              <BreadcrumbListItem
                itemProp="itemListElement"
                itemScope
                itemType="http://schema.org/ListItem"
                key={index}
                colour={props.colour}
              >
                {breadcrumbLabel}
                <meta itemProp="position" content="@itempropPosition" />
              </BreadcrumbListItem>
            );
          })}
        </BreadcrumbList>
      </nav>
    </BreadcrumbWrapper>
  );
};

Breadcrumb.defaultProps = {
  colour: "#000",
  tag: "h1",
};

BreadcrumbListItem.defaultProps = {
  colour: Breadcrumb.defaultProps.colour,
  tag: Breadcrumb.defaultProps.tag,
};

export default Breadcrumb;

Breadcrumb.propTypes = {
  breadcrumbs: PropTypes.arrayOf(
    PropTypes.shape({
      label: PropTypes.string.isRequired,
      url: PropTypes.string.isRequired,
    })
  ).isRequired,
  colour: PropTypes.string,
  className: PropTypes.string,
  tag: PropTypes.string,
  theme: PropTypes.string,
  overrideHideInIframe: PropTypes.bool,
  isStorybook: PropTypes.bool, // required to show Breadcrumbs in Storybook since it's loaded in an iFrame
};
