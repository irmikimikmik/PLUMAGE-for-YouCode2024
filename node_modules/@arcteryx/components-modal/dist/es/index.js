import React, { useRef, useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import styled, { keyframes, css } from 'styled-components';
import { Breakpoint, P } from '@arcteryx/components-typography';
import { useSwipeable } from 'react-swipeable';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

const fadeIn = keyframes`
  0% {
    opacity: 0;
    z-index: -1;
  }
  100% {
    opacity: 1;
    z-index: 9999;
  }
`;
const fadeAnimation = css`
  0.3s ${fadeIn} ease-out;
`;
const scaleIn = keyframes`
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
`;
const scaleAnimation = css`
  0.3s 0.2s ${scaleIn} forwards
`;
const slideUp = keyframes`
  0% {
    opacity: 1;
    z-index: -1;
    transform: scale(1) translateY(100%);
  }

  100% {
    opacity: 1;
    z-index: 9999;
    transform: scale(1) translateY(0);
  }
`;
const slideUpAnimation = css`
  0.3s 0.2s ${slideUp} forwards
`;
const ModalOverlay = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  cursor: pointer;
  background-color: rgba(43, 43, 43, 0.8);
  z-index: 9999;
  opacity: 1;
  animation: ${fadeAnimation};

  ${Breakpoint("lg")`
    padding: 2rem;
  `}
`;
const ModalWrapper = styled.div`
  display: flex;
  align-items: flex-start;
  width: 100%;
  height: 100%;
  transform: scale(1) translateY(100%);
  animation: ${slideUpAnimation};

  ${Breakpoint("lg")`
    width: ${props => props.modalWidth ? `${props.modalWidth}px` : "90vw"};
    align-items: center;
    transform: scale(0);
    animation: ${scaleAnimation};
  `}
`;
const ModalUI = styled.div`
  display: flex;
  flex-flow: row wrap;
  align-items: flex-end;
  justify-content: center;
  width: 100%;
  height: 100%;

  ${Breakpoint("lg")`
    height: auto;
    flex-flow: row nowrap;
    align-items: flex-start;
  `}

  .modal--video & {
    flex-flow: column nowrap;
    justify-content: center;

    ${Breakpoint("lg")`
      align-items: flex-start;
      flex-flow: row wrap;
    `}
  }
`;
const ModalContent = styled.div`
  position: relative;
  width: 100%;
  max-width: 75rem;
  height: 100%;
  max-height: ${props => props.contentMaxHeightMobile ? `${props.contentMaxHeightMobile}vh` : "80vh"};
  padding: 1.25rem;
  overflow: auto;
  cursor: default;
  display: flex;
  flex-flow: column wrap;
  order: 2;
  align-items: flex-start;
  background-color: white;
  transition: all 0.3s;

  ${Breakpoint("xs")`
      overflow: ${props => props.preventMobileOverflow ? "hidden" : "auto"};
  `}

  &:before {
    content: "";
    display: ${props => props.closable === true ? "block" : "none"};
    width: 4.5rem;
    height: 0.3rem;
    position: absolute;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    background-color: black;

    ${Breakpoint("lg")`
      display: none;
    `}
  }

  &:focus {
    outline: none;
  }

  &:focus-visible {
    outline: none !important;
  }

  .modal--video & {
    height: auto;
    padding: 0 1rem;
    align-items: center;
    background-color: transparent;
    &:before {
      display: none;
    }

    iframe {
      background-color: black;
    }
  }

  .modal--iframe & {
    padding: ${props => props.closable === true ? "2rem 0" : "0"};
    height: 80vh;
  }

  iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: ${props => props.contentHeight ? `${props.contentHeight}px` : "100%"};
    margin: auto;
    border: 0;
    overflow: auto;
  }

  ${Breakpoint("lg")`
    order: 1;
    width: ${props => props.modalWidth ? `${props.modalWidth}px;` : "80vw"};
    max-width: ${props => props.modalWidth ? `${props.modalWidth}px;` : "75rem"};
    max-height: ${props => props.contentMaxHeight ? `${props.contentMaxHeight}vh` : "80vh"};
    background-color: white;

    .modal--video & {
      padding: 0;
      max-width: calc(100% - 7rem);
      max-height: 72rem;
      background-color: black;
    }

    .modal--iframe & {
      padding: 0;
    }
  `}
`;
const ModalClose = styled.button`
  position: relative;
  display: none;
  width: 3rem;
  min-width: 3rem;
  height: 3rem;
  min-height: 3rem;
  color: white;
  border: 0;
  padding: 0;
  order: 1;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 3rem;
  font-weight: 400;
  font-style: normal;
  font-family: var(--font-urw-din);
  margin: 0 0 1rem auto;
  background-color: black;
  overflow: hidden;

  ${Breakpoint("lg")`
    display: flex;
    order: 2;
    margin: 0 0 0 2rem;
  `}

  span {
    margin-top: -0.1rem;
    line-height: 3rem;
  }

  .modal--video & {
    display: flex;
    margin-right: 1rem;

    ${Breakpoint("lg")`
      margin-right: 0;
    `}
  }
`;
const ModalBox = styled.div`
  width: 100%;
  position: relative;

  .modal--video & {
    height: 0;
    padding-top: 56.25%;
  }

  .modal--iframe & {
    height: 100%;
  }
`;
function Modal(_ref) {
  let {
    children,
    toggleModal,
    modalCaller,
    modalIsShown,
    className = "",
    video = false,
    iframe = false,
    contentHeight,
    contentMaxHeightMobile,
    contentMaxHeight,
    modalWidth,
    isClosable = true,
    onVideoPlaybackEnded
  } = _ref;
  let videoPlayer;
  const contentRef = useRef();
  const handleClickOutside = e => {
    if (isClosable && modalIsShown === true && e.target.classList.length > 0 && e.target.classList.contains("modal--close")) {
      toggleModal(false);
    }
  };
  const detectEscapeKeyPress = e => {
    if (isClosable && modalIsShown === true && e.keyCode === 27) {
      toggleModal(false);
    }
  };
  const handleFocus = () => {
    const elementToFocus = modalIsShown ? document.querySelector(".modal__content") : modalCaller;
    if (elementToFocus) {
      elementToFocus.focus();
    }
  };
  const onYTPlayerStateChange = event => {
    // event 0 is video ended
    if (event.data === 0) {
      const {
        title: videoTitle
      } = videoPlayer.getVideoData();
      onVideoPlaybackEnded(videoTitle);
    }
  };
  const extractYoutubeId = videoUrl => {
    const parts = videoUrl === null || videoUrl === void 0 ? void 0 : videoUrl.split("/");
    if (parts !== null && parts !== void 0 && parts.length) {
      const videoSlug = parts[parts.length - 1].split("?");
      if (videoSlug.length) {
        return videoSlug[0];
      }
    }
    return false;
  };
  const loadYTVideo = () => {
    const playerWrapper = document.getElementById("yt-player");
    const videoSlug = extractYoutubeId(playerWrapper === null || playerWrapper === void 0 ? void 0 : playerWrapper.getAttribute("data-video-url"));
    if (videoSlug) {
      videoPlayer = new window.YT.Player("yt-player", {
        videoId: videoSlug,
        playerVars: {
          autoplay: 1,
          controls: 0,
          mute: 1
        },
        events: {
          onStateChange: onYTPlayerStateChange
        }
      });
    }
  };

  // Modals that pass the 'video' prop and content like this...
  // <div id="yt-player" data-video-url="//youtube.com/embed/XXXX"></div>
  // will use the YouTube Embed API so we can track video completions
  const handleVideoEmbed = () => {
    if (video && modalIsShown) {
      if (!window.YT) {
        const tag = document.createElement("script");
        tag.src = "https://www.youtube.com/iframe_api";
        window.onYouTubeIframeAPIReady = loadYTVideo;
        const firstScriptTag = document.getElementsByTagName("script")[0];
        if (firstScriptTag) {
          firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
      } else {
        loadYTVideo();
      }
    }
  };
  useEffect(() => {
    const containerOverflow = modalIsShown ? "hidden" : "visible";
    document.querySelector("body").style.overflow = containerOverflow;
    handleFocus();
    handleVideoEmbed();
    document.addEventListener("click", handleClickOutside, false);
    document.addEventListener("keydown", detectEscapeKeyPress, false);
    return () => {
      document.querySelector("body").style.overflow = "visible";
      document.removeEventListener("click", handleClickOutside, false);
      document.removeEventListener("keydown", detectEscapeKeyPress, false);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [modalIsShown]);
  const finishSwipingUp = () => {
    contentRef.current.style.transform = `translateY(0)`;
  };
  const finishSwipingDown = () => {
    const swipeIsScroll = contentRef.current.scrollTop > 0;
    if (isClosable && !swipeIsScroll) {
      contentRef.current.style.transform = `translateY(100%)`;
      setTimeout(() => {
        toggleModal(false);
      }, 300);
    }
  };
  const startSwipingUp = deltaY => {
    contentRef.current.style.transform = `translateY(-${deltaY}px)`;
  };
  const startSwipingDown = deltaY => {
    const swipeIsScroll = contentRef.current.scrollTop > 0;
    if (!swipeIsScroll) {
      contentRef.current.style.transform = `translateY(${deltaY}px)`;
    }
  };
  const swipeHandlers = useSwipeable({
    onSwiping: _ref2 => {
      let {
        deltaY,
        dir
      } = _ref2;
      if (dir === "Down") {
        startSwipingDown(deltaY);
      }
      if (dir === "Up") {
        startSwipingUp(deltaY);
      }
    },
    onSwiped: _ref3 => {
      let {
        dir
      } = _ref3;
      if (dir === "Down") {
        finishSwipingDown();
      }
      if (dir === "Up") {
        finishSwipingUp();
      }
    },
    preventDefaultTouchmoveEvent: false,
    delta: 10
  });
  return modalIsShown ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(ModalOverlay, {
    className: `modal__overlay modal--close ${video ? "modal--video" : ""} ${iframe ? "modal--iframe" : ""} ${className}`
  }, /*#__PURE__*/React.createElement(ModalWrapper, {
    role: "dialog",
    className: "modal__wrapper modal--close"
  }, /*#__PURE__*/React.createElement(ModalUI, _extends({
    className: `modal__ui modal--close`
  }, swipeHandlers), /*#__PURE__*/React.createElement(ModalContent, {
    className: `modal__content`,
    tabIndex: 0,
    contentHeight: contentHeight,
    modalWidth: modalWidth,
    contentMaxHeightMobile: contentMaxHeightMobile,
    contentMaxHeight: contentMaxHeight,
    ref: contentRef,
    closable: isClosable
  }, /*#__PURE__*/React.createElement(ModalBox, null, children)), isClosable && /*#__PURE__*/React.createElement(ModalClose, {
    className: `modal__close qa--modal-close modal--close`
  }, /*#__PURE__*/React.createElement("span", {
    className: "modal--close"
  }, "\xD7"))))), document.body) : null;
}
Modal.propTypes = {
  modalIsShown: PropTypes.bool.isRequired,
  toggleModal: PropTypes.func.isRequired,
  video: PropTypes.bool,
  iframe: PropTypes.bool,
  contentHeight: PropTypes.number,
  contentMaxHeightMobile: PropTypes.number,
  contentMaxHeight: PropTypes.number,
  modalWidth: PropTypes.number,
  isClosable: PropTypes.bool,
  onVideoPlaybackEnded: PropTypes.func,
  preventMobileOverflow: PropTypes.bool
};

const InfoIconWrapper = styled.div`
  display: flex;
  flex-flow: column no-wrap;
  justify-content: ${props => props.justify || "flex-start"};

  p {
    display: inline-block;
    margin: 0 5px 0 0;
  }
`;
const InfoIcon = styled.span`
  content: url("https://images-dynamic-arcteryx.imgix.net/foundation-ui/svgs/Information_Icon.svg");
  height: 15px;
  width: 15px;
  display: inline-block;
  cursor: pointer;
  margin-top: 4px;
`;

/*
  * This component will display an icon and when clicked will open a modal with the contents from the provided url
  *
  * @param {string} labelText - The text displayed on the left side of the icon
  * @param {string} modalUrl - The url of the content to be displayed in the modal
  * @param {string} justify - Set the value for 'flex-justify. Default: "flex-start"
**/
const InfoIconModal = _ref => {
  let {
    labelText,
    modalUrl,
    justify
  } = _ref;
  const [modalIsShown, toggleModal] = useState(false);
  const [modalCaller, setModalCaller] = useState();
  const callModal = e => {
    e.preventDefault();
    setModalCaller(e.currentTarget);
    toggleModal(!modalIsShown);
  };
  if (modalUrl) {
    return /*#__PURE__*/React.createElement(InfoIconWrapper, {
      justify: justify
    }, labelText ? /*#__PURE__*/React.createElement(P, null, labelText) : null, /*#__PURE__*/React.createElement(InfoIcon, {
      onClick: callModal,
      className: "qa-info-icon-modal"
    }), /*#__PURE__*/React.createElement(Modal, {
      modalIsShown: modalIsShown,
      toggleModal: toggleModal,
      modalCaller: modalCaller,
      iframe: true
    }, /*#__PURE__*/React.createElement("iframe", {
      src: modalUrl
    })));
  }
  return null;
};
InfoIconModal.prototype = {
  modalUrl: PropTypes.string.isRequired
};

export { InfoIconModal, Modal };
//# sourceMappingURL=index.js.map
