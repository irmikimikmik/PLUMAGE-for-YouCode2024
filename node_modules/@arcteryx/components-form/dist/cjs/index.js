'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var PropTypes = require('prop-types');
var reactDropzone = require('react-dropzone');
var styled = require('styled-components');
var componentsTypography = require('@arcteryx/components-typography');
var reactI18next = require('react-i18next');
var libphonenumberJs = require('libphonenumber-js');
var IMask = require('imask');
var reactGoogleAutocomplete = require('react-google-autocomplete');
var componentsForm = require('@arcteryx/components-form');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var IMask__default = /*#__PURE__*/_interopDefaultLegacy(IMask);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

const ErrorText = styled__default["default"].span`
  font-size: 14px;
  line-height: 17px;
  color: var(--warning-red);
  padding: 2px;
  font-style: italic;
`;
const Message = styled__default["default"].ul`
  font-size: 14px;
  margin: 0 auto;
  ${componentsTypography.Breakpoint("lg")`
  column-count: 2;
  padding: var(--space-blue) var(--space-green) !important;
  `}
  ${componentsTypography.Breakpoint("xs")`
  column-count: 1;
  padding: var(--space-blue) var(--space-blue) !important;
  `}
  column-gap: var(--space-blue);
  list-style: none !important;
  li {
    white-space: nowrap;
    &.input-validation-error-message {
      color: var(--warning-red);
      font-style: italic;
      &:before {
        color: var(--warning-red);
      }
    }
    &.input-validation-valid {
      color: var(--colour-copy);
      font-style: normal;
      &:before {
        content: url(//images-dynamic-arcteryx.imgix.net/foundation-ui/svgs/Success_Icon.svg);
        width: 1rem;
        height: 1rem;
        display: inline-block;
      }
    }
    :before {
      content: "•";
      color: var(--colour-copy);
      padding: 0 0.5rem 0 0;
    }
  }
`;
const FormInput = styled__default["default"].div`
  display: flex;
  align-items: center;
  width: 100%;
  position: relative;
  transition: all 0.4s ease-in-out;
  &:after {
    content: none;
    display: inline-block;
    width: 17px;
    height: 17px;
    bottom: 15px;
    right: 15px;
    position: absolute;
  }
  &.input-validation-error:after {
    content: ${props => !props.isSelect && "url(//images-dynamic-arcteryx.imgix.net/foundation-ui/svgs/Warning_Icon.svg)"};
  }
  &.input-validation-valid:after {
    content: ${props => !props.isSelect && "url(//images-dynamic-arcteryx.imgix.net/foundation-ui/svgs/Success_Icon.svg)"};
  }
`;
const RequiredSpan$1 = styled__default["default"].span`
  color: var(--warning-red);
  font-size: 14px;
  line-height: 1;
  margin: 0;
`;
const handleMarginType = props => {
  if (props.isRelatedToPrevious && props.isCheckbox) {
    return "-7.5px 0 30px 0";
  } else if (!props.isRelatedToPrevious && props.isCheckbox) {
    return "30px 0";
  } else if (props.isMenu && props.isSelect || props.isPasswordStrength) {
    return "0";
  }
  return "0 0 22.5px 0";
};
const FormRow = styled__default["default"].div`
  position: relative;
  display: flex;
  flex-direction: column;
  margin: ${props => handleMarginType(props)};
  width: 100%;
  padding: 0;
`;
const InputField = styled__default["default"].input`
  -webkit-appearance: none;
  border-radius: 0;
  font-family: var(--font-urw-din);
  border: 1px solid var(--dark-grey);
  width: 100%;
  height: 45px;
  background: var(--white);
  padding: 0 45px 0 15px;
  color: var(--black);
  font-size: 16px;
  box-shadow: none;
  .input-validation-valid & {
    border: 1px solid var(--success-green);
  }
  .input-validation-error & {
    border: 1px solid var(--warning-red);
  }
  &:focus {
    outline: none;
    border: 1px solid var(--focus-blue);
  }
  &:read-only,
  &:disabled {
    border: 1px solid var(--medium-grey);
    color: var(--medium-grey);
    cursor: not-allowed;
    background: var(--background-grey);
  }
`;
const TextAreaField = styled__default["default"].textarea`
  font-family: var(--font-urw-din);
  border: 1px solid var(--dark-grey);
  width: 100%;
  max-width: 100%;
  height: auto;
  background: var(--white);
  padding: 1rem;
  color: var(--black);
  font-size: 16px;
  box-shadow: none;
  .input-validation-valid & {
    border: 1px solid var(--success-green);
  }
  .input-validation-error & {
    border: 1px solid var(--warning-red);
  }
  &:focus {
    outline: none;
    border: 1px solid var(--focus-blue);
  }
  &:disabled {
    border: 1px solid var(--inactive-state-grey);
    cursor: not-allowed;
  }
`;
const StyledSelect = styled__default["default"].select`
  color: ${props => props.$isGray ? "gray" : "default"};
  font-family: var(--font-urw-din);
  font-size: 16px;
  padding: 0 45px 0 15px;
  position: relative;
  display: flex;
  margin: 0;
  width: 100%;
  transition: all 0.4s ease-in-out;
  height: 45px;
  border: 1px solid #333;
  border-radius: 0;
  outline: none;
  box-shadow: none;
  background: url(//images.arcteryx.com/foundation-ui/svgs/Select_Arrow.svg) 96% / 3% no-repeat #fff;

  &:after {
    content: "X";
    position: absolute;
    right: 0;
  }
  &:-moz-focusring {
    color: transparent;
    border: 2px solid #e9e9e9;
    text-shadow: 0 0 0 #000;
  }
  &:focus {
    border: 1px solid var(--focus-blue);
  }
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  .input-validation-valid & {
    border: 1px solid var(--success-green);
  }
  .input-validation-error & {
    border: 1px solid var(--warning-red);
  }

  #input-place-holder {
    display: none;
  }
`;
const SectionField = styled__default["default"].section`
  font-family: var(--font-urw-din);
  border: 1px solid var(--dark-grey);
  width: 100%;
  max-width: 100%;
  background: var(--white);
  padding: 1rem;
  color: var(--black);
  font-size: 1rem;
  box-shadow: none;
  height: auto;
  min-height: 12rem;
  justify-content: space-between;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  .input-validation-valid & {
    border: 1px solid var(--success-green);
  }
  .input-validation-error & {
    border: 1px solid var(--warning-red);
  }
  &:focus {
    outline: none;
    border: 1px solid var(--focus-blue);
  }
  &:disabled {
    border: 1px solid var(--inactive-state-grey);
    cursor: not-allowed;
  }
`;

const useHover = () => {
  const [value, setValue] = React.useState(false);
  const ref = React.useRef(null);
  const handleMouseOver = () => setValue(true);
  const handleMouseOut = () => setValue(false);
  React.useEffect(() => {
    const node = ref.current;
    node.addEventListener("mouseover", handleMouseOver);
    node.addEventListener("mouseout", handleMouseOut);
    return () => {
      node.removeEventListener("mouseover", handleMouseOver);
      node.removeEventListener("mouseout", handleMouseOut);
    };
  }, [ref.current] // Recall only if ref changes
  );

  return [ref, value];
};

const useDetectMobile = () => {
  const [width, setWidth] = React.useState(null);
  React.useEffect(() => {
    setWidth(window.innerWidth);
    const handleResize = () => setWidth(window.innerWidth);
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);
  return width !== null && width <= (componentsTypography.ScreenSize === null || componentsTypography.ScreenSize === void 0 ? void 0 : componentsTypography.ScreenSize.lg); // 992
};

const Div = styled__default["default"].div`
  display: inline-block;
  position: relative;
  bottom: -1px;
  padding: 5px;
  height: max(${props => props.size}, 20px);
  color: transparent;

  cursor: pointer;
  &:after {
    content: ${props => props.isInfo === true ? "url(//images.arcteryx.com/foundation-ui/svgs/Information_Icon.svg)" : "url(//images.arcteryx.com/foundation-ui/svgs/Question_Icon.svg)"};
    width: ${props => props.size};
    display: inline-block;
  }
`;
const TooltipText = styled__default["default"].span`
  ${props => !props.displayTooltip && `display: none;`}

  --vWidth: 360px;
  --vMinWidth: min(${props => props.maxWidth}px, var(--vWidth));

  position: absolute;
  width: var(--vWidth);
  background: var(--colour-black);
  color: var(--colour-white);
  box-shadow: 6px 6px 6px #00000029;
  padding: 1rem;
  font-size: 1rem;
  line-height: 1.5rem;
  z-index: 999;

  max-height: ${props => `${props.maxHeight}px`};
  max-width: ${props => `${props.maxWidth}px`};

  ${props => props.arrowDirection === "top" && `
    top: 160%;
    left: 50%;
    margin-left: calc(-1 * var(--vMinWidth) / 2 + ${props.size} / 2);
    &:after {
      top: -6px;
      transform: rotate(180deg);
    }
  `}
  // Defaults to bottom
  ${props => props.arrowDirection === "bottom" && `
    bottom: 110%;
    left: 50%;
    margin-left: calc(-1 * var(--vMinWidth) / 2 + ${props.size} / 2);
    &:after {
      bottom: -6px;
    }
  `}
  ${props => props.arrowDirection === "left" && `
    width: max-content;
    left: 100%;
    &:after {
      top: 4px;
      left: -0.667rem !important;
      transform: rotate(90deg);   
    }
  `}
  ${props => props.arrowDirection === "right" && `
    width: max-content;
    right: 100%;
    &:after {
      top: 4px;
      right: -0.7rem !important;
      transform: rotate(-90deg);
    }
  `}

  &:after {
    position: absolute;
    content: "";
    display: var(--colour-black);
    width: 0;
    height: 0;
    border: 8px solid transparent;
    border-bottom-width: 0;
    border-top-color: var(--colour-black);
    right: 50%;
  }
`;
const TooltipWrapper = styled__default["default"].span`
  align-items: center;
  max-width: 360px;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: 1fr auto;
  display: grid;
`;
const TooltipTipImg = styled__default["default"].img`
  height: 50px;
  width: 150px;
  position: relative;
  display: inline-block;
  margin: 0.5rem 0;
  background: black;
`;
const SubHeader = styled__default["default"].span`
  font-weight: 600;
`;
const Content = styled__default["default"].span`
  grid-column: 1/3;
  overflow: hidden;
`;

const calculateDistanceFromWindowEdge = ref => {
  if (!ref.current || typeof window === "undefined") {
    return undefined;
  }
  const rect = ref.current.getBoundingClientRect();
  const {
    left,
    right,
    top,
    bottom
  } = rect;
  const distanceFromBottom = window.innerHeight - bottom;
  const distanceFromRight = window.innerWidth - right;
  return {
    left,
    right: distanceFromRight,
    top,
    bottom: distanceFromBottom
  };
};
const calculateSizeOfTooltip = (arrowDirection, ref) => {
  const WINDOW_OFFSET = 10;
  if (!ref.current || typeof window === "undefined") {
    return {
      maxHeight: 0,
      maxWidth: 0
    };
  }
  const distance = calculateDistanceFromWindowEdge(ref);
  const maxLeftDistance = distance.left;
  const maxRightDistance = distance.right;
  let maxWidth = 0;
  if (arrowDirection === "left") {
    maxWidth = maxRightDistance - WINDOW_OFFSET;
  } else if (arrowDirection === "right") {
    maxWidth = maxLeftDistance - WINDOW_OFFSET;
  } else {
    maxWidth = Math.min(maxLeftDistance, maxRightDistance) * 2 - WINDOW_OFFSET;
  }
  const maxTopDistance = distance.top - WINDOW_OFFSET;
  const maxBottomDistance = distance.bottom - WINDOW_OFFSET;
  let maxHeight = 0;
  if (arrowDirection === "top") {
    maxHeight = maxBottomDistance;
  } else if (arrowDirection === "bottom") {
    maxHeight = maxTopDistance;
  } else {
    maxHeight = Math.max(maxTopDistance, maxBottomDistance);
  }
  return {
    maxWidth,
    maxHeight
  };
};
function calculateTopDirection(_ref) {
  let {
    arrowDirection,
    THRESHOLD,
    windowEdgeDistance
  } = _ref;
  const {
    left,
    right,
    bottom
  } = windowEdgeDistance;
  if (left < THRESHOLD) {
    return "left";
  }
  if (right < THRESHOLD) {
    return "right";
  }
  if (bottom < THRESHOLD) {
    return "bottom";
  }
  return arrowDirection;
}
function calculateBottomDirection(_ref2) {
  let {
    arrowDirection,
    THRESHOLD,
    windowEdgeDistance
  } = _ref2;
  const {
    left,
    right,
    top
  } = windowEdgeDistance;
  if (left < THRESHOLD) {
    return "left";
  }
  if (right < THRESHOLD) {
    return "right";
  }
  if (top < THRESHOLD) {
    return "top";
  }
  return arrowDirection;
}

// eslint-disable-next-line no-magic-numbers
function calculateNewArrowDirection(_ref3) {
  let {
    arrowDirection,
    THRESHOLD = 200,
    windowEdgeDistance
  } = _ref3;
  const {
    left,
    right
  } = windowEdgeDistance;
  if (arrowDirection === "top") {
    return calculateTopDirection({
      arrowDirection,
      THRESHOLD,
      windowEdgeDistance
    });
  }
  if (arrowDirection === "bottom") {
    return calculateBottomDirection({
      arrowDirection,
      THRESHOLD,
      windowEdgeDistance
    });
  }
  if (arrowDirection === "left") {
    if (right < THRESHOLD) {
      return "right";
    }
  }
  if (arrowDirection === "right") {
    if (left < THRESHOLD) {
      return "left";
    }
  }
  return arrowDirection;
}
const calculateNewTooltipDirection = _ref4 => {
  let {
    arrowDirection,
    autoFixTooltip,
    ref,
    windowEdgeDistance
  } = _ref4;
  if (!ref.current || typeof window === "undefined") {
    return arrowDirection;
  }
  if (!autoFixTooltip) {
    return arrowDirection;
  }
  return calculateNewArrowDirection({
    arrowDirection,
    windowEdgeDistance
  });
};

const Tooltip = _ref => {
  let {
    arrowDirection = "bottom",
    size = "15px",
    isInfo = false,
    autoFixTooltip = true,
    isCheckbox,
    imgURL,
    subHeader,
    title
  } = _ref;
  const [hoverRef, isHovered] = useHover();
  const isMobile = useDetectMobile();
  const [clicked, setClicked] = React.useState(false);
  const distanceFromWindowEdge = calculateDistanceFromWindowEdge(hoverRef);
  const direction = calculateNewTooltipDirection({
    arrowDirection,
    ref: hoverRef,
    autoFixTooltip,
    windowEdgeDistance: distanceFromWindowEdge
  });
  const {
    maxWidth,
    maxHeight
  } = calculateSizeOfTooltip(direction, hoverRef);
  const toolTipRef = React.useRef(null);
  /** Alert if clicked on outside of element
   * Src: https://stackoverflow.com/a/42234988
   */
  React.useEffect(() => {
    function handleClickOutside(event) {
      if (toolTipRef.current && !toolTipRef.current.contains(event.target) && !hoverRef.current.contains(event.target)) {
        setClicked(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [hoverRef, toolTipRef]);
  const handleClick = () => {
    setClicked(prevClick => !prevClick);
  };
  const displayTooltip = isMobile && clicked || !isMobile && isHovered;
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(Div, {
    className: "qa-tooltip",
    "data-testid": "tooltip-tip",
    isInfo: isInfo,
    ref: hoverRef,
    onClick: handleClick,
    size: size
  }, /*#__PURE__*/React__default["default"].createElement(TooltipText, {
    ref: toolTipRef,
    isCheckbox: isCheckbox,
    isInfo: isInfo,
    className: "qa-tooltip--text",
    "data-testid": "tooltip-tip-content",
    arrowDirection: direction,
    maxWidth: maxWidth,
    maxHeight: maxHeight,
    size: size,
    displayTooltip: displayTooltip
  }, /*#__PURE__*/React__default["default"].createElement(TooltipWrapper, null, imgURL && /*#__PURE__*/React__default["default"].createElement(TooltipTipImg, {
    src: `${imgURL}`,
    "data-testid": "tooltip-img",
    alt: "arcteryx"
  }), subHeader && /*#__PURE__*/React__default["default"].createElement(SubHeader, {
    "data-testid": "tooltip-subHeader"
  }, subHeader), /*#__PURE__*/React__default["default"].createElement(Content, null, title)))));
};
Tooltip.propTypes = {
  arrowDirection: PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOf(["top", "bottom", "left", "right"])),
  size: PropTypes__default["default"].string,
  isInfo: PropTypes__default["default"].bool,
  autoFixTooltip: PropTypes__default["default"].bool,
  isCheckbox: PropTypes__default["default"].bool,
  imgUrl: PropTypes__default["default"].string,
  subHeader: PropTypes__default["default"].string,
  title: PropTypes__default["default"].string.isRequired,
  toolTipWidth: PropTypes__default["default"].string
};

const LabelStyled = styled__default["default"].label`
  font-size: 14px;
  line-height: 1;
  margin-bottom: 0.5em;
  display: inline-block;
`;
const RequiredSpan = styled__default["default"].span`
  color: var(--warning-red);
  font-size: 14px;
  line-height: 1;
  margin: 0;
`;
const Label$4 = _ref => {
  let {
    name,
    required,
    labelText,
    attachColon = true
  } = _ref;
  return /*#__PURE__*/React__default["default"].createElement(LabelStyled, {
    className: "qa-control-label",
    id: `labelFor--${name}`,
    htmlFor: name
  }, required && /*#__PURE__*/React__default["default"].createElement(RequiredSpan, null, "*"), labelText, attachColon && ":");
};

/* istanbul ignore file */
const LabelHeaderField = _ref => {
  let {
    id,
    label,
    required,
    toolTip,
    arrowDirection,
    isInfo,
    error,
    attachColon = true
  } = _ref;
  return /*#__PURE__*/React__default["default"].createElement("div", null, label && /*#__PURE__*/React__default["default"].createElement(Label$4, {
    htmlFor: id,
    name: id,
    labelText: label,
    attachColon: attachColon,
    required: required
  }), toolTip && /*#__PURE__*/React__default["default"].createElement(Tooltip, {
    title: toolTip,
    arrowDirection: arrowDirection,
    isInfo: isInfo
  }), error && /*#__PURE__*/React__default["default"].createElement(ErrorText, {
    role: "alert",
    className: "qa-form-error-text"
  }, error.message));
};

// Future - could import this from some helper to share it across other packages in this repo
// taken from here: https://www.davedrinks.coffee/how-do-i-use-two-react-refs/
const mergeRefs = function () {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  const filteredRefs = refs.filter(Boolean);
  // no valid refs
  if (!filteredRefs.length) {
    return null;
  }
  // only 1 ref, nothing to merge so pass it through
  if (filteredRefs.length === 1) {
    return filteredRefs[0];
  }
  // return a callback ref that assigns the instance to the multiple input refs
  return instance => {
    for (const ref of filteredRefs) {
      if (typeof ref === 'function') {
        ref(instance);
      } else {
        ref.current = instance;
      }
    }
  };
};

const _excluded$7 = ["register", "setValue", "error", "label", "id", "toolTip", "required", "onChange", "handleDrop", "fileHeaderPart1", "fileHeaderPart2", "fileHeaderPart3", "validExtensionMessage", "maxSizeMessage", "maxSize", "maxFiles", "validExtension", "displayMessage", "name"],
  _excluded2 = ["ref"];
const baseStyle = {
  outline: "none"
};
const activeStyle = {
  borderColor: "#161616",
  backgroundColor: "var(--background-grey)"
};
const acceptStyle = {
  borderColor: "var(--success-green)",
  borderStyle: "dashed"
};
const rejectStyle = {
  borderColor: "var(--warning-red)",
  borderStyle: "dashed"
};
const Aside = styled__default["default"].aside`
  background: var(--background-grey);
  width: 100%;
  padding: 1rem;
`;
const FormP = styled__default["default"](componentsTypography.P)`
  margin: 0 auto;
  text-align: center;
`;
const SpanLeft = styled__default["default"].span`
  padding-right: 1px;
`;
const SpanRight = styled__default["default"].span`
  padding-left: 0.25rem;
`;
const SpanLink = styled__default["default"].span`
  cursor: pointer;
  text-decoration: underline;
`;
const RejectionMessage = styled__default["default"].div`
  color: var(--warning-red);
`;
const FileUpload = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      register,
      setValue,
      error,
      label,
      id,
      toolTip,
      required,
      onChange,
      handleDrop,
      // Passing them as a Props: React does not recognize the `%` prop on a DOM element
      fileHeaderPart1,
      fileHeaderPart2,
      fileHeaderPart3,
      validExtensionMessage,
      maxSizeMessage,
      maxSize,
      maxFiles = 0,
      validExtension,
      displayMessage,
      name = "fileUpload"
    } = _ref,
    inputProps = _objectWithoutProperties(_ref, _excluded$7);
  const {
    t
  } = reactI18next.useTranslation("components-form");
  const [isValid, setValid] = React.useState(false);
  const acceptedFile = 0;
  const validationError = "input-validation-error";
  const styles = required ? "input-validation-valid" : undefined; // Set 'styles' to undefined if 'required' is false
  const rejectionErrorMessages = {
    "file-too-large": t("File too large:"),
    "too-many-files": t("Too many files:")
  };
  const generalUploadErrorMessage = t("Unable to upload file:");
  const onDrop = React.useCallback(_acceptedFiles => {
    if (typeof handleDrop === "function") {
      handleDrop(_acceptedFiles);
      setValue(id, _acceptedFiles, {
        shouldValidate: true
      });
    }
  }, [handleDrop, setValue, id]);
  const {
    acceptedFiles,
    fileRejections,
    getRootProps,
    getInputProps,
    isDragActive,
    isDragAccept,
    isDragReject
  } = reactDropzone.useDropzone({
    accept: validExtension,
    maxSize,
    maxFiles,
    onDrop
  });
  const _getInputProps = getInputProps({
      onChange
    }),
    {
      ref: dropzoneRef
    } = _getInputProps,
    dropzoneInputProps = _objectWithoutProperties(_getInputProps, _excluded2);
  const acceptedFileItems = acceptedFiles.map(file => /*#__PURE__*/React__default["default"].createElement("div", {
    key: file.name
  }, file.name));
  const fileRejectionsItems = fileRejections.map(_ref2 => {
    let {
      file,
      errors
    } = _ref2;
    return /*#__PURE__*/React__default["default"].createElement(RejectionMessage, {
      key: file.name
    }, rejectionErrorMessages[errors[0].code] || generalUploadErrorMessage, " ", file.name);
  });
  const style = React.useMemo(() => _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, baseStyle), isDragActive ? activeStyle : {}), isDragAccept ? acceptStyle : {}), isDragReject ? rejectStyle : {}), [isDragActive, isDragReject, isDragAccept]);
  React.useEffect(() => {
    if (acceptedFiles.length > acceptedFile) {
      setValid(true);
      setValue(id, acceptedFiles, {
        shouldValidate: true
      });
    }
  }, [acceptedFiles, setValue, id, isValid]);
  return /*#__PURE__*/React__default["default"].createElement(FormRow, {
    className: "qa-form-row"
  }, /*#__PURE__*/React__default["default"].createElement(LabelHeaderField, {
    id: id,
    label: label,
    required: required,
    error: error,
    toolTip: toolTip
  }), /*#__PURE__*/React__default["default"].createElement(FormInput, {
    className: `qa-form-input ${error && !isValid ? validationError : ""} ${isValid ? styles : ""}`,
    valid: acceptedFiles.length > acceptedFile
  }, /*#__PURE__*/React__default["default"].createElement(SectionField, getRootProps({
    isDragActive,
    isDragAccept,
    isDragReject,
    style
  }), /*#__PURE__*/React__default["default"].createElement(FormP, null, /*#__PURE__*/React__default["default"].createElement(SpanLeft, null, fileHeaderPart1), /*#__PURE__*/React__default["default"].createElement(SpanLink, null, fileHeaderPart2), /*#__PURE__*/React__default["default"].createElement(SpanRight, null, fileHeaderPart3)), /*#__PURE__*/React__default["default"].createElement("input", _extends({}, register(name, {
    required: required ? inputProps.requiredErrorText : false // Only set the required attribute if 'required' prop is true
  }), {
    ref: mergeRefs(ref, dropzoneRef)
  }, dropzoneInputProps, inputProps, {
    "data-valid": isValid,
    "aria-invalid": error ? "true" : "false",
    type: "file",
    title: (label === null || label === void 0 ? void 0 : label.charAt(0).toUpperCase()) + (label === null || label === void 0 ? void 0 : label.slice(1)),
    "data-testid": id
  })), /*#__PURE__*/React__default["default"].createElement(Aside, null, acceptedFiles.length <= acceptedFiles && !fileRejections.length ? /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FormP, null, displayMessage)) : null, acceptedFiles.length >= acceptedFile ? /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FormP, null, acceptedFileItems)) : null, fileRejections.length ? /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FormP, null, fileRejectionsItems)) : null), /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FormP, null, validExtensionMessage), /*#__PURE__*/React__default["default"].createElement(FormP, null, maxSizeMessage)))));
});
FileUpload.prototype = {
  name: PropTypes__default["default"].string.isRequired,
  disabled: PropTypes__default["default"].bool,
  label: PropTypes__default["default"].string,
  fileHeader: PropTypes__default["default"].string,
  displayMessage: PropTypes__default["default"].string,
  validExtensionMessage: PropTypes__default["default"].string,
  maxSizeMessage: PropTypes__default["default"].string,
  validExtension: PropTypes__default["default"].string,
  maxSize: PropTypes__default["default"].number,
  error: PropTypes__default["default"].bool,
  requiredErrorText: PropTypes__default["default"].string,
  validationErrorText: PropTypes__default["default"].string,
  required: PropTypes__default["default"].bool
};
FileUpload.displayName = "FileUpload";

const FormRowCheckbox = styled__default["default"](FormRow)`
  margin: 0;
`;
const FormInputCheckbox = styled__default["default"](FormInput)`
  display: inline-block;
  box-sizing: border-box;
  text-align: left;
  position: relative;
  padding: 0 1.666rem 0 1.333rem;
  @media only screen and (max-width: 768px) {
    width: 100%;
  }
`;
const Label$3 = styled__default["default"].label`
  position: relative;
  cursor: pointer;
  font-size: 0.933rem;
`;
const StyledCheckbox = styled__default["default"].input`
  &:not(checked),
  &:checked {
    position: absolute;
    left: -9999px;
  }
  &:not(:checked) + label:before,
  &:checked + label:before {
    content: "";
    position: absolute;
    left: -1.299rem;
    top: 0.185rem;
    width: 1rem;
    height: 1rem;
    border: 0.133rem solid var(--black);
    background-color: var(--white);
    transition: background-color 200ms ease;
  }
  &:not(:checked):focus + label:before,
  &:checked:focus + label:before {
    outline: #5d9dd5 solid 1px;
  }
  &:not(:checked) + label:after,
  &:checked + label:after {
    content: url("https://images-dynamic-arcteryx.imgix.net/foundation-ui/svgs/Check_White.svg");
    display: block;
    position: absolute;
    left: -1.2rem;
    top: -0.1205rem;
    width: 0.8rem;
    height: 0.8rem;
    opacity: 0;
    transition: opacity 200ms ease;
    ${componentsTypography.Breakpoint("lg")`
      left: -1.213rem;
    `}
  }
  &:checked + label:before {
    background-color: var(--black);
  }
  &:checked + label:after {
    opacity: 1;
  }
  &:not(:checked):hover + label + span,
  &:checked:hover + label + span,
  &:not(:checked):active + label + span,
  &:checked:active + label + span,
  &:not(:checked):focus + label + span,
  &:checked:focus + label + span {
    background: var(--background-grey);
    position: absolute;
    width: 1.7rem;
    height: 1.7rem;
    border-radius: 50%;
    left: -5px;
    z-index: -1;
  }
  ${props => props.disabled && styled.css`
      cursor: not-allowed;
      &:checked + label:before {
        background-color: var(--inactive-state-grey);
      }
      & + label {
        color: var(--inactive-state-grey);
        cursor: not-allowed;
      }
      & + label:before {
        border-color: var(--inactive-state-grey) !important;
      }
      &:not(:checked):hover + label + span,
      &:checked:hover + label span {
        background: none;
        opacity: 0;
      }
    `}
`;
const Checkbox$1 = _ref => {
  let {
    name,
    className,
    children,
    handleChange,
    checked,
    disabled,
    inputProps
  } = _ref;
  const onChangeHandler = () => {
    try {
      if (!disabled) {
        handleChange();
      }
    } catch (err) {
      console.error(err);
    }
  };
  return /*#__PURE__*/React__default["default"].createElement(FormRowCheckbox, {
    className: `${className ? className : ""}`,
    isCheckbox: true
  }, /*#__PURE__*/React__default["default"].createElement(FormInputCheckbox, {
    isCheckbox: true
  }, /*#__PURE__*/React__default["default"].createElement(StyledCheckbox, _extends({
    id: name,
    name: name,
    type: "checkbox",
    checked: checked,
    "aria-checked": checked,
    tabindex: "0",
    onChange: onChangeHandler,
    "aria-labelledby": `labelFor--${name}`,
    disabled: disabled
  }, inputProps || {})), /*#__PURE__*/React__default["default"].createElement(Label$3, {
    id: `labelFor--${name}`,
    htmlFor: name,
    disabled: disabled
  }, children), /*#__PURE__*/React__default["default"].createElement("span", {
    className: "hover-checkbox"
  })));
};

const Label$2 = styled__default["default"].label`
  font-family: var(--font-urw-din);
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  white-space: pre-wrap;
  font-size: 14px;
  line-height: 17px;

  ${props => !props.disabled && styled.css`
      &:hover {
        span {
          color: var(--black);
          &:before {
            background: var(--black);
          }
          &:after {
            border: 1px solid var(--black);
          }
        }
      }
    `}

/*   span {
    color: var(--medium-grey);
  } */
  ${props => props.checked && styled.css`
      span {
        color: var(--black);
      }
    `}
  ${props => props.disabled && styled.css`
      span {
        cursor: not-allowed;
        color: var(--inactive-state-grey);
      }
    `};
`;
const Toggle$1 = styled__default["default"].span`
  position: relative;
  cursor: pointer;
  margin: 0 5px;
  display: flex;
  span {
    padding: 0 0.25rem;
  }
  &:hover:after {
    box-shadow: 0 0 0 5px var(--background-grey);
  }
  &:before,
  &:after {
    content: "";
    display: block;
    background: var(--white);
  }
  &:before {
    transition: 0.3s ease;
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    background: var(--inactive-state-grey);
  }
  &:after {
    transition: 0.3s ease;
    position: absolute;
    border: 1px solid var(--black);
    border-radius: 50%;
    background: var(--white);
    background-position: center;
    top: 0;
    transition: 0.3s ease;
    height: 15px;
    width: 15px;
  }
`;
const Radio$1 = styled__default["default"].input.attrs({
  type: "radio"
})`
  position: absolute;
  opacity: 0;
  cursor: not-allowed;
  &:focus + ${Toggle$1} {
    &::before {
      outline: #5d9dd5 solid 1px;
      z-index: 1;
      background: none;
    }
    &::after {
      box-shadow: 0 0 0 5px var(--background-grey);
    }
  }

  ${props => props.disabled && styled.css`
      &:hover + ${Toggle$1}:after {
        box-shadow: none !important;
      }
      & + ${Toggle$1}:after {
        border: 1px solid var(--inactive-state-grey);
      }
    `};
  ${props => props.checked && styled.css`
      & + ${Toggle$1}:before {
        border: 1px solid var(--black);
      }
      & + ${Toggle$1}:after {
        background: var(--black);
        background-size: 10px;
        background-image: url("//images.arcteryx.com/foundation-ui/svgs/Check_White.svg");
        background-repeat: no-repeat;
        background-position: center;
        border: 1px solid var(--black);
      }
    `};
  ${props => props.disabled && props.checked && styled.css`
      & + ${Toggle$1}:before {
        border: 1px solid var(--inactive-state-grey);
      }
      & + ${Toggle$1}:after {
        background: var(--inactive-state-grey);
        background-size: 10px;
        background-image: url("//images.arcteryx.com/foundation-ui/svgs/Check_White.svg");
        background-repeat: no-repeat;
        background-position: center;
        border: 1px solid var(--inactive-state-grey);
      }
    `};
`;
const RadioVariant = props => {
  const onClickHandler = e => {
    try {
      if (!props.disabled && props.isGroup) {
        // If part of a group send value to consuming app to handle change
        props.handleClick(e.target.value);
      } else if (!props.disabled) {
        // If individual radio then toggle checked onClick
        props.handleClick(!props.checked);
      }
    } catch (err) {
      console.error(err);
    }
  };
  const id = (props.id || props.value || props.labelText).replace(/ /g, "");
  return /*#__PURE__*/React__default["default"].createElement(FormRow, {
    className: `qa-form-row ${props.className ? props.className : ""}`
  }, /*#__PURE__*/React__default["default"].createElement(FormInput, {
    className: `qa-form-radio`
  }, /*#__PURE__*/React__default["default"].createElement(Label$2, {
    className: "qa-control-label",
    htmlFor: props.id || props.name,
    disabled: props.disabled,
    checked: props.checked
  }, /*#__PURE__*/React__default["default"].createElement(Radio$1, {
    className: "qa-form-control",
    name: props.name,
    id: id,
    value: props.value || props.labelText,
    "aria-labelledby": `labelFor--${props.id || props.name}`,
    disabled: props.disabled,
    checked: props.checked,
    onClick: onClickHandler
  }), /*#__PURE__*/React__default["default"].createElement(Toggle$1, null, /*#__PURE__*/React__default["default"].createElement("span", null, props.labelText)))));
};
RadioVariant.propTypes = {
  name: PropTypes__default["default"].string.isRequired,
  labelText: PropTypes__default["default"].string.isRequired,
  id: PropTypes__default["default"].string,
  value: PropTypes__default["default"].string,
  checked: PropTypes__default["default"].bool,
  disabled: PropTypes__default["default"].bool,
  handleClick: PropTypes__default["default"].func,
  isGroup: PropTypes__default["default"].bool,
  className: PropTypes__default["default"].string
};
RadioVariant.defaultProps = {
  disabled: false,
  isGroup: false
};

const Label$1 = styled__default["default"].label`
  font-family: var(--font-urw-din);
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  white-space: pre-wrap;
  font-size: 14px;
  line-height: 17px;

  ${props => !props.disabled && styled.css`
      &:hover {
        span {
          color: var(--black);
        }
      }
    `}

  ${props => props.checked && styled.css`
      span {
        color: var(--black);
      }
    `}
  ${props => props.disabled && styled.css`
      span {
        cursor: not-allowed;
        color: var(--inactive-state-grey);
      }
    `};
`;
const Toggle = styled__default["default"].span`
  position: relative;
  cursor: pointer;
  margin: 0 5px;
  display: flex;
  span {
    padding: 0 0.25rem;
  }
  &:before,
  &:after {
    content: "";
    display: block;
    background: var(--white);
  }
  &:before {
    width: 16px;
    height: 16px;
    border-radius: 50%;
  }
  &:after {
    position: absolute;
    border: 1px solid var(--black);
    border-radius: 50%;
    background: var(--white);
    background-position: center;
    top: 0;
    height: 15px;
    width: 15px;
  }
`;
const Radio = styled__default["default"].input.attrs({
  type: "radio"
})`
  position: absolute;
  opacity: 0;
  cursor: not-allowed;
  &:focus + ${Toggle} {
    &::before {
      z-index: 1;
      background: none;
    }
  }

  ${props => props.disabled && styled.css`
      &:hover + ${Toggle}:after {
        box-shadow: none !important;
      }
      & + ${Toggle}:after {
        border: 1px solid var(--inactive-state-grey);
      }
    `};
  ${props => props.checked && styled.css`
      & + ${Toggle}:before {
        border: 1px solid var(--black);
      }
      & + ${Toggle}:after {
        position: absolute;
        width: 12px;
        height: 12px;
        top: 2px;
        left: 2px;
        background: var(--black);
      }
    `};
  ${props => props.disabled && props.checked && styled.css`
      & + ${Toggle}:before {
        border: 1px solid var(--inactive-state-grey);
      }
      & + ${Toggle}:after {
        border: 1px solid var(--inactive-state-grey);
        background: var(--inactive-state-grey);
      }
    `};
`;
const RadioButton = /*#__PURE__*/React__default["default"].forwardRef((props, ref) => {
  const onClickHandler = e => {
    try {
      if (!props.disabled && props.isGroup) {
        // If part of a group send value to consuming app to handle change
        props.handleClick(e.target.value);
      } else if (!props.disabled) {
        // If individual radio then toggle checked onClick
        props.handleClick(!props.checked);
      }
    } catch (err) {
      console.error(err);
    }
  };
  const id = (props.id || props.value || props.labelText).replace(/ /g, "");
  return /*#__PURE__*/React__default["default"].createElement(FormRow, {
    className: `qa-form-row ${props.className ? props.className : ""}`
  }, /*#__PURE__*/React__default["default"].createElement(FormInput, {
    className: `qa-form-radio`
  }, /*#__PURE__*/React__default["default"].createElement(Label$1, {
    className: "qa-control-label",
    htmlFor: props.id || props.name,
    disabled: props.disabled,
    checked: props.checked
  }, /*#__PURE__*/React__default["default"].createElement(Radio, {
    ref: ref,
    className: "qa-form-control",
    name: props.name,
    id: id,
    value: props.value || props.labelText,
    "aria-labelledby": `labelFor--${props.id || props.name}`,
    disabled: props.disabled,
    checked: props.checked,
    onClick: onClickHandler
  }), /*#__PURE__*/React__default["default"].createElement(Toggle, null, /*#__PURE__*/React__default["default"].createElement("span", null, props.labelText)))));
});
RadioButton.displayName = "RadioButton";
RadioButton.propTypes = {
  name: PropTypes__default["default"].string.isRequired,
  labelText: PropTypes__default["default"].string.isRequired,
  id: PropTypes__default["default"].string,
  value: PropTypes__default["default"].string,
  checked: PropTypes__default["default"].bool,
  disabled: PropTypes__default["default"].bool,
  handleClick: PropTypes__default["default"].func,
  isGroup: PropTypes__default["default"].bool,
  className: PropTypes__default["default"].string
};
RadioButton.defaultProps = {
  disabled: false,
  isGroup: false
};

const _excluded$6 = ["error", "label", "id", "toolTip", "arrowDirection", "isInfo", "required", "attachColon"];
const validationError$1 = "input-validation-error";
const valid$1 = "input-validation-valid";
const FormInputField = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  var _inputProps$name, _inputProps$name2;
  let {
      error,
      label,
      id,
      toolTip,
      arrowDirection,
      isInfo,
      required,
      attachColon = true
    } = _ref,
    inputProps = _objectWithoutProperties(_ref, _excluded$6);
  return /*#__PURE__*/React__default["default"].createElement(FormRow, {
    className: "qa-form-row",
    isPasswordStrength: inputProps.isPasswordStrength
  }, /*#__PURE__*/React__default["default"].createElement(LabelHeaderField, {
    id: id,
    label: label,
    attachColon: attachColon,
    required: required,
    error: error,
    toolTip: toolTip,
    arrowDirection: arrowDirection,
    isInfo: isInfo
  }), /*#__PURE__*/React__default["default"].createElement(FormInput, {
    className: `qa-form-input
         ${error !== null && error !== void 0 && error.message ? validationError$1 : ""}
         ${!error && inputProps.valid ? valid$1 : ""}`
  }, /*#__PURE__*/React__default["default"].createElement(InputField, _extends({
    className: "qa-form-control",
    title: (label === null || label === void 0 ? void 0 : label.charAt(0).toUpperCase()) + (label === null || label === void 0 ? void 0 : label.slice(1)) || ((_inputProps$name = inputProps.name) === null || _inputProps$name === void 0 ? void 0 : _inputProps$name.charAt(0).toUpperCase()) + ((_inputProps$name2 = inputProps.name) === null || _inputProps$name2 === void 0 ? void 0 : _inputProps$name2.slice(1)),
    id: id,
    ref: ref,
    "data-testid": id,
    "aria-invalid": error ? "true" : "false"
  }, inputProps))));
});
FormInputField.propTypes = {
  name: (props, propName, componentName) => {
    if (/[^a-z0-9]/i.test(props[propName])) {
      return new Error(`Invalid prop ${propName} (${props[propName]}) supplied to ${componentName}. Expected a camelCase string without spaces.`);
    }
  },
  type: PropTypes__default["default"].string.isRequired,
  disabled: PropTypes__default["default"].bool,
  readOnly: PropTypes__default["default"].bool,
  label: PropTypes__default["default"].string,
  size: PropTypes__default["default"].number,
  required: PropTypes__default["default"].bool,
  value: PropTypes__default["default"].string,
  placeholder: PropTypes__default["default"].string
};
FormInputField.displayName = "FormInputField";

const _excluded$5 = ["error", "label", "id", "toolTip", "required", "disallowEmptyOption", "placeHolderText", "defaultValue", "value", "valid", "isMenu", "name", "list", "allowGrayOut", "attachColon"];
const FormSelectField = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      error,
      label,
      id,
      toolTip,
      required,
      disallowEmptyOption,
      placeHolderText,
      defaultValue,
      value,
      valid,
      isMenu,
      name,
      list,
      allowGrayOut = true,
      attachColon = true
    } = _ref,
    selectProps = _objectWithoutProperties(_ref, _excluded$5);
  const [isGray, setIsGray] = React.useState(false);
  React.useEffect(() => {
    const el = document.getElementById(id);
    if (!el) {
      return;
    }
    if (!allowGrayOut) {
      setIsGray(false);
      return;
    }
    const selected = el.options[el.selectedIndex];
    if (selected !== null && selected !== void 0 && selected.hasAttribute("disabled")) {
      setIsGray(true);
    }
  }, [id, allowGrayOut]);
  const onChange = e => {
    selectProps === null || selectProps === void 0 ? void 0 : selectProps.onChange(e);
    setIsGray(false);
  };
  return /*#__PURE__*/React__default["default"].createElement(FormRow, {
    className: "qa-form-row",
    isSelect: true,
    isMenu: isMenu
  }, /*#__PURE__*/React__default["default"].createElement(LabelHeaderField, {
    id: id,
    label: label,
    required: required,
    error: error,
    attachColon: attachColon,
    toolTip: toolTip
  }), /*#__PURE__*/React__default["default"].createElement(FormInput, {
    isSelect: true,
    className: `qa-form-input ${error ? "input-validation-error" : ""} ${!error && valid ? "input-validation-valid" : ""}`
  }, /*#__PURE__*/React__default["default"].createElement(StyledSelect, _extends({
    $isGray: isGray,
    "data-testid": id,
    className: `qa-form-select ${error ? "input-validation-error" : ""} ${!error && valid ? "input-validation-valid" : ""}`,
    size: "1",
    ref: ref,
    id: id,
    placeholder: placeHolderText,
    "aria-invalid": error ? "true" : "false",
    defaultValue: defaultValue || value || "",
    value: value,
    valid: valid,
    name: name
  }, selectProps, {
    onChange: onChange
  }), disallowEmptyOption ? null : placeHolderText ? /*#__PURE__*/React__default["default"].createElement("option", {
    id: "input-place-holder",
    disabled: true,
    value: ""
  }, placeHolderText) : /*#__PURE__*/React__default["default"].createElement("option", {
    defaultValue: true
  }), list === null || list === void 0 ? void 0 : list.map((item, idx) => /*#__PURE__*/React__default["default"].createElement("option", {
    key: `${item.value}-${idx}`,
    value: item.value
  }, item.label)))));
});
FormSelectField.propTypes = {
  error: PropTypes__default["default"].any,
  label: PropTypes__default["default"].any,
  id: PropTypes__default["default"].any,
  toolTip: PropTypes__default["default"].string,
  required: PropTypes__default["default"].any,
  disallowEmptyOption: PropTypes__default["default"].any,
  placeHolderText: PropTypes__default["default"].any,
  defaultValue: PropTypes__default["default"].any,
  value: PropTypes__default["default"].any,
  valid: PropTypes__default["default"].any,
  isMenu: PropTypes__default["default"].any,
  name: PropTypes__default["default"].any,
  list: PropTypes__default["default"].any,
  onChange: PropTypes__default["default"].any,
  onBlur: PropTypes__default["default"].any,
  ref: PropTypes__default["default"].any
};
FormSelectField.displayName = "FormSelectField";

const _excluded$4 = ["error", "label", "id", "toolTip", "required", "valid"];
const validationErrorClass = "input-validation-error";
const validClass = "input-validation-valid";
const FormTextareaField = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      error,
      label,
      id,
      toolTip,
      required,
      valid
    } = _ref,
    inputProps = _objectWithoutProperties(_ref, _excluded$4);
  return /*#__PURE__*/React__default["default"].createElement(FormRow, {
    className: "qa-form-row",
    isRelatedToPrevious: inputProps.isRelatedToPrevious
  }, inputProps.name && label && /*#__PURE__*/React__default["default"].createElement(LabelHeaderField, {
    id: id,
    label: label,
    required: required,
    error: error,
    toolTip: toolTip
  }), /*#__PURE__*/React__default["default"].createElement(FormInput, {
    className: `qa-form-input
         ${error !== null && error !== void 0 && error.message ? validationErrorClass : ""}
         ${!error && valid ? validClass : ""}`
  }, /*#__PURE__*/React__default["default"].createElement(TextAreaField, _extends({
    className: "qa-form-control",
    ref: ref,
    id: id,
    "aria-invalid": error ? "true" : "false",
    title: (label === null || label === void 0 ? void 0 : label.charAt(0).toUpperCase()) + (label === null || label === void 0 ? void 0 : label.slice(1)),
    "data-valid": valid,
    "data-testid": id
  }, inputProps))));
});
FormTextareaField.propTypes = {
  name: PropTypes__default["default"].string.isRequired,
  disabled: PropTypes__default["default"].bool,
  labelText: PropTypes__default["default"].string,
  error: PropTypes__default["default"].bool,
  errorText: PropTypes__default["default"].string,
  required: PropTypes__default["default"].bool,
  value: PropTypes__default["default"].string,
  rows: PropTypes__default["default"].number,
  cols: PropTypes__default["default"].number,
  placeholder: PropTypes__default["default"].string
};
FormTextareaField.displayName = "FormTextareaField";

const ToggleButtonWrap = styled__default["default"].span`
  position: relative;
  display: block;
  width: 2rem;
  height: 1rem;
`;
const ToggleUI = styled__default["default"].span`
  border: 1px solid transparent;
  position: relative;
  cursor: pointer;
  display: block;

  // account for border
  height: calc(1rem + 2px);
  width: calc(2rem + 2px);
  left: -1px;
  top: -1px;

  &:focus {
    border: 2px solid #e9e9e9;
  }
  &:before,
  &:after {
    content: "";
    display: block;
    background: var(--white);
  }
  &:before {
    transition: transform 0.3s ease;
    height: 1rem;
    width: 2rem;
    min-width: 2rem;
    border-radius: 0.65em;
    background: var(--medium-grey);
  }
  &:after {
    transition: transform 0.3s ease;
    position: absolute;
    border: 1px solid var(--medium-grey);
    background: var(--white);
    background-size: 0;
    background-position: center;
    top: 0;
    transition: transform 0.3s ease;
    transform: translateX(0);
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
  }
`;
const Checkbox = styled__default["default"].input.attrs({
  type: "checkbox"
})`
  position: absolute;
  cursor: pointer;
  top: 0;
  width: 100%;
  height: 100%;
  left: 0;
  margin: 0;
  z-index: 1;
  opacity: 0;

  &:hover + ${ToggleUI}:after, &:focus + ${ToggleUI}:after {
    position: absolute;
    background-size: 1rem;
    transform: translateX(0px);
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
    box-shadow: 0 0 0 5px var(--background-grey);
  }

  &[data-valid="false"] + ${ToggleUI}:before {
    border: 1px solid var(--warning-red);
  }

  &:focus + ${ToggleUI} {
    &::before {
      outline: #5d9dd5 solid 1px;
    }
    &::after {
      box-shadow: 0 0 0 5px var(--background-grey);
    }
  }

  &:checked + ${ToggleUI}:before {
    background: var(--black);
  }

  &:checked + ${ToggleUI}:after {
    border: 1px solid var(--black);
    background: var(--white);
    transform: translateX(calc(30px - 100%));
    background-size: 7.5px;
    background-image: url("//images.arcteryx.com/foundation-ui/svgs/Check_Black.svg");
    background-repeat: no-repeat;
    background-position: center;
  }

  &:disabled {
    cursor: not-allowed;

    &:checked + ${ToggleUI}:after {
      background-image: url("//images.arcteryx.com/foundation-ui/svgs/Check_Inactive-Grey.svg");
    }

    &:hover + ${ToggleUI}:after, &:focus + ${ToggleUI}:after {
      box-shadow: none;
    }

    & + ${ToggleUI} {
      filter: grayscale(100%);
      opacity: 0.5;
      &:before {
        background: var(--inactive-state-grey);
      }
      &:after {
        border: 1px solid var(--inactive-state-grey);
      }
    }
  }
`;
const ToggleButton = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
    className,
    id,
    name,
    disabled,
    defaultChecked,
    onChange,
    onBlur,
    checked
  } = _ref;
  return /*#__PURE__*/React__default["default"].createElement(ToggleButtonWrap, {
    className: className
  }, /*#__PURE__*/React__default["default"].createElement(Checkbox, {
    id: id,
    ref: ref,
    className: "qa-form-control",
    "data-testid": id,
    name: name,
    "aria-labelledby": `labelFor--${name}`,
    disabled: disabled,
    defaultChecked: defaultChecked,
    onChange: onChange,
    onBlur: onBlur,
    checked: checked
  }), /*#__PURE__*/React__default["default"].createElement(ToggleUI, null));
});
ToggleButton.propTypes = {
  className: PropTypes__default["default"].string,
  id: PropTypes__default["default"].string,
  name: PropTypes__default["default"].string,
  disabled: PropTypes__default["default"].bool,
  defaultChecked: PropTypes__default["default"].bool,
  onChange: PropTypes__default["default"].func,
  onBlur: PropTypes__default["default"].func,
  checked: PropTypes__default["default"].bool
};
ToggleButton.defaultProps = {
  disabled: false,
  defaultChecked: false
};
ToggleButton.displayName = "ToggleButton";

const _excluded$3 = ["name", "disabled", "required", "error", "renderAfterLabel", "toolTip", "isRelatedToPrevious", "children", "formLink"];
const ErrorTextCheckForm = styled__default["default"](ErrorText)`
  display: block;
`;
const CheckFormInput = styled__default["default"](FormInput)`
  font-family: var(--font-urw-din);
  font-size: 1rem;
  line-height: 1rem;
  align-items: start;
`;
const Label = styled__default["default"].label`
  display: inline;
  align-items: center;
  cursor: pointer;
  white-space: pre-wrap;

  ${props => props.disabled && styled.css`
      cursor: not-allowed;
    `}
`;
const SpanToggle = styled__default["default"].span``;
const LabelWrap = styled__default["default"].div`
  margin-left: 0.25rem;
  display: flex;
`;
const FormToggleButton = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      name,
      disabled,
      required,
      error,
      renderAfterLabel,
      toolTip,
      isRelatedToPrevious,
      children,
      formLink
    } = _ref,
    toggleProps = _objectWithoutProperties(_ref, _excluded$3);
  const toggleId = `toggle-button-id-${name}`;
  return /*#__PURE__*/React__default["default"].createElement(FormRow, {
    className: "qa-form-row",
    isRelatedToPrevious: isRelatedToPrevious,
    isCheckbox: true
  }, /*#__PURE__*/React__default["default"].createElement(CheckFormInput, null, toolTip && /*#__PURE__*/React__default["default"].createElement(Tooltip, {
    title: toolTip,
    isCheckbox: true
  }), /*#__PURE__*/React__default["default"].createElement(ToggleButton, _extends({
    id: toggleId,
    ref: ref,
    name: name,
    disabled: disabled
  }, toggleProps)), /*#__PURE__*/React__default["default"].createElement(LabelWrap, null, /*#__PURE__*/React__default["default"].createElement(Label, {
    htmlFor: toggleId,
    disabled: disabled
  }, required && /*#__PURE__*/React__default["default"].createElement(RequiredSpan$1, null, "*"), /*#__PURE__*/React__default["default"].createElement(SpanToggle, null, children, " ", renderAfterLabel, " ", formLink && /*#__PURE__*/React__default["default"].createElement("a", {
    href: formLink.link,
    target: "_blank"
  }, formLink.label)), error && /*#__PURE__*/React__default["default"].createElement(ErrorTextCheckForm, {
    "data-testid": "qa-form-error-text",
    className: `qa-form-error-text`
  }, error.message)))));
});
FormToggleButton.propTypes = {
  name: PropTypes__default["default"].string.isRequired,
  defaultChecked: PropTypes__default["default"].bool,
  disabled: PropTypes__default["default"].bool,
  labelText: PropTypes__default["default"].string,
  htmlText: PropTypes__default["default"].string,
  toolTip: PropTypes__default["default"].string,
  isRelatedToPrevious: PropTypes__default["default"].bool,
  required: PropTypes__default["default"].bool,
  error: PropTypes__default["default"].object,
  renderAfterLabel: PropTypes__default["default"].node,
  formLink: PropTypes__default["default"].node,
  onChange: PropTypes__default["default"].func,
  onBlur: PropTypes__default["default"].func
};
FormToggleButton.defaultProps = {
  disabled: false,
  required: false
};
FormToggleButton.displayName = "FormToggleButton";

/* istanbul ignore file */
// common patterns
const threeDigit$1 = /^\d{3}$/;
const fourDigit$1 = /^\d{4}$/;
const fiveDigit$1 = /^\d{5}$/;
const sixDigit$1 = /^\d{6}$/;
const alphanumericMask$1 = /^[a-zA-Z0-9]*$/;
const patterns = {
  AU: fourDigit$1,
  AZ: alphanumericMask$1,
  BE: fourDigit$1,
  BR: /^\d{5}-\d{3}$/,
  BY: /2[1-4]{1}\d{4}$/,
  CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
  CH: fourDigit$1,
  CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,
  CZ: /^\d{3}\s?\d{2}$/,
  DE: fiveDigit$1,
  DK: fourDigit$1,
  ES: /^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,
  FI: fiveDigit$1,
  FR: /^\d{2}\s?\d{3}$/,
  GB: /^(GIR 0AA)|((([A-Z][0-9]{1,2})|(([A-Z][A-HJ-Y][0-9]{1,2})|(([A-Z][0-9][A-Z])|([A-Z][A-HJ-Y][0-9]?[A-Z])))) [0-9][A-Z]{2})$/i,
  GR: /^\d{3}\s?\d{2}$/,
  HR: /^([1-5]\d{4}$)/,
  IL: /^(\d{5}|\d{7})$/,
  IN: alphanumericMask$1,
  IR: alphanumericMask$1,
  IE: /^(?!.*(?:o))[A-z]\d[\d\w]\s\w{4}$/i,
  IT: fiveDigit$1,
  JP: /^\d{3}-?\d{4}$/,
  LI: alphanumericMask$1,
  LT: alphanumericMask$1,
  NL: /^\d{4}\s?[a-z]{2}$/i,
  NO: fourDigit$1,
  NP: alphanumericMask$1,
  PL: /^\d{2}-?\d{3}$/,
  PR: alphanumericMask$1,
  PT: /^\d{4}-?\d{3}?$/,
  SE: /^[1-9]\d{2}\s?\d{2}$/,
  SK: /^\d{3}\s?\d{2}$/,
  TW: /^\d{3}(\d{2})?$/,
  US: fiveDigit$1,
  // PSR form country list masks
  AD: alphanumericMask$1,
  AE: alphanumericMask$1,
  AF: alphanumericMask$1,
  AG: alphanumericMask$1,
  AI: alphanumericMask$1,
  AL: alphanumericMask$1,
  AM: alphanumericMask$1,
  AO: alphanumericMask$1,
  AR: alphanumericMask$1,
  AS: alphanumericMask$1,
  AT: fourDigit$1,
  AW: alphanumericMask$1,
  AX: alphanumericMask$1,
  BA: alphanumericMask$1,
  BB: alphanumericMask$1,
  BD: alphanumericMask$1,
  BF: alphanumericMask$1,
  BG: fourDigit$1,
  BH: alphanumericMask$1,
  BI: alphanumericMask$1,
  BJ: alphanumericMask$1,
  BL: alphanumericMask$1,
  BM: alphanumericMask$1,
  BO: alphanumericMask$1,
  BQ: alphanumericMask$1,
  BS: alphanumericMask$1,
  BT: alphanumericMask$1,
  BV: alphanumericMask$1,
  BW: alphanumericMask$1,
  BZ: alphanumericMask$1,
  CC: alphanumericMask$1,
  CI: alphanumericMask$1,
  CL: alphanumericMask$1,
  CM: alphanumericMask$1,
  CO: alphanumericMask$1,
  CR: alphanumericMask$1,
  CV: alphanumericMask$1,
  CW: alphanumericMask$1,
  CX: alphanumericMask$1,
  CY: alphanumericMask$1,
  DJ: alphanumericMask$1,
  DM: alphanumericMask$1,
  DO: fiveDigit$1,
  DZ: fiveDigit$1,
  EC: alphanumericMask$1,
  EE: fiveDigit$1,
  EG: alphanumericMask$1,
  EH: alphanumericMask$1,
  ER: alphanumericMask$1,
  ET: alphanumericMask$1,
  FJ: alphanumericMask$1,
  FK: alphanumericMask$1,
  GA: alphanumericMask$1,
  GD: alphanumericMask$1,
  GE: alphanumericMask$1,
  GF: alphanumericMask$1,
  GG: alphanumericMask$1,
  GH: alphanumericMask$1,
  GI: alphanumericMask$1,
  GL: alphanumericMask$1,
  GM: alphanumericMask$1,
  GN: alphanumericMask$1,
  GP: alphanumericMask$1,
  GQ: alphanumericMask$1,
  GS: alphanumericMask$1,
  GT: alphanumericMask$1,
  GU: alphanumericMask$1,
  GW: alphanumericMask$1,
  GY: alphanumericMask$1,
  HK: alphanumericMask$1,
  HM: alphanumericMask$1,
  HN: alphanumericMask$1,
  HT: alphanumericMask$1,
  HU: fourDigit$1,
  ID: fiveDigit$1,
  IM: alphanumericMask$1,
  IO: alphanumericMask$1,
  IQ: alphanumericMask$1,
  IS: threeDigit$1,
  JM: alphanumericMask$1,
  JE: alphanumericMask$1,
  JO: alphanumericMask$1,
  KE: fiveDigit$1,
  KG: alphanumericMask$1,
  KH: alphanumericMask$1,
  KI: alphanumericMask$1,
  KM: alphanumericMask$1,
  KN: alphanumericMask$1,
  KP: alphanumericMask$1,
  KR: alphanumericMask$1,
  KW: alphanumericMask$1,
  KY: alphanumericMask$1,
  KZ: alphanumericMask$1,
  LA: alphanumericMask$1,
  LB: alphanumericMask$1,
  LC: alphanumericMask$1,
  LR: alphanumericMask$1,
  LS: alphanumericMask$1,
  LU: fourDigit$1,
  LV: alphanumericMask$1,
  LY: alphanumericMask$1,
  MA: alphanumericMask$1,
  MG: alphanumericMask$1,
  MH: alphanumericMask$1,
  MK: alphanumericMask$1,
  ML: alphanumericMask$1,
  MM: alphanumericMask$1,
  MN: alphanumericMask$1,
  MO: alphanumericMask$1,
  MP: alphanumericMask$1,
  MQ: alphanumericMask$1,
  MR: alphanumericMask$1,
  MS: alphanumericMask$1,
  MT: alphanumericMask$1,
  MU: alphanumericMask$1,
  MV: alphanumericMask$1,
  MW: alphanumericMask$1,
  MX: fiveDigit$1,
  MY: fiveDigit$1,
  MZ: alphanumericMask$1,
  NA: alphanumericMask$1,
  NE: alphanumericMask$1,
  NF: alphanumericMask$1,
  NG: alphanumericMask$1,
  NI: alphanumericMask$1,
  NU: alphanumericMask$1,
  NZ: fourDigit$1,
  PA: alphanumericMask$1,
  PE: alphanumericMask$1,
  PF: alphanumericMask$1,
  PG: alphanumericMask$1,
  PH: alphanumericMask$1,
  PK: alphanumericMask$1,
  PM: alphanumericMask$1,
  PN: alphanumericMask$1,
  PY: alphanumericMask$1,
  RE: alphanumericMask$1,
  RO: sixDigit$1,
  RS: alphanumericMask$1,
  RU: sixDigit$1,
  RW: alphanumericMask$1,
  SA: fiveDigit$1,
  SC: alphanumericMask$1,
  SD: alphanumericMask$1,
  SG: sixDigit$1,
  SH: alphanumericMask$1,
  SI: fourDigit$1,
  SJ: alphanumericMask$1,
  SL: alphanumericMask$1,
  SN: alphanumericMask$1,
  SO: alphanumericMask$1,
  SR: alphanumericMask$1,
  ST: alphanumericMask$1,
  SV: alphanumericMask$1,
  SZ: alphanumericMask$1,
  TD: alphanumericMask$1,
  TF: alphanumericMask$1,
  TG: alphanumericMask$1,
  TH: fiveDigit$1,
  TJ: alphanumericMask$1,
  TK: alphanumericMask$1,
  TM: alphanumericMask$1,
  TN: fourDigit$1,
  TO: alphanumericMask$1,
  TR: alphanumericMask$1,
  TT: alphanumericMask$1,
  TZ: alphanumericMask$1,
  UA: fiveDigit$1,
  UG: alphanumericMask$1,
  UM: alphanumericMask$1,
  UY: alphanumericMask$1,
  VC: alphanumericMask$1,
  VE: alphanumericMask$1,
  VG: alphanumericMask$1,
  VI: alphanumericMask$1,
  VN: alphanumericMask$1,
  VU: alphanumericMask$1,
  WF: alphanumericMask$1,
  WS: alphanumericMask$1,
  YT: alphanumericMask$1,
  ZA: fourDigit$1,
  ZM: fiveDigit$1,
  ZW: alphanumericMask$1,
  YE: alphanumericMask$1
};
const isPostalCode = (str, locale) => {
  if (locale in patterns) {
    return patterns[locale].test(str);
  } else if (locale === "any") {
    for (const key in patterns) {
      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
      // istanbul ignore else
      if (patterns.hasOwnProperty(key)) {
        const pattern = patterns[key];
        if (pattern.test(str)) {
          return true;
        }
      }
    }
    return false;
  }
  throw new Error(`Invalid locale '${locale}'`);
};

/* istanbul ignore file */
const normalizedPhoneNumber = (value, locale) => {
  const phoneNumber = libphonenumberJs.parsePhoneNumberFromString(value, locale);
  if (!phoneNumber) {
    return value;
  }
  return phoneNumber.formatInternational();
};

const threeDigit = /^\d{0,3}$/;
const fourDigit = /^\d{0,4}$/;
const fiveDigit = /^\d{0,5}$/;
const sixDigit = /^\d{0,6}$/;
const CA_US_PHONE_NUMBER_LENGTH = 11; // 10 digit number plus country code
const NON_CA_USA_MAX_PHONE_NUMBER_LENGTH = 20;
const tenDigitPhone = "+{1}(000) 000-0000";
const twentyDigitPhone = /^[0-9]\d{0,19}$/;
const alphanumericMask = /^[a-zA-Z0-9]*$/;
const maskDictionary = {
  AU: fourDigit,
  BE: fourDigit,
  BY: alphanumericMask,
  CA: "a0a 0a0",
  CN: sixDigit,
  CZ: "000 00",
  DK: fourDigit,
  FI: fiveDigit,
  FR: fiveDigit,
  DE: fiveDigit,
  IE: "a0? ????",
  IT: fiveDigit,
  NO: fourDigit,
  PL: "00-000",
  ES: fiveDigit,
  SE: "000 00",
  CH: fourDigit,
  NL: "0000 aa",
  GB: [{
    mask: "aa00 0aa"
  }, {
    mask: "a00 0aa"
  }, {
    mask: "a0 0aa"
  }, {
    mask: "a0a 0aa"
  }, {
    mask: "aa0 0aa"
  }, {
    mask: "aa0a 0aa"
  }, {
    mask: "aaaa 1ZZ"
  }],
  US: fiveDigit,
  // PSR form country list masks
  AD: alphanumericMask,
  AT: fourDigit,
  BG: fourDigit,
  BR: alphanumericMask,
  DO: fiveDigit,
  DZ: fiveDigit,
  EE: fiveDigit,
  GR: alphanumericMask,
  HR: alphanumericMask,
  HT: alphanumericMask,
  HU: fourDigit,
  ID: fiveDigit,
  IL: alphanumericMask,
  IN: alphanumericMask,
  IR: alphanumericMask,
  IS: threeDigit,
  JP: alphanumericMask,
  KE: fiveDigit,
  LI: alphanumericMask,
  LU: fourDigit,
  LV: alphanumericMask,
  MX: fiveDigit,
  MT: alphanumericMask,
  MY: fiveDigit,
  NZ: fourDigit,
  PR: alphanumericMask,
  PT: alphanumericMask,
  RO: sixDigit,
  RU: sixDigit,
  SA: fiveDigit,
  SG: sixDigit,
  SI: fourDigit,
  SK: alphanumericMask,
  TH: fiveDigit,
  TN: fourDigit,
  TW: alphanumericMask,
  UA: fiveDigit,
  ZA: fourDigit,
  ZM: fiveDigit,
  AE: alphanumericMask,
  AF: alphanumericMask,
  AG: alphanumericMask,
  AI: alphanumericMask,
  AL: alphanumericMask,
  AM: alphanumericMask,
  AO: alphanumericMask,
  AR: alphanumericMask,
  AS: alphanumericMask,
  AW: alphanumericMask,
  AX: alphanumericMask,
  BA: alphanumericMask,
  BB: alphanumericMask,
  BD: alphanumericMask,
  BF: alphanumericMask,
  BI: alphanumericMask,
  BJ: alphanumericMask,
  BL: alphanumericMask,
  BM: alphanumericMask,
  BO: alphanumericMask,
  BQ: alphanumericMask,
  BS: alphanumericMask,
  BT: alphanumericMask,
  BV: alphanumericMask,
  BW: alphanumericMask,
  BZ: alphanumericMask,
  CC: alphanumericMask,
  CI: alphanumericMask,
  CL: alphanumericMask,
  CM: alphanumericMask,
  CO: alphanumericMask,
  CR: alphanumericMask,
  CV: alphanumericMask,
  CW: alphanumericMask,
  CX: alphanumericMask,
  CY: alphanumericMask,
  DJ: alphanumericMask,
  DM: alphanumericMask,
  EC: alphanumericMask,
  EG: alphanumericMask,
  EH: alphanumericMask,
  ER: alphanumericMask,
  ET: alphanumericMask,
  FJ: alphanumericMask,
  FK: alphanumericMask,
  GA: alphanumericMask,
  GD: alphanumericMask,
  GE: alphanumericMask,
  GF: alphanumericMask,
  GG: alphanumericMask,
  GH: alphanumericMask,
  GI: alphanumericMask,
  GL: alphanumericMask,
  GM: alphanumericMask,
  GN: alphanumericMask,
  GP: alphanumericMask,
  GQ: alphanumericMask,
  GS: alphanumericMask,
  GT: alphanumericMask,
  GU: alphanumericMask,
  GW: alphanumericMask,
  GY: alphanumericMask,
  HK: alphanumericMask,
  HM: alphanumericMask,
  HN: alphanumericMask,
  IM: alphanumericMask,
  IO: alphanumericMask,
  IQ: alphanumericMask,
  JM: alphanumericMask,
  JE: alphanumericMask,
  JO: alphanumericMask,
  KG: alphanumericMask,
  KH: alphanumericMask,
  KI: alphanumericMask,
  KM: alphanumericMask,
  KN: alphanumericMask,
  KP: alphanumericMask,
  KR: alphanumericMask,
  KW: alphanumericMask,
  KY: alphanumericMask,
  KZ: alphanumericMask,
  LA: alphanumericMask,
  LB: alphanumericMask,
  LC: alphanumericMask,
  LR: alphanumericMask,
  LS: alphanumericMask,
  LY: alphanumericMask,
  MA: alphanumericMask,
  MG: alphanumericMask,
  MH: alphanumericMask,
  MK: alphanumericMask,
  ML: alphanumericMask,
  MM: alphanumericMask,
  MN: alphanumericMask,
  MO: alphanumericMask,
  MP: alphanumericMask,
  MQ: alphanumericMask,
  MR: alphanumericMask,
  MS: alphanumericMask,
  MU: alphanumericMask,
  MV: alphanumericMask,
  MW: alphanumericMask,
  MZ: alphanumericMask,
  NA: alphanumericMask,
  NE: alphanumericMask,
  NF: alphanumericMask,
  NG: alphanumericMask,
  NI: alphanumericMask,
  NU: alphanumericMask,
  PA: alphanumericMask,
  PE: alphanumericMask,
  PF: alphanumericMask,
  PG: alphanumericMask,
  PH: alphanumericMask,
  PK: alphanumericMask,
  PM: alphanumericMask,
  PN: alphanumericMask,
  PY: alphanumericMask,
  RE: alphanumericMask,
  RS: alphanumericMask,
  RW: alphanumericMask,
  SC: alphanumericMask,
  SD: alphanumericMask,
  SH: alphanumericMask,
  SJ: alphanumericMask,
  SL: alphanumericMask,
  SN: alphanumericMask,
  SO: alphanumericMask,
  SR: alphanumericMask,
  ST: alphanumericMask,
  SV: alphanumericMask,
  SZ: alphanumericMask,
  TD: alphanumericMask,
  TF: alphanumericMask,
  TG: alphanumericMask,
  TJ: alphanumericMask,
  TK: alphanumericMask,
  TM: alphanumericMask,
  TO: alphanumericMask,
  TR: alphanumericMask,
  TT: alphanumericMask,
  TZ: alphanumericMask,
  UG: alphanumericMask,
  UM: alphanumericMask,
  UY: alphanumericMask,
  VC: alphanumericMask,
  VE: alphanumericMask,
  VG: alphanumericMask,
  VI: alphanumericMask,
  VN: alphanumericMask,
  VU: alphanumericMask,
  WF: alphanumericMask,
  WS: alphanumericMask,
  YT: alphanumericMask,
  YE: alphanumericMask,
  ZW: alphanumericMask
};
const isValidPhoneNumber = function () {
  let phoneNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  let country = arguments.length > 1 ? arguments[1] : undefined;
  const unmaskedNumber = phoneNumber.replace(/\D/g, "");
  return ['CA', 'US'].includes(country) ? unmaskedNumber.length === CA_US_PHONE_NUMBER_LENGTH : unmaskedNumber.length <= NON_CA_USA_MAX_PHONE_NUMBER_LENGTH;
};
const normalizedPostalCode = (element, locale) => {
  const maskOptions = {
    mask: (maskDictionary === null || maskDictionary === void 0 ? void 0 : maskDictionary[locale]) || null
  };
  const zipMask = IMask__default["default"](element, maskOptions);
  return zipMask.value;
};
const createPostalCodeMask = country => country && maskDictionary[country.toUpperCase()] ? IMask__default["default"].createMask({
  mask: maskDictionary[country.toUpperCase()],
  prepare: str => str.toUpperCase(),
  definitions: {
    "?": /[a-zA-Z0-9]/
  }
}) : null;
const createPhoneNumberMask = country => IMask__default["default"].createMask({
  mask: ['CA', 'US'].includes(country === null || country === void 0 ? void 0 : country.toUpperCase()) ? tenDigitPhone : twentyDigitPhone
});

/* istanbul ignore file */
const validationErrorMessage = "input-validation-error-message";
const validationError = "input-validation-error";
const valid = "input-validation-valid";
const superToggle = (element, class0, class1) => {
  var _element$classList, _element$classList2;
  /* eslint-disable no-unused-expressions */
  element === null || element === void 0 ? void 0 : (_element$classList = element.classList) === null || _element$classList === void 0 ? void 0 : _element$classList.add(class0);
  element === null || element === void 0 ? void 0 : (_element$classList2 = element.classList) === null || _element$classList2 === void 0 ? void 0 : _element$classList2.remove(class1);
};
const ValidatePassword = (password, defaultOptions) => {
  /*Array of rules and the information target*/

  const rules = [{
    Pattern: /[A-Z]/,
    Target: "UpperCase"
  }, {
    Pattern: /[a-z]/,
    Target: "LowerCase"
  }, {
    Pattern: /[0-9]/,
    Target: "Numbers"
  }, {
    Pattern: /[!@#$%^&*]/,
    Target: "Symbols"
  }];
  const length = document.getElementById("Length");
  const passwordContainer = document.getElementById("passwordStrength");
  if (password !== "") {
    (password === null || password === void 0 ? void 0 : password.length) >= defaultOptions.minLength ? superToggle(length, valid, validationErrorMessage) : superToggle(length, validationErrorMessage, valid);

    /*Iterate our remaining rules. The logic is the same as for Length*/
    for (let i = 0; i < rules.length; i++) {
      var _rules$i, _rules$i2;
      const target = passwordContainer === null || passwordContainer === void 0 ? void 0 : passwordContainer.querySelector(`#${(_rules$i = rules[i]) === null || _rules$i === void 0 ? void 0 : _rules$i.Target}`);
      new RegExp((_rules$i2 = rules[i]) === null || _rules$i2 === void 0 ? void 0 : _rules$i2.Pattern).test(password) ? superToggle(target, valid, validationErrorMessage) : superToggle(target, validationErrorMessage, valid);
    }
  }
};
const PasswordStrengthIndicator = props => /*#__PURE__*/React__default["default"].createElement("span", null, /*#__PURE__*/React__default["default"].createElement(Message, {
  id: "passwordStrength"
}, /*#__PURE__*/React__default["default"].createElement(MessageDetail, props)));
const MessageDetail = props => {
  const data = props.passwordValidationMessage;
  const messageValidation = /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, data.map(list => /*#__PURE__*/React__default["default"].createElement("li", {
    key: list.id,
    id: list.title,
    className: `${validationError}`
  }, list.content)));
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, messageValidation);
};

var resources_DONOTEDIT = {
  de: {
    "components-form": {
      Address: "Adresse",
      "Address 2": "Adresse 2",
      "Apt, suite etc. (optional)": "Hausnummer, Wohnungsnummer usw. (optional)",
      "Apt, suite, PO Box, etc. (optional)": "Hausnummer, Wohnungsnummer usw. (optional)",
      City: "Stadt",
      Country: "Land",
      "Email address": "E-Mail-Adresse",
      "File too large:": "Datei zu groß:",
      "First Name": "Vorname",
      "Last Name": "Nachname",
      "Phone number": "Telefonnummer",
      "Phone number is required": "Bitte zwingend Telefonnummer angeben",
      "Please enter a valid email address.": "Bitte geben Sie eine gültige E-Mail-Adresse ein.",
      "Please enter a valid phone number": "Falsches Telefonnummer-Format",
      "Please enter a valid Postal Code / Zip.": "Bitte geben Sie ihre Postleitzahl ein.",
      "Please enter your address.": "Bitte Adresse eingeben.",
      "Please enter your city.": "Bitte Ihre Stadt eingeben.",
      "Please enter your email address.": "Bitte E-Mail-Adresse eingeben.",
      "Please enter your first name.": "Bitte geben Sie Ihren Vornamen ein.",
      "Please enter your last name.": "Bitte geben Sie Ihren Nachnamen ein.",
      "Please enter your province or state.": "Bitte geben Sie Ihr Bundesland an.",
      "Please select your country.": "Wählen Sie Ihr Land.",
      "Postal Code / Zip": "Postleitzahl",
      "Province / State": "Bundesland",
      "This address is a PO Box": "Diese Adresse ist ein Postfach",
      "Too many files:": "Zu viele Dateien:",
      "Unable to upload file:": "Datei kann nicht hochgeladen werden:",
      "We will only call you if there are questions regarding your order.": "Wir rufen dich nur an, wenn es einmal Rückfragen wegen einer Bestellung gibt."
    }
  },
  en: {
    "components-form": {
      Address: "Address",
      "Address 2": "Address 2",
      "Apt, suite etc. (optional)": "Apt, suite etc. (optional)",
      "Apt, suite, PO Box, etc. (optional)": "Apt, suite, PO Box, etc. (optional)",
      City: "City",
      Country: "Country",
      "Email address": "",
      "File too large:": "",
      "First Name": "First Name",
      "Last Name": "Last Name",
      "Phone number": "Phone number",
      "Phone number is required": "Phone number is required",
      "Please enter a valid email address.": "",
      "Please enter a valid phone number": "Please enter a valid phone number",
      "Please enter a valid Postal Code / Zip.": "Please enter a valid Postal Code / Zip.",
      "Please enter your address.": "Please enter your address",
      "Please enter your city.": "Please enter your city.",
      "Please enter your email address.": "",
      "Please enter your first name.": "Please enter your first name.",
      "Please enter your last name.": "Please enter your last name.",
      "Please enter your province or state.": "Please enter your province or state.",
      "Please select your country.": "Please select your country.",
      "Postal Code / Zip": "Postal Code / Zip",
      "Province / State": "Province / State",
      "This address is a PO Box": "This address is a PO Box",
      "Too many files:": "",
      "Unable to upload file:": "",
      "We will only call you if there are questions regarding your order.": "We will only call you if there are questions regarding your order."
    }
  },
  es: {
    "components-form": {
      Address: "Dirección",
      "Address 2": "Dirección 2",
      "Apt, suite etc. (optional)": "Apto., oficina, etc. (opcional)",
      "Apt, suite, PO Box, etc. (optional)": "Apto., oficina, apartado postal, etc. (opcional)",
      City: "Ciudad",
      Country: "País",
      "Email address": "Correo electrónico",
      "File too large:": "Archivo demasiado grande:",
      "First Name": "Nombre",
      "Last Name": "Apellidos",
      "Phone number": "Numero de telefono",
      "Phone number is required": "Se requiere número de teléfono",
      "Please enter a valid email address.": "Introduzca una dirección de correo válida.",
      "Please enter a valid phone number": "Formato incorrecto del número de teléfono",
      "Please enter a valid Postal Code / Zip.": "Introduzca su Código postal/zip.",
      "Please enter your address.": "Introduzca su dirección.",
      "Please enter your city.": "Introduzca su ciudad.",
      "Please enter your email address.": "Introduzca una nueva dirección de correo electrónico.",
      "Please enter your first name.": "Por favor, introduzca su Nombre.",
      "Please enter your last name.": "Por favor, introduzca su Apellido.",
      "Please enter your province or state.": "Introduzca su provincia o estado.",
      "Please select your country.": "Seleccione su país.",
      "Postal Code / Zip": "Código postal/zip",
      "Province / State": "Provincia/estado",
      "This address is a PO Box": "Esta dirección es un apartado postal",
      "Too many files:": "demasiados archivos:",
      "Unable to upload file:": "No se ha podido cargar el archivo:",
      "We will only call you if there are questions regarding your order.": "Solo te llamaremos si hay alguna pregunta respecto a tu pedido."
    }
  },
  fr: {
    "components-form": {
      Address: "Adresse",
      "Address 2": "Adresse 2",
      "Apt, suite etc. (optional)": "Appt, suite, etc. (facultatif)",
      "Apt, suite, PO Box, etc. (optional)": "Appt, suite, boîte postale, etc. (facultatif)",
      City: "Ville",
      Country: "Pays",
      "Email address": "Adresse e-mail",
      "File too large:": "Fichier trop volumineux:",
      "First Name": "Prénom",
      "Last Name": "Nom de famille",
      "Phone number": "Numéro de téléphone durant la journée",
      "Phone number is required": "Veuillez saisir un numéro de téléphone",
      "Please enter a valid email address.": "Veuillez saisir une adresse e-mail valide.",
      "Please enter a valid phone number": "Le format du numéro de téléphone n’est pas correct",
      "Please enter a valid Postal Code / Zip.": "Veuillez saisir votre code postal.",
      "Please enter your address.": "Veuillez saisir votre adresse postale.",
      "Please enter your city.": "Veuillez saisir votre ville.",
      "Please enter your email address.": "Veuillez saisir votre adresse e-mail.",
      "Please enter your first name.": "Merci de saisir votre prénom.",
      "Please enter your last name.": "Merci de saisir votre nom.",
      "Please enter your province or state.": "Veuillez saisir votre province ou état.",
      "Please select your country.": "Veuillez choisir votre pays.",
      "Postal Code / Zip": "Code postal / Zip",
      "Province / State": "Province / État",
      "This address is a PO Box": "Cette adresse est une boîte postale",
      "Too many files:": "Trop de fichiers:",
      "Unable to upload file:": "Impossible de télécharger le fichier:",
      "We will only call you if there are questions regarding your order.": "Nous ne vous contacterons qu’en cas de questions concernant votre commande."
    }
  },
  jp: {
    "components-form": {
      Address: "住所",
      "Address 2": "住所 2",
      "Apt, suite etc. (optional)": "建物、部屋番号、郵便番号、など。 (オプション)",
      "Apt, suite, PO Box, etc. (optional)": "建物、部屋番号、郵便番号、など。 (オプション)",
      City: "都市",
      Country: "国",
      "Email address": "メールアドレス",
      "File too large:": "ファイルサイズが大きすぎます:",
      "First Name": "名前",
      "Last Name": "名字",
      "Phone number": "電話番号",
      "Phone number is required": "お電話番号は必須です。",
      "Please enter a valid email address.": "有効なメールアドレスを入力してください。",
      "Please enter a valid phone number": "正しくない電話番号形式です",
      "Please enter a valid Postal Code / Zip.": "郵便番号を入力してください。",
      "Please enter your address.": "住所を入力してください。",
      "Please enter your city.": "都市を入力してください。",
      "Please enter your email address.": "メールアドレスを入力してください。",
      "Please enter your first name.": "名前を入力して下さい。",
      "Please enter your last name.": "名字を入力して下さい。",
      "Please enter your province or state.": "都道府県を入力してください。",
      "Please select your country.": "国を選択してください。",
      "Postal Code / Zip": "郵便番号",
      "Province / State": "都道府県",
      "This address is a PO Box": "この住所は私書箱です。",
      "Too many files:": "ファイルが多すぎます:",
      "Unable to upload file:": "ファイルをアップロードできません:",
      "We will only call you if there are questions regarding your order.": "お客様のご注文に関して不明な点がある場合のみ、ご連絡させていただきます。"
    }
  },
  no: {
    "components-form": {
      Address: "Adresse",
      "Address 2": "Adresse 2",
      "Apt, suite etc. (optional)": "Leilighet, suite, osv. (valgfritt)",
      "Apt, suite, PO Box, etc. (optional)": "Leilighet, suite, postboks osv. (valgfritt)",
      City: "By",
      Country: "Land",
      "Email address": "E-postadresse",
      "File too large:": "Filen er for stor:",
      "First Name": "Fornavn",
      "Last Name": "Etternavn",
      "Phone number": "Telefonnummer pa dagtid",
      "Phone number is required": "Du må oppgi et telefonnummer",
      "Please enter a valid email address.": "Oppgi en gyldig e-postadresse.",
      "Please enter a valid phone number": "Feil telefonnummerformat",
      "Please enter a valid Postal Code / Zip.": "Oppgi postnummeret ditt",
      "Please enter your address.": "Oppgi adressen din.",
      "Please enter your city.": "Oppgi byen din.",
      "Please enter your email address.": "Oppgi e-postadressen din.",
      "Please enter your first name.": "Oppgi fornavnet ditt.",
      "Please enter your last name.": "Oppgi etternavnet ditt.",
      "Please enter your province or state.": "Oppgi din provins eller stat.",
      "Please select your country.": "Velg land.",
      "Postal Code / Zip": "Postnummer",
      "Province / State": "Provins/stat",
      "This address is a PO Box": "Denne adressen er en postboks",
      "Too many files:": "For mange filer:",
      "Unable to upload file:": "Kan ikke laste opp filen:",
      "We will only call you if there are questions regarding your order.": "Vi ringer deg bare dersom det gjelder spørsmål angående bestillingen din."
    }
  },
  zh: {
    "components-form": {
      Address: "地址",
      "Address 2": "地址２",
      "Apt, suite etc. (optional)": "门牌号、邮政信箱等（可选）",
      "Apt, suite, PO Box, etc. (optional)": "门牌号、邮政信箱等（可选）",
      City: "城市",
      Country: "国家",
      "Email address": "电子邮箱地址",
      "File too large:": "文件太大:",
      "First Name": "名字",
      "Last Name": "姓氏",
      "Phone number": "电话号码",
      "Phone number is required": "需提供手机号码",
      "Please enter a valid email address.": "请输入有效电子邮件地址。",
      "Please enter a valid phone number": "错误的电话号码格式",
      "Please enter a valid Postal Code / Zip.": "请输入您的邮政编码。",
      "Please enter your address.": "请输入您的地址。",
      "Please enter your city.": "请输入您的城市。",
      "Please enter your email address.": "请输入您的电子邮件地址。",
      "Please enter your first name.": "请输入名字。",
      "Please enter your last name.": "请输入姓氏。",
      "Please enter your province or state.": "请输入您所在省或州",
      "Please select your country.": "请选择您所在国家。",
      "Postal Code / Zip": "邮编/邮政编码",
      "Province / State": "省/州",
      "This address is a PO Box": "地址为邮政信箱",
      "Too many files:": "文件太多：",
      "Unable to upload file:": "无法上传文件:",
      "We will only call you if there are questions regarding your order.": "仅当您的订单存疑时，我们才会给您打电话。"
    }
  }
};

const emeaCountrySet = new Set(["at", "be", "ch", "cz", "de", "dk", "es", "fi", "fr", "gb", "ie", "it", "nl", "no", "pl", "se"]);

/** @param {string} countryCode - Lowercase or Uppercase 2-char country code */
function getIsEMEA(countryCode) {
  const countryUpper = countryCode === null || countryCode === void 0 ? void 0 : countryCode.toLowerCase();
  return emeaCountrySet.has(countryUpper);
}

const IsPoBox = _ref => {
  let {
    currentCountry,
    register,
    errors: {
      isPoBox
    }
  } = _ref;
  const {
    t
  } = reactI18next.useTranslation('components-form');
  return !getIsEMEA(currentCountry) && /*#__PURE__*/React__default["default"].createElement(FormToggleButton, _extends({
    name: "1"
  }, register("isPoBox"), {
    error: isPoBox
  }), t("This address is a PO Box"));
};

const validatePhoneNumber = _ref => {
  let {
    t,
    required,
    currentCountry
  } = _ref;
  return value => {
    if (!value || value.trim() === "") {
      if (required) {
        return t("Phone number is required");
      }
      return undefined; // Return undefined when the field is not required and empty
    }

    if (!isValidPhoneNumber(value || "", currentCountry)) {
      return t("Please enter a valid phone number");
    }
    return true;
  };
};
const PhoneNumber = _ref2 => {
  let {
    label,
    name,
    currentCountry,
    watch,
    toolTip,
    isInfo,
    arrowDirection,
    register,
    setValue,
    errors,
    required,
    placeholder,
    attachColon = true
  } = _ref2;
  const {
    t
  } = reactI18next.useTranslation("components-form");
  const inputName = name ? name : "phone";
  const phoneError = errors[inputName];
  const currentPhoneNumber = watch(inputName);
  const phoneNumberMask = React.useMemo(() => createPhoneNumberMask(currentCountry), [currentCountry]);

  // apply masking when country or phone changes
  React.useEffect(() => {
    if (currentCountry && currentPhoneNumber) {
      setValue(inputName, phoneNumberMask.resolve(currentPhoneNumber), {
        shouldValidate: true,
        shouldDirty: true
      });
    }
  }, [currentCountry, currentPhoneNumber, phoneNumberMask]);
  return /*#__PURE__*/React__default["default"].createElement(FormInputField, _extends({
    id: inputName,
    type: "tel",
    label: label || t("Phone number"),
    attachColon: attachColon,
    required: required,
    valid: currentPhoneNumber && isValidPhoneNumber(currentPhoneNumber, currentCountry)
  }, register(inputName, {
    validate: validatePhoneNumber({
      t,
      required,
      currentCountry
    })
  }), {
    placeholder: placeholder,
    error: phoneError
    // Tooltip props
    ,
    toolTip: toolTip || t("We will only call you if there are questions regarding your order."),
    arrowDirection: arrowDirection,
    isInfo: isInfo
  }));
};

const regionCountryNAMSet = new Set(["US", "CA"]);
const reqgionCountryEMEASet = new Set(["FR"]);
const isRegionRequired = function (countryCode) {
  let requireEmeaProvince = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return regionCountryNAMSet.has(countryCode === null || countryCode === void 0 ? void 0 : countryCode.toUpperCase()) || requireEmeaProvince && reqgionCountryEMEASet.has(countryCode === null || countryCode === void 0 ? void 0 : countryCode.toUpperCase());
};

const countryWithAddressInFront = new Set(["US", "CA", "GB", "FR", "IE"]);
const isAddressInFront = countryCode => countryWithAddressInFront.has(countryCode);

const _excluded$2 = ["province-emea"];
const googleTypeMap = {
  locality: "city",
  sublocality: "city",
  postal_town: "city",
  administrative_area_level_1: "province",
  administrative_area_level_2: "province-emea",
  postal_code: "postalCode",
  country: "country"
};
const adaptProvinceForEmea = (address, requireEmeaProvince) => {
  const shouldUpdateProvince = getIsEMEA(address.country) && address["province-emea"] && requireEmeaProvince;
  const {
      "province-emea": provinceEmea
    } = address,
    otherAddressParam = _objectWithoutProperties(address, _excluded$2);
  return _objectSpread2(_objectSpread2({}, otherAddressParam), {}, {
    province: shouldUpdateProvince ? provinceEmea : address === null || address === void 0 ? void 0 : address.province
  });
};
const adaptGooglePlacesToForm = (addressComponents, requireEmeaProvince) => {
  const adaptedAddress = {};
  let street, route, premise;
  let displayAddressInFront = false;
  if (Array.isArray(addressComponents) && addressComponents !== null && addressComponents !== void 0 && addressComponents.length) {
    addressComponents.forEach(_ref => {
      let {
        short_name,
        long_name,
        types
      } = _ref;
      for (const type of types) {
        if (type === "street_number") {
          street = short_name;
        } else if (type === "route") {
          route = short_name;
        } else if (type === "premise") {
          premise = short_name;
        } else if (type === "administrative_area_level_1" || type === "country") {
          adaptedAddress[googleTypeMap[type]] = short_name;
          displayAddressInFront = isAddressInFront(short_name);
        } else if (googleTypeMap[type]) {
          adaptedAddress[googleTypeMap[type]] = long_name;
        }
      }
    });
    if (displayAddressInFront) {
      adaptedAddress.address1 = [street, route, premise].filter(attr => Boolean(attr)).join(" ");
    } else {
      adaptedAddress.address1 = [premise, route, street].filter(attr => Boolean(attr)).join(" ");
    }
  }
  return adaptProvinceForEmea(adaptedAddress, requireEmeaProvince);
};

const _excluded$1 = ["onChange"];
const validatePostalCode = _ref => {
  let {
    selectedCountry,
    errorMessageInvalidFormat,
    t
  } = _ref;
  return value => {
    if (!selectedCountry) {
      return false;
    }
    if (isPostalCode(value, selectedCountry)) {
      return true;
    }
    return errorMessageInvalidFormat || t("Please enter a valid Postal Code / Zip.");
  };
};
const PostalCode = _ref2 => {
  let {
    register,
    errors,
    watch,
    setValue,
    name = "postalCode",
    id = "postalCode",
    countryName = "country",
    placeholder,
    label,
    attachColon = true,
    errorMessageRequired,
    errorMessageInvalidFormat
  } = _ref2;
  const {
    t
  } = reactI18next.useTranslation("components-form");
  const postalCodeError = errors === null || errors === void 0 ? void 0 : errors[name];
  const [selectedCountry, currentPostalCode] = watch([countryName, name]);
  const postalCodeMask = React.useMemo(() => createPostalCodeMask(selectedCountry), [selectedCountry]);
  const postalCodeIsValid = postalCodeError === undefined;

  // Upon country change, reset the postalCode if it's invalid for the new country
  const prevCountry = React.useRef(selectedCountry);
  React.useEffect(() => {
    if (selectedCountry && selectedCountry !== prevCountry.current && !isPostalCode(currentPostalCode, selectedCountry)) {
      setValue(name, undefined);
    }
    prevCountry.current = selectedCountry;
  }, [currentPostalCode, name, selectedCountry, setValue]);
  const _register = register(name, {
      required: errorMessageRequired || t("Please enter a valid Postal Code / Zip."),
      validate: {
        validPostalCode: validatePostalCode({
          selectedCountry,
          errorMessageInvalidFormat,
          t
        })
      }
    }),
    {
      onChange: onPostalCodeChange
    } = _register,
    registeredPostalCode = _objectWithoutProperties(_register, _excluded$1);
  return /*#__PURE__*/React__default["default"].createElement(FormInputField, _extends({
    id: id,
    type: "text",
    label: label || t("Postal Code / Zip"),
    "data-country": selectedCountry,
    required: true,
    attachColon: attachColon,
    valid: postalCodeIsValid && selectedCountry && isPostalCode(currentPostalCode, selectedCountry)
  }, registeredPostalCode, {
    onChange: event => {
      if (postalCodeMask) {
        event.target.value = postalCodeMask.resolve(event.target.value);
      }
      // make sure this happens after we update the target.value with the masked value
      onPostalCodeChange(event);
    },
    placeholder: placeholder,
    error: postalCodeError
  }));
};

/**
 * A hook to de-select the province if the country changes
 */
const useResetProvince = _ref => {
  let {
    countryList,
    selectedCountry,
    selectedProvince,
    setValue,
    availableProvinceList,
    provinceName
  } = _ref;
  React.useEffect(() => {
    var _selectedCountryInfo$;
    const selectedCountryInfo = countryList.find(_ref2 => {
      let {
        id
      } = _ref2;
      return id === selectedCountry;
    });
    const shouldResetProvince = !selectedCountryInfo || !(selectedCountryInfo !== null && selectedCountryInfo !== void 0 && (_selectedCountryInfo$ = selectedCountryInfo.available_regions) !== null && _selectedCountryInfo$ !== void 0 && _selectedCountryInfo$.find(_ref3 => {
      let {
        code
      } = _ref3;
      return code === selectedProvince;
    }));
    if (shouldResetProvince) {
      setValue(provinceName, undefined);
      setValue("regionId", undefined);
    }
  }, [selectedCountry, availableProvinceList, selectedProvince, countryList, setValue]);
};
const CountryProvince = _ref4 => {
  let {
    register,
    errors,
    watch,
    countryList,
    defaultCountry,
    countryNotice,
    setValue,
    countryName = "country",
    provinceName = "province",
    requireEmeaProvince
  } = _ref4;
  const {
    t
  } = reactI18next.useTranslation("components-form");
  const countryError = errors[countryName];
  const provinceError = errors[provinceName];
  const countryIsValid = countryError === undefined;
  const provinceIsValid = provinceError === undefined;
  const [selectedCountry, selectedProvince] = watch([countryName, provinceName]);
  React.useEffect(() => {
    if (!selectedCountry) {
      setValue(countryName, defaultCountry);
    }
  }, [defaultCountry, selectedCountry]);
  const availableProvinceList = React.useMemo(() => {
    var _countryList$find;
    if (!selectedCountry) {
      return [];
    }
    const availableProvinces = (_countryList$find = countryList.find(_ref5 => {
      let {
        id
      } = _ref5;
      return id === selectedCountry;
    })) === null || _countryList$find === void 0 ? void 0 : _countryList$find.available_regions;
    if (availableProvinces) {
      return availableProvinces;
    }
    return [];
  }, [selectedCountry, countryList]);
  const shouldShowProvince = !(selectedCountry && !availableProvinceList.length);
  const isProvinceRequired = isRegionRequired(selectedCountry, requireEmeaProvince);
  useResetProvince({
    countryList,
    selectedCountry,
    selectedProvince,
    setValue,
    availableProvinceList,
    provinceName
  });
  React.useEffect(() => {
    if (selectedProvince && availableProvinceList.length > 0) {
      const region = availableProvinceList.find(region => region.code === selectedProvince);
      setValue("regionId", region === null || region === void 0 ? void 0 : region.id);
    }
  }, [selectedProvince, availableProvinceList]);
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FormSelectField, _extends({
    id: countryName
  }, register(countryName, {
    required: t("Please select your country.")
  }), {
    label: t("Country"),
    error: countryError,
    required: true,
    labelText: t("Country"),
    "data-testid": countryName,
    disallowEmptyOption: true,
    valid: countryIsValid && selectedCountry,
    list: countryList.map(_ref6 => {
      let {
        full_name_locale,
        id
      } = _ref6;
      return {
        label: full_name_locale,
        value: id
      };
    })
  })), countryNotice, shouldShowProvince && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FormSelectField, _extends({
    id: `${provinceName}-${selectedCountry}`
  }, register(provinceName, {
    required: isProvinceRequired && t("Please enter your province or state.")
  }), {
    label: t("Province / State"),
    error: provinceError,
    required: isProvinceRequired,
    valid: provinceIsValid && selectedProvince,
    list: availableProvinceList.map(_ref7 => {
      let {
        code,
        name
      } = _ref7;
      return {
        value: code,
        label: name
      };
    })
  })), /*#__PURE__*/React__default["default"].createElement("input", _extends({}, register("regionId"), {
    type: "hidden"
  }))));
};

const _excluded = ["ref"];
const BaseAddressInputs = _ref => {
  let {
    register,
    errors: {
      firstName,
      lastName,
      address1,
      address2,
      country,
      postalCode,
      city,
      province
    },
    watch,
    trigger,
    setValue,
    googleAutocompleteApiKey,
    defaultCountry,
    countryNotice,
    countryList,
    hideName,
    address1PlaceHolderText,
    requireEmeaProvince = false
  } = _ref;
  const [selectedCountry, currentFirstName, currentLastName, currentAddress1, currentAddress2, currentCity] = watch(["country", "firstName", "lastName", "address1", "address2", "city"]);
  const {
    t
  } = reactI18next.useTranslation("components-form");
  const _register = register("address1", {
      required: t("Please enter your address.")
    }),
    {
      ref: address1Ref
    } = _register,
    registeredAddress1 = _objectWithoutProperties(_register, _excluded);
  const {
    ref: placesRef
  } = reactGoogleAutocomplete.usePlacesWidget({
    apiKey: googleAutocompleteApiKey,
    onPlaceSelected: place => {
      const adaptedAddress = adaptGooglePlacesToForm(place === null || place === void 0 ? void 0 : place.address_components, requireEmeaProvince);
      Object.keys(adaptedAddress).forEach(item => {
        if (item !== "province") {
          setValue(item, adaptedAddress[item]);
        }
      });
      if (adaptedAddress !== null && adaptedAddress !== void 0 && adaptedAddress.province) {
        setValue("province", adaptedAddress === null || adaptedAddress === void 0 ? void 0 : adaptedAddress.province); // must be called after country value is set
      }

      trigger(["country", "province", "city", "postalCode"]);
    },
    options: {
      types: ["address"],
      componentRestrictions: {
        country: selectedCountry
      }
    }
  });
  const firstNameIsValid = firstName === undefined;
  const lastNameIsValid = lastName === undefined;
  const address1IsValid = address1 === undefined;
  const cityIsValid = city === undefined;
  // For Countries that have no regions configured in Magento, the Province/State field will NOT show.
  const showRegion = isRegionRequired(selectedCountry, requireEmeaProvince);
  return /*#__PURE__*/React__default["default"].createElement(React.Fragment, null, !hideName && /*#__PURE__*/React__default["default"].createElement(FormInputField, _extends({
    id: "firstName",
    "data-testid": "firstName",
    type: "text",
    name: "firstName",
    label: t("First Name"),
    required: true,
    valid: firstNameIsValid && currentFirstName
  }, register("firstName", {
    required: t("Please enter your first name.")
  }), {
    error: firstName
  })), !hideName && /*#__PURE__*/React__default["default"].createElement(FormInputField, _extends({
    id: "lastName",
    "data-testid": "lastName",
    type: "text",
    name: "lastName",
    label: t("Last Name"),
    required: true,
    valid: lastNameIsValid && currentLastName
  }, register("lastName", {
    required: t("Please enter your last name.")
  }), {
    error: lastName
  })), /*#__PURE__*/React__default["default"].createElement(FormInputField, _extends({
    ref: mergeRefs(address1Ref, placesRef),
    required: true,
    label: t("Address"),
    error: address1,
    type: "text",
    valid: address1IsValid && currentAddress1,
    "data-testid": "address1"
  }, registeredAddress1, {
    placeholder: address1PlaceHolderText
  })), /*#__PURE__*/React__default["default"].createElement(FormInputField, _extends({}, register("address2", {}), {
    label: t("Address 2"),
    error: address2,
    type: "text",
    valid: currentAddress2,
    placeholder: showRegion ? t("Apt, suite, PO Box, etc. (optional)") : t("Apt, suite etc. (optional)")
  })), /*#__PURE__*/React__default["default"].createElement(FormInputField, _extends({}, register("city", {
    required: t("Please enter your city.")
  }), {
    label: t("City"),
    required: true,
    type: "text",
    error: city,
    "data-testid": "city",
    valid: cityIsValid && currentCity
  })), /*#__PURE__*/React__default["default"].createElement(CountryProvince, {
    register: register,
    errors: {
      country,
      province
    },
    watch: watch,
    countryList: countryList,
    countryNotice: countryNotice,
    defaultCountry: defaultCountry,
    setValue: setValue,
    requireEmeaProvince: requireEmeaProvince
  }), /*#__PURE__*/React__default["default"].createElement(PostalCode, {
    register: register,
    errors: {
      postalCode
    },
    watch: watch,
    setValue: setValue
  }));
};

const EmailInput = _ref => {
  let {
    id,
    label,
    required,
    errors,
    register,
    placeholder,
    validation = {},
    name = "email"
  } = _ref;
  const {
    t
  } = reactI18next.useTranslation("components-form");
  const [isValidEmail, setValidEmail] = React.useState(false);
  return /*#__PURE__*/React__default["default"].createElement(componentsForm.FormInputField, _extends({
    id: id,
    type: "email",
    name: name,
    label: label || t("Email address"),
    required: required,
    valid: isValidEmail
  }, register(name, {
    required: t("Please enter your email address."),
    pattern: {
      value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/i,
      message: t("Please enter a valid email address.")
    },
    validate: _objectSpread2({
      validEmail: value => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value) ? setValidEmail(true) : setValidEmail(false)
    }, validation)
  }), {
    error: errors[name],
    placeholder: placeholder
  }));
};

exports.BaseAddressInputs = BaseAddressInputs;
exports.CheckboxVariant = Checkbox$1;
exports.CountryProvince = CountryProvince;
exports.EmailInput = EmailInput;
exports.FileUpload = FileUpload;
exports.FormInputField = FormInputField;
exports.FormSelectField = FormSelectField;
exports.FormTextareaField = FormTextareaField;
exports.FormToggleButton = FormToggleButton;
exports.IsPoBox = IsPoBox;
exports.LabelHeaderField = LabelHeaderField;
exports.PasswordStrengthIndicator = PasswordStrengthIndicator;
exports.PhoneNumber = PhoneNumber;
exports.PostalCode = PostalCode;
exports.RadioButton = RadioButton;
exports.RadioVariant = RadioVariant;
exports.Tooltip = Tooltip;
exports.ValidatePassword = ValidatePassword;
exports.getIsEMEA = getIsEMEA;
exports.i18nResources = resources_DONOTEDIT;
exports.isPostalCode = isPostalCode;
exports.normalizedPhoneNumber = normalizedPhoneNumber;
exports.normalizedPostalCode = normalizedPostalCode;
//# sourceMappingURL=index.js.map
