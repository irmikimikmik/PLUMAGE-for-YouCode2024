import React from "react";
import styled, { css } from "styled-components";
import { Breakpoint } from "@arcteryx/components-typography";
import { FormRow, FormInput } from "./Styles";

const FormRowCheckbox = styled(FormRow)`
  margin: 0;
`;

const FormInputCheckbox = styled(FormInput)`
  display: inline-block;
  box-sizing: border-box;
  text-align: left;
  position: relative;
  padding: 0 1.666rem 0 1.333rem;
  @media only screen and (max-width: 768px) {
    width: 100%;
  }
`;

const Label = styled.label`
  position: relative;
  cursor: pointer;
  font-size: 0.933rem;
`;

const StyledCheckbox = styled.input`
  &:not(checked),
  &:checked {
    position: absolute;
    left: -9999px;
  }
  &:not(:checked) + label:before,
  &:checked + label:before {
    content: "";
    position: absolute;
    left: -1.299rem;
    top: 0.185rem;
    width: 1rem;
    height: 1rem;
    border: 0.133rem solid var(--black);
    background-color: var(--white);
    transition: background-color 200ms ease;
  }
  &:not(:checked):focus + label:before,
  &:checked:focus + label:before {
    outline: #5d9dd5 solid 1px;
  }
  &:not(:checked) + label:after,
  &:checked + label:after {
    content: url("https://images-dynamic-arcteryx.imgix.net/foundation-ui/svgs/Check_White.svg");
    display: block;
    position: absolute;
    left: -1.2rem;
    top: -0.1205rem;
    width: 0.8rem;
    height: 0.8rem;
    opacity: 0;
    transition: opacity 200ms ease;
    ${Breakpoint("lg")`
      left: -1.213rem;
    `}
  }
  &:checked + label:before {
    background-color: var(--black);
  }
  &:checked + label:after {
    opacity: 1;
  }
  &:not(:checked):hover + label + span,
  &:checked:hover + label + span,
  &:not(:checked):active + label + span,
  &:checked:active + label + span,
  &:not(:checked):focus + label + span,
  &:checked:focus + label + span {
    background: var(--background-grey);
    position: absolute;
    width: 1.7rem;
    height: 1.7rem;
    border-radius: 50%;
    left: -5px;
    z-index: -1;
  }
  ${props =>
    props.disabled &&
    css`
      cursor: not-allowed;
      &:checked + label:before {
        background-color: var(--inactive-state-grey);
      }
      & + label {
        color: var(--inactive-state-grey);
        cursor: not-allowed;
      }
      & + label:before {
        border-color: var(--inactive-state-grey) !important;
      }
      &:not(:checked):hover + label + span,
      &:checked:hover + label span {
        background: none;
        opacity: 0;
      }
    `}
`;

const Checkbox = ({ name, className, children, handleChange, checked, disabled, inputProps }) => {
  const onChangeHandler = () => {
    try {
      if (!disabled) {
        handleChange();
      }
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <FormRowCheckbox className={`${className ? className : ""}`} isCheckbox>
      <FormInputCheckbox isCheckbox>
        <StyledCheckbox
          id={name}
          name={name}
          type="checkbox"
          checked={checked}
          aria-checked={checked}
          tabindex="0"
          onChange={onChangeHandler}
          aria-labelledby={`labelFor--${name}`}
          disabled={disabled}
          {...(inputProps || {})}
        />
        <Label id={`labelFor--${name}`} htmlFor={name} disabled={disabled}>
          {children}
        </Label>
        <span className="hover-checkbox"></span>
      </FormInputCheckbox>
    </FormRowCheckbox>
  );
};

export default Checkbox;
