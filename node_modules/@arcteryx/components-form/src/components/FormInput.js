/* istanbul ignore file */
import React, { forwardRef } from "react";
import PropTypes from "prop-types";

import LabelHeaderField from "./FormLabelHeader";

import { FormRow, InputField, FormInput } from "./Styles";
const validationError = "input-validation-error";
const valid = "input-validation-valid";

const FormInputField = forwardRef(
  ({ error, label, id, toolTip, arrowDirection, isInfo, required, attachColon = true, ...inputProps }, ref) => (
    <FormRow className="qa-form-row" isPasswordStrength={inputProps.isPasswordStrength}>
      <LabelHeaderField
        id={id}
        label={label}
        attachColon={attachColon}
        required={required}
        error={error}
        toolTip={toolTip}
        arrowDirection={arrowDirection}
        isInfo={isInfo}
      />
      <FormInput
        className={`qa-form-input
         ${error?.message ? validationError : ""}
         ${!error && inputProps.valid ? valid : ""}`}
      >
        <InputField
          className="qa-form-control"
          title={
            label?.charAt(0).toUpperCase() + label?.slice(1) ||
            inputProps.name?.charAt(0).toUpperCase() + inputProps.name?.slice(1)
          }
          id={id}
          ref={ref}
          data-testid={id}
          aria-invalid={error ? "true" : "false"}
          {...inputProps}
        />
      </FormInput>
    </FormRow>
  )
);
FormInputField.propTypes = {
  name: (props, propName, componentName) => {
    if (/[^a-z0-9]/i.test(props[propName])) {
      return new Error(
        `Invalid prop ${propName} (${props[propName]}) supplied to ${componentName}. Expected a camelCase string without spaces.`
      );
    }
  },
  type: PropTypes.string.isRequired,
  disabled: PropTypes.bool,
  readOnly: PropTypes.bool,
  label: PropTypes.string,
  size: PropTypes.number,
  required: PropTypes.bool,
  value: PropTypes.string,
  placeholder: PropTypes.string,
};
FormInputField.displayName = "FormInputField";
export default FormInputField;
