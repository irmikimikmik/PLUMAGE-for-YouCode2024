export const calculateDistanceFromWindowEdge = ref => {
  if (!ref.current || typeof window === "undefined") {
    return undefined;
  }

  const rect = ref.current.getBoundingClientRect();
  const { left, right, top, bottom } = rect;

  const distanceFromBottom = window.innerHeight - bottom;
  const distanceFromRight = window.innerWidth - right;

  return {
    left,
    right: distanceFromRight,
    top,
    bottom: distanceFromBottom,
  };
};

export const calculateSizeOfTooltip = (arrowDirection, ref) => {
  const WINDOW_OFFSET = 10;
  if (!ref.current || typeof window === "undefined") {
    return {
      maxHeight: 0,
      maxWidth: 0,
    };
  }

  const distance = calculateDistanceFromWindowEdge(ref);
  const maxLeftDistance = distance.left;
  const maxRightDistance = distance.right;

  let maxWidth = 0;
  if (arrowDirection === "left") {
    maxWidth = maxRightDistance - WINDOW_OFFSET;
  } else if (arrowDirection === "right") {
    maxWidth = maxLeftDistance - WINDOW_OFFSET;
  } else {
    maxWidth = Math.min(maxLeftDistance, maxRightDistance) * 2 - WINDOW_OFFSET;
  }

  const maxTopDistance = distance.top - WINDOW_OFFSET;
  const maxBottomDistance = distance.bottom - WINDOW_OFFSET;

  let maxHeight = 0;
  if (arrowDirection === "top") {
    maxHeight = maxBottomDistance;
  } else if (arrowDirection === "bottom") {
    maxHeight = maxTopDistance;
  } else {
    maxHeight = Math.max(maxTopDistance, maxBottomDistance);
  }

  return {
    maxWidth,
    maxHeight,
  };
};

export function calculateTopDirection({ arrowDirection, THRESHOLD, windowEdgeDistance }) {
  const { left, right, bottom } = windowEdgeDistance;
  if (left < THRESHOLD) {
    return "left";
  }
  if (right < THRESHOLD) {
    return "right";
  }
  if (bottom < THRESHOLD) {
    return "bottom";
  }
  return arrowDirection;
}

export function calculateBottomDirection({ arrowDirection, THRESHOLD, windowEdgeDistance }) {
  const { left, right, top } = windowEdgeDistance;
  if (left < THRESHOLD) {
    return "left";
  }
  if (right < THRESHOLD) {
    return "right";
  }
  if (top < THRESHOLD) {
    return "top";
  }
  return arrowDirection;
}

// eslint-disable-next-line no-magic-numbers
export function calculateNewArrowDirection({ arrowDirection, THRESHOLD = 200, windowEdgeDistance }) {
  const { left, right } = windowEdgeDistance;

  if (arrowDirection === "top") {
    return calculateTopDirection({ arrowDirection, THRESHOLD, windowEdgeDistance });
  }

  if (arrowDirection === "bottom") {
    return calculateBottomDirection({ arrowDirection, THRESHOLD, windowEdgeDistance });
  }

  if (arrowDirection === "left") {
    if (right < THRESHOLD) {
      return "right";
    }
  }

  if (arrowDirection === "right") {
    if (left < THRESHOLD) {
      return "left";
    }
  }

  return arrowDirection;
}

export const calculateNewTooltipDirection = ({ arrowDirection, autoFixTooltip, ref, windowEdgeDistance }) => {
  if (!ref.current || typeof window === "undefined") {
    return arrowDirection;
  }

  if (!autoFixTooltip) {
    return arrowDirection;
  }

  return calculateNewArrowDirection({ arrowDirection, windowEdgeDistance });
};
