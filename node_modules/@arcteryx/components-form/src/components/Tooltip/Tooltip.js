import React, { useState, useRef, useEffect } from "react";
import PropTypes from "prop-types";
import { useHover } from "../../utils/useHover";
import { useDetectMobile } from "../../utils/useDetectMobile";
import { Content, SubHeader, Div, TooltipText, TooltipTipImg, TooltipWrapper } from "./styles";
import { calculateSizeOfTooltip, calculateNewTooltipDirection, calculateDistanceFromWindowEdge } from "./helpers";

const Tooltip = ({
  arrowDirection = "bottom",
  size = "15px",
  isInfo = false,
  autoFixTooltip = true,
  isCheckbox,
  imgURL,
  subHeader,
  title,
}) => {
  const [hoverRef, isHovered] = useHover();
  const isMobile = useDetectMobile();
  const [clicked, setClicked] = useState(false);

  const distanceFromWindowEdge = calculateDistanceFromWindowEdge(hoverRef);
  const direction = calculateNewTooltipDirection({
    arrowDirection,
    ref: hoverRef,
    autoFixTooltip,
    windowEdgeDistance: distanceFromWindowEdge,
  });
  const { maxWidth, maxHeight } = calculateSizeOfTooltip(direction, hoverRef);

  const toolTipRef = useRef(null);
  /** Alert if clicked on outside of element
   * Src: https://stackoverflow.com/a/42234988
   */
  useEffect(() => {
    function handleClickOutside(event) {
      if (
        toolTipRef.current &&
        !toolTipRef.current.contains(event.target) &&
        !hoverRef.current.contains(event.target)
      ) {
        setClicked(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [hoverRef, toolTipRef]);

  const handleClick = () => {
    setClicked(prevClick => !prevClick);
  };

  const displayTooltip = (isMobile && clicked) || (!isMobile && isHovered);

  return (
    <>
      <Div
        className="qa-tooltip"
        data-testid="tooltip-tip"
        isInfo={isInfo}
        ref={hoverRef}
        onClick={handleClick}
        size={size}
      >
        <TooltipText
          ref={toolTipRef}
          isCheckbox={isCheckbox}
          isInfo={isInfo}
          className="qa-tooltip--text"
          data-testid="tooltip-tip-content"
          arrowDirection={direction}
          maxWidth={maxWidth}
          maxHeight={maxHeight}
          size={size}
          displayTooltip={displayTooltip}
        >
          <TooltipWrapper>
            {imgURL && <TooltipTipImg src={`${imgURL}`} data-testid="tooltip-img" alt="arcteryx" />}
            {subHeader && <SubHeader data-testid="tooltip-subHeader">{subHeader}</SubHeader>}
            <Content>{title}</Content>
          </TooltipWrapper>
        </TooltipText>
      </Div>
    </>
  );
};
Tooltip.propTypes = {
  arrowDirection: PropTypes.arrayOf(PropTypes.oneOf(["top", "bottom", "left", "right"])),
  size: PropTypes.string,
  isInfo: PropTypes.bool,
  autoFixTooltip: PropTypes.bool,
  isCheckbox: PropTypes.bool,
  imgUrl: PropTypes.string,
  subHeader: PropTypes.string,
  title: PropTypes.string.isRequired,
  toolTipWidth: PropTypes.string,
};

export default Tooltip;
