import React from "react";
import PropTypes from "prop-types";
import { FormRow, FormInput } from "./Styles";
import styled, { css } from "styled-components";

const Label = styled.label`
  font-family: var(--font-urw-din);
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  white-space: pre-wrap;
  font-size: 14px;
  line-height: 17px;

  ${props =>
    !props.disabled &&
    css`
      &:hover {
        span {
          color: var(--black);
          &:before {
            background: var(--black);
          }
          &:after {
            border: 1px solid var(--black);
          }
        }
      }
    `}

/*   span {
    color: var(--medium-grey);
  } */
  ${props =>
    props.checked &&
    css`
      span {
        color: var(--black);
      }
    `}
  ${props =>
    props.disabled &&
    css`
      span {
        cursor: not-allowed;
        color: var(--inactive-state-grey);
      }
    `};
`;
const Toggle = styled.span`
  position: relative;
  cursor: pointer;
  margin: 0 5px;
  display: flex;
  span {
    padding: 0 0.25rem;
  }
  &:hover:after {
    box-shadow: 0 0 0 5px var(--background-grey);
  }
  &:before,
  &:after {
    content: "";
    display: block;
    background: var(--white);
  }
  &:before {
    transition: 0.3s ease;
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    background: var(--inactive-state-grey);
  }
  &:after {
    transition: 0.3s ease;
    position: absolute;
    border: 1px solid var(--black);
    border-radius: 50%;
    background: var(--white);
    background-position: center;
    top: 0;
    transition: 0.3s ease;
    height: 15px;
    width: 15px;
  }
`;
const Radio = styled.input.attrs({ type: "radio" })`
  position: absolute;
  opacity: 0;
  cursor: not-allowed;
  &:focus + ${Toggle} {
    &::before {
      outline: #5d9dd5 solid 1px;
      z-index: 1;
      background: none;
    }
    &::after {
      box-shadow: 0 0 0 5px var(--background-grey);
    }
  }

  ${props =>
    props.disabled &&
    css`
      &:hover + ${Toggle}:after {
        box-shadow: none !important;
      }
      & + ${Toggle}:after {
        border: 1px solid var(--inactive-state-grey);
      }
    `};
  ${props =>
    props.checked &&
    css`
      & + ${Toggle}:before {
        border: 1px solid var(--black);
      }
      & + ${Toggle}:after {
        background: var(--black);
        background-size: 10px;
        background-image: url("//images.arcteryx.com/foundation-ui/svgs/Check_White.svg");
        background-repeat: no-repeat;
        background-position: center;
        border: 1px solid var(--black);
      }
    `};
  ${props =>
    props.disabled &&
    props.checked &&
    css`
      & + ${Toggle}:before {
        border: 1px solid var(--inactive-state-grey);
      }
      & + ${Toggle}:after {
        background: var(--inactive-state-grey);
        background-size: 10px;
        background-image: url("//images.arcteryx.com/foundation-ui/svgs/Check_White.svg");
        background-repeat: no-repeat;
        background-position: center;
        border: 1px solid var(--inactive-state-grey);
      }
    `};
`;

const RadioVariant = props => {
  const onClickHandler = e => {
    try {
      if (!props.disabled && props.isGroup) {
        // If part of a group send value to consuming app to handle change
        props.handleClick(e.target.value);
      } else if (!props.disabled) {
        // If individual radio then toggle checked onClick
        props.handleClick(!props.checked);
      }
    } catch (err) {
      console.error(err);
    }
  };

  const id = (props.id || props.value || props.labelText).replace(/ /g, "");

  return (
    <FormRow className={`qa-form-row ${props.className ? props.className : ""}`}>
      <FormInput className={`qa-form-radio`}>
        <Label
          className="qa-control-label"
          htmlFor={props.id || props.name}
          disabled={props.disabled}
          checked={props.checked}
        >
          <Radio
            className="qa-form-control"
            name={props.name}
            id={id}
            value={props.value || props.labelText}
            aria-labelledby={`labelFor--${props.id || props.name}`}
            disabled={props.disabled}
            checked={props.checked}
            onClick={onClickHandler}
          />
          <Toggle>
            <span>{props.labelText}</span>
          </Toggle>
        </Label>
      </FormInput>
    </FormRow>
  );
};

RadioVariant.propTypes = {
  name: PropTypes.string.isRequired,
  labelText: PropTypes.string.isRequired,
  id: PropTypes.string,
  value: PropTypes.string,
  checked: PropTypes.bool,
  disabled: PropTypes.bool,
  handleClick: PropTypes.func,
  isGroup: PropTypes.bool,
  className: PropTypes.string,
};
RadioVariant.defaultProps = {
  disabled: false,
  isGroup: false,
};
export default RadioVariant;
