/* istanbul ignore file */
import React, { forwardRef, useEffect, useState } from "react";
import { FormRow, FormInput, StyledSelect } from "./Styles";
import LabelHeaderField from "./FormLabelHeader";
import PropTypes from "prop-types";

const FormSelectField = forwardRef(
  (
    {
      error,
      label,
      id,
      toolTip,
      required,
      disallowEmptyOption,
      placeHolderText,
      defaultValue,
      value,
      valid,
      isMenu,
      name,
      list,
      allowGrayOut = true,
      attachColon = true,
      ...selectProps
    },
    ref
  ) => {
    const [isGray, setIsGray] = useState(false);
    useEffect(() => {
      const el = document.getElementById(id);
      if (!el) {
        return;
      }
      if (!allowGrayOut) {
        setIsGray(false);
        return;
      }
      const selected = el.options[el.selectedIndex];
      if (selected?.hasAttribute("disabled")) {
        setIsGray(true);
      }
    }, [id, allowGrayOut]);

    const onChange = e => {
      selectProps?.onChange(e);
      setIsGray(false);
    };

    return (
      <FormRow className="qa-form-row" isSelect isMenu={isMenu}>
        <LabelHeaderField
          id={id}
          label={label}
          required={required}
          error={error}
          attachColon={attachColon}
          toolTip={toolTip}
        />
        <FormInput
          isSelect
          className={`qa-form-input ${error ? "input-validation-error" : ""} ${
            !error && valid ? "input-validation-valid" : ""
          }`}
        >
          <StyledSelect
            $isGray={isGray}
            data-testid={id}
            className={`qa-form-select ${error ? "input-validation-error" : ""} ${
              !error && valid ? "input-validation-valid" : ""
            }`}
            size="1"
            ref={ref}
            id={id}
            placeholder={placeHolderText}
            aria-invalid={error ? "true" : "false"}
            defaultValue={defaultValue || value || ""}
            value={value}
            valid={valid}
            name={name}
            {...selectProps}
            onChange={onChange}
          >
            {disallowEmptyOption ? null : placeHolderText ? (
              <option id="input-place-holder" disabled value="">
                {placeHolderText}
              </option>
            ) : (
              <option defaultValue></option>
            )}

            {list?.map((item, idx) => (
              <option key={`${item.value}-${idx}`} value={item.value}>
                {item.label}
              </option>
            ))}
          </StyledSelect>
        </FormInput>
      </FormRow>
    );
  }
);

FormSelectField.propTypes = {
  error: PropTypes.any,
  label: PropTypes.any,
  id: PropTypes.any,
  toolTip: PropTypes.string,
  required: PropTypes.any,
  disallowEmptyOption: PropTypes.any,
  placeHolderText: PropTypes.any,
  defaultValue: PropTypes.any,
  value: PropTypes.any,
  valid: PropTypes.any,
  isMenu: PropTypes.any,
  name: PropTypes.any,
  list: PropTypes.any,
  onChange: PropTypes.any,
  onBlur: PropTypes.any,
  ref: PropTypes.any,
};

FormSelectField.displayName = "FormSelectField";
export default FormSelectField;
