import React, { useState, useMemo, useEffect, useCallback, forwardRef } from "react";
import PropTypes from "prop-types";
import { useDropzone } from "react-dropzone";
import LabelHeaderField from "./FormLabelHeader";
import { FormRow, FormInput, SectionField } from "./Styles";
import { P } from "@arcteryx/components-typography";
import styled from "styled-components";
import { mergeRefs } from "../utils/mergeRefs";
import { useTranslation } from "react-i18next";

const baseStyle = {
  outline: "none",
};
const activeStyle = {
  borderColor: "#161616",
  backgroundColor: "var(--background-grey)",
};
const acceptStyle = {
  borderColor: "var(--success-green)",
  borderStyle: "dashed",
};

const rejectStyle = {
  borderColor: "var(--warning-red)",
  borderStyle: "dashed",
};

const Aside = styled.aside`
  background: var(--background-grey);
  width: 100%;
  padding: 1rem;
`;
const FormP = styled(P)`
  margin: 0 auto;
  text-align: center;
`;
const SpanLeft = styled.span`
  padding-right: 1px;
`;
const SpanRight = styled.span`
  padding-left: 0.25rem;
`;
const SpanLink = styled.span`
  cursor: pointer;
  text-decoration: underline;
`;
const RejectionMessage = styled.div`
  color: var(--warning-red);
`;

const FileUpload = forwardRef(
  (
    {
      register,
      setValue,
      error,
      label,
      id,
      toolTip,
      required,
      onChange,
      handleDrop,
      // Passing them as a Props: React does not recognize the `%` prop on a DOM element
      fileHeaderPart1,
      fileHeaderPart2,
      fileHeaderPart3,
      validExtensionMessage,
      maxSizeMessage,
      maxSize,
      maxFiles = 0,
      validExtension,
      displayMessage,
      name = "fileUpload",
      ...inputProps
    },
    ref
  ) => {
    const { t } = useTranslation("components-form");
    const [isValid, setValid] = useState(false);
    const acceptedFile = 0;
    const validationError = "input-validation-error";
    const styles = required ? "input-validation-valid" : undefined; // Set 'styles' to undefined if 'required' is false
    const rejectionErrorMessages = {
      "file-too-large": t("File too large:"),
      "too-many-files": t("Too many files:"),
    };
    const generalUploadErrorMessage = t("Unable to upload file:");

    const onDrop = useCallback(
      _acceptedFiles => {
        if (typeof handleDrop === "function") {
          handleDrop(_acceptedFiles);
          setValue(id, _acceptedFiles, { shouldValidate: true });
        }
      },
      [handleDrop, setValue, id]
    );

    const {
      acceptedFiles,
      fileRejections,
      getRootProps,
      getInputProps,
      isDragActive,
      isDragAccept,
      isDragReject,
    } = useDropzone({
      accept: validExtension,
      maxSize,
      maxFiles,
      onDrop,
    });

    const { ref: dropzoneRef, ...dropzoneInputProps } = getInputProps({ onChange });

    const acceptedFileItems = acceptedFiles.map(file => <div key={file.name}>{file.name}</div>);
    const fileRejectionsItems = fileRejections.map(({ file, errors }) => (
      <RejectionMessage key={file.name}>
        {rejectionErrorMessages[errors[0].code] || generalUploadErrorMessage} {file.name}
      </RejectionMessage>
    ));

    const style = useMemo(
      () => ({
        ...baseStyle,
        ...(isDragActive ? activeStyle : {}),
        ...(isDragAccept ? acceptStyle : {}),
        ...(isDragReject ? rejectStyle : {}),
      }),
      [isDragActive, isDragReject, isDragAccept]
    );

    useEffect(() => {
      if (acceptedFiles.length > acceptedFile) {
        setValid(true);
        setValue(id, acceptedFiles, { shouldValidate: true });
      }
    }, [acceptedFiles, setValue, id, isValid]);
    return (
      <FormRow className="qa-form-row">
        <LabelHeaderField id={id} label={label} required={required} error={error} toolTip={toolTip} />
        <FormInput
          className={`qa-form-input ${error && !isValid ? validationError : ""} ${isValid ? styles : ""}`}
          valid={acceptedFiles.length > acceptedFile}
        >
          <SectionField
            {...getRootProps({
              isDragActive,
              isDragAccept,
              isDragReject,
              style,
            })}
          >
            <FormP>
              <SpanLeft>{fileHeaderPart1}</SpanLeft>
              <SpanLink>{fileHeaderPart2}</SpanLink>
              <SpanRight>{fileHeaderPart3}</SpanRight>
            </FormP>
            <input
              {...register(name, {
                required: required ? inputProps.requiredErrorText : false, // Only set the required attribute if 'required' prop is true
              })}
              ref={mergeRefs(ref, dropzoneRef)}
              {...dropzoneInputProps}
              {...inputProps}
              data-valid={isValid}
              aria-invalid={error ? "true" : "false"}
              type="file"
              title={label?.charAt(0).toUpperCase() + label?.slice(1)}
              data-testid={id}
            />
            <Aside>
              {acceptedFiles.length <= acceptedFiles && !fileRejections.length ? (
                <>
                  <FormP>{displayMessage}</FormP>
                </>
              ) : null}
              {acceptedFiles.length >= acceptedFile ? (
                <>
                  <FormP>{acceptedFileItems}</FormP>
                </>
              ) : null}
              {fileRejections.length ? (
                <>
                  <FormP>{fileRejectionsItems}</FormP>
                </>
              ) : null}
            </Aside>
            <>
              <FormP>{validExtensionMessage}</FormP>
              <FormP>{maxSizeMessage}</FormP>
            </>
          </SectionField>
        </FormInput>
      </FormRow>
    );
  }
);
FileUpload.prototype = {
  name: PropTypes.string.isRequired,
  disabled: PropTypes.bool,
  label: PropTypes.string,
  fileHeader: PropTypes.string,
  displayMessage: PropTypes.string,
  validExtensionMessage: PropTypes.string,
  maxSizeMessage: PropTypes.string,
  validExtension: PropTypes.string,
  maxSize: PropTypes.number,
  error: PropTypes.bool,
  requiredErrorText: PropTypes.string,
  validationErrorText: PropTypes.string,
  required: PropTypes.bool,
};
FileUpload.displayName = "FileUpload";
export default FileUpload;
