import React, { forwardRef } from "react";
import PropTypes from "prop-types";
import Tooltip from "./Tooltip/Tooltip";
import ToggleButton from "./ToggleButton";
import { RequiredSpan, FormRow, FormInput, ErrorText } from "./Styles";
import styled, { css } from "styled-components";

const ErrorTextCheckForm = styled(ErrorText)`
  display: block;
`;
const CheckFormInput = styled(FormInput)`
  font-family: var(--font-urw-din);
  font-size: 1rem;
  line-height: 1rem;
  align-items: start;
`;

const Label = styled.label`
  display: inline;
  align-items: center;
  cursor: pointer;
  white-space: pre-wrap;

  ${props =>
    props.disabled &&
    css`
      cursor: not-allowed;
    `}
`;
const SpanToggle = styled.span``;

const LabelWrap = styled.div`
  margin-left: 0.25rem;
  display: flex;
`;

const FormToggleButton = forwardRef(
  (
    {
      name,
      disabled,
      required,
      error,
      renderAfterLabel,
      toolTip,
      isRelatedToPrevious,
      children,
      formLink,
      ...toggleProps
    },
    ref
  ) => {
    const toggleId = `toggle-button-id-${name}`;

    return (
      <FormRow className="qa-form-row" isRelatedToPrevious={isRelatedToPrevious} isCheckbox>
        <CheckFormInput>
          {toolTip && <Tooltip title={toolTip} isCheckbox />}
          <ToggleButton id={toggleId} ref={ref} name={name} disabled={disabled} {...toggleProps} />
          <LabelWrap>
            <Label htmlFor={toggleId} disabled={disabled}>
              {required && <RequiredSpan>*</RequiredSpan>}
              <SpanToggle>
                {children} {renderAfterLabel}{" "}
                {formLink && (
                  <a href={formLink.link} target="_blank">
                    {formLink.label}
                  </a>
                )}
              </SpanToggle>
              {error && (
                <ErrorTextCheckForm data-testid="qa-form-error-text" className={`qa-form-error-text`}>
                  {error.message}
                </ErrorTextCheckForm>
              )}
            </Label>
          </LabelWrap>
        </CheckFormInput>
      </FormRow>
    );
  }
);

FormToggleButton.propTypes = {
  name: PropTypes.string.isRequired,
  defaultChecked: PropTypes.bool,
  disabled: PropTypes.bool,
  labelText: PropTypes.string,
  htmlText: PropTypes.string,
  toolTip: PropTypes.string,
  isRelatedToPrevious: PropTypes.bool,
  required: PropTypes.bool,
  error: PropTypes.object,
  renderAfterLabel: PropTypes.node,
  formLink: PropTypes.node,
  onChange: PropTypes.func,
  onBlur: PropTypes.func,
};
FormToggleButton.defaultProps = {
  disabled: false,
  required: false,
};
FormToggleButton.displayName = "FormToggleButton";
export default FormToggleButton;
