/* istanbul ignore file */
// common patterns
const threeDigit = /^\d{3}$/;
const fourDigit = /^\d{4}$/;
const fiveDigit = /^\d{5}$/;
const sixDigit = /^\d{6}$/;

const alphanumericMask = /^[a-zA-Z0-9]*$/;

const patterns = {
  AU: fourDigit,
  AZ: alphanumericMask,
  BE: fourDigit,
  BR: /^\d{5}-\d{3}$/,
  BY: /2[1-4]{1}\d{4}$/,
  CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
  CH: fourDigit,
  CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,
  CZ: /^\d{3}\s?\d{2}$/,
  DE: fiveDigit,
  DK: fourDigit,
  ES: /^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,
  FI: fiveDigit,
  FR: /^\d{2}\s?\d{3}$/,
  GB: /^(GIR 0AA)|((([A-Z][0-9]{1,2})|(([A-Z][A-HJ-Y][0-9]{1,2})|(([A-Z][0-9][A-Z])|([A-Z][A-HJ-Y][0-9]?[A-Z])))) [0-9][A-Z]{2})$/i,
  GR: /^\d{3}\s?\d{2}$/,
  HR: /^([1-5]\d{4}$)/,
  IL: /^(\d{5}|\d{7})$/,
  IN: alphanumericMask,
  IR: alphanumericMask,
  IE: /^(?!.*(?:o))[A-z]\d[\d\w]\s\w{4}$/i,
  IT: fiveDigit,
  JP: /^\d{3}-?\d{4}$/,
  LI: alphanumericMask,
  LT: alphanumericMask,
  NL: /^\d{4}\s?[a-z]{2}$/i,
  NO: fourDigit,
  NP: alphanumericMask,
  PL: /^\d{2}-?\d{3}$/,
  PR: alphanumericMask,
  PT: /^\d{4}-?\d{3}?$/,
  SE: /^[1-9]\d{2}\s?\d{2}$/,
  SK: /^\d{3}\s?\d{2}$/,
  TW: /^\d{3}(\d{2})?$/,
  US: fiveDigit,

  // PSR form country list masks
  AD: alphanumericMask,
  AE: alphanumericMask,
  AF: alphanumericMask,
  AG: alphanumericMask,
  AI: alphanumericMask,
  AL: alphanumericMask,
  AM: alphanumericMask,
  AO: alphanumericMask,
  AR: alphanumericMask,
  AS: alphanumericMask,
  AT: fourDigit,
  AW: alphanumericMask,
  AX: alphanumericMask,
  BA: alphanumericMask,
  BB: alphanumericMask,
  BD: alphanumericMask,
  BF: alphanumericMask,
  BG: fourDigit,
  BH: alphanumericMask,
  BI: alphanumericMask,
  BJ: alphanumericMask,
  BL: alphanumericMask,
  BM: alphanumericMask,
  BO: alphanumericMask,
  BQ: alphanumericMask,
  BS: alphanumericMask,
  BT: alphanumericMask,
  BV: alphanumericMask,
  BW: alphanumericMask,
  BZ: alphanumericMask,
  CC: alphanumericMask,
  CI: alphanumericMask,
  CL: alphanumericMask,
  CM: alphanumericMask,
  CO: alphanumericMask,
  CR: alphanumericMask,
  CV: alphanumericMask,
  CW: alphanumericMask,
  CX: alphanumericMask,
  CY: alphanumericMask,
  DJ: alphanumericMask,
  DM: alphanumericMask,
  DO: fiveDigit,
  DZ: fiveDigit,
  EC: alphanumericMask,
  EE: fiveDigit,
  EG: alphanumericMask,
  EH: alphanumericMask,
  ER: alphanumericMask,
  ET: alphanumericMask,
  FJ: alphanumericMask,
  FK: alphanumericMask,
  GA: alphanumericMask,
  GD: alphanumericMask,
  GE: alphanumericMask,
  GF: alphanumericMask,
  GG: alphanumericMask,
  GH: alphanumericMask,
  GI: alphanumericMask,
  GL: alphanumericMask,
  GM: alphanumericMask,
  GN: alphanumericMask,
  GP: alphanumericMask,
  GQ: alphanumericMask,
  GS: alphanumericMask,
  GT: alphanumericMask,
  GU: alphanumericMask,
  GW: alphanumericMask,
  GY: alphanumericMask,
  HK: alphanumericMask,
  HM: alphanumericMask,
  HN: alphanumericMask,
  HT: alphanumericMask,
  HU: fourDigit,
  ID: fiveDigit,
  IM: alphanumericMask,
  IO: alphanumericMask,
  IQ: alphanumericMask,
  IS: threeDigit,
  JM: alphanumericMask,
  JE: alphanumericMask,
  JO: alphanumericMask,
  KE: fiveDigit,
  KG: alphanumericMask,
  KH: alphanumericMask,
  KI: alphanumericMask,
  KM: alphanumericMask,
  KN: alphanumericMask,
  KP: alphanumericMask,
  KR: alphanumericMask,
  KW: alphanumericMask,
  KY: alphanumericMask,
  KZ: alphanumericMask,
  LA: alphanumericMask,
  LB: alphanumericMask,
  LC: alphanumericMask,
  LR: alphanumericMask,
  LS: alphanumericMask,
  LU: fourDigit,
  LV: alphanumericMask,
  LY: alphanumericMask,
  MA: alphanumericMask,
  MG: alphanumericMask,
  MH: alphanumericMask,
  MK: alphanumericMask,
  ML: alphanumericMask,
  MM: alphanumericMask,
  MN: alphanumericMask,
  MO: alphanumericMask,
  MP: alphanumericMask,
  MQ: alphanumericMask,
  MR: alphanumericMask,
  MS: alphanumericMask,
  MT: alphanumericMask,
  MU: alphanumericMask,
  MV: alphanumericMask,
  MW: alphanumericMask,
  MX: fiveDigit,
  MY: fiveDigit,
  MZ: alphanumericMask,
  NA: alphanumericMask,
  NE: alphanumericMask,
  NF: alphanumericMask,
  NG: alphanumericMask,
  NI: alphanumericMask,
  NU: alphanumericMask,
  NZ: fourDigit,
  PA: alphanumericMask,
  PE: alphanumericMask,
  PF: alphanumericMask,
  PG: alphanumericMask,
  PH: alphanumericMask,
  PK: alphanumericMask,
  PM: alphanumericMask,
  PN: alphanumericMask,
  PY: alphanumericMask,
  RE: alphanumericMask,
  RO: sixDigit,
  RS: alphanumericMask,
  RU: sixDigit,
  RW: alphanumericMask,
  SA: fiveDigit,
  SC: alphanumericMask,
  SD: alphanumericMask,
  SG: sixDigit,
  SH: alphanumericMask,
  SI: fourDigit,
  SJ: alphanumericMask,
  SL: alphanumericMask,
  SN: alphanumericMask,
  SO: alphanumericMask,
  SR: alphanumericMask,
  ST: alphanumericMask,
  SV: alphanumericMask,
  SZ: alphanumericMask,
  TD: alphanumericMask,
  TF: alphanumericMask,
  TG: alphanumericMask,
  TH: fiveDigit,
  TJ: alphanumericMask,
  TK: alphanumericMask,
  TM: alphanumericMask,
  TN: fourDigit,
  TO: alphanumericMask,
  TR: alphanumericMask,
  TT: alphanumericMask,
  TZ: alphanumericMask,
  UA: fiveDigit,
  UG: alphanumericMask,
  UM: alphanumericMask,
  UY: alphanumericMask,
  VC: alphanumericMask,
  VE: alphanumericMask,
  VG: alphanumericMask,
  VI: alphanumericMask,
  VN: alphanumericMask,
  VU: alphanumericMask,
  WF: alphanumericMask,
  WS: alphanumericMask,
  YT: alphanumericMask,
  ZA: fourDigit,
  ZM: fiveDigit,
  ZW: alphanumericMask,
  YE: alphanumericMask,
};

export const locales = Object.keys(patterns);

export const isPostalCode = (str, locale) => {
  if (locale in patterns) {
    return patterns[locale].test(str);
  } else if (locale === "any") {
    for (const key in patterns) {
      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
      // istanbul ignore else
      if (patterns.hasOwnProperty(key)) {
        const pattern = patterns[key];
        if (pattern.test(str)) {
          return true;
        }
      }
    }
    return false;
  }
  throw new Error(`Invalid locale '${locale}'`);
};
