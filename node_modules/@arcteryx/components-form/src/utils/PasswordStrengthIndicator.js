/* istanbul ignore file */
import React from "react";
import { Message } from "../components/Styles";
const validationErrorMessage = "input-validation-error-message";
const validationError = "input-validation-error";
const valid = "input-validation-valid";
export const superToggle = (element, class0, class1) => {
  /* eslint-disable no-unused-expressions */
  element?.classList?.add(class0);
  element?.classList?.remove(class1);
};

export const ValidatePassword = (password, defaultOptions) => {
  /*Array of rules and the information target*/

  const rules = [
    {
      Pattern: /[A-Z]/,
      Target: "UpperCase",
    },
    {
      Pattern: /[a-z]/,
      Target: "LowerCase",
    },
    {
      Pattern: /[0-9]/,
      Target: "Numbers",
    },
    {
      Pattern: /[!@#$%^&*]/,
      Target: "Symbols",
    },
  ];

  const length = document.getElementById("Length");
  const passwordContainer = document.getElementById("passwordStrength");
  if (password !== "") {
    password?.length >= defaultOptions.minLength
      ? superToggle(length, valid, validationErrorMessage)
      : superToggle(length, validationErrorMessage, valid);

    /*Iterate our remaining rules. The logic is the same as for Length*/
    for (let i = 0; i < rules.length; i++) {
      const target = passwordContainer?.querySelector(`#${rules[i]?.Target}`);
      new RegExp(rules[i]?.Pattern).test(password)
        ? superToggle(target, valid, validationErrorMessage)
        : superToggle(target, validationErrorMessage, valid);
    }
  }
};
const PasswordStrengthIndicator = props => (
  <span>
    <Message id="passwordStrength">{<MessageDetail {...props} />}</Message>
  </span>
);
const MessageDetail = props => {
  const data = props.passwordValidationMessage;
  const messageValidation = (
    <>
      {data.map(list => (
        <li key={list.id} id={list.title} className={`${validationError}`}>
          {list.content}
        </li>
      ))}
    </>
  );

  return <>{messageValidation}</>;
};
export default PasswordStrengthIndicator;
