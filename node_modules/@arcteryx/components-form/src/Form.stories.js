import React, { useCallback, useMemo, useState } from "react";
import styled from "styled-components";
import { storiesOf } from "@storybook/react";

import FormToggleButton from "./components/FormToggleButton";
import FormInputField from "./components/FormInput";
import FormSelectField from "./components/FormSelect";
import FormTextareaField from "./components/FormTextarea";
import { isValidPhoneNumber } from "libphonenumber-js";
import { normalizedPhoneNumber } from "./utils/normalizedPhoneNumber";
import { normalizedPostalCode } from "./utils/inputMasking";
import PasswordStrengthIndicator, { ValidatePassword } from "./utils/PasswordStrengthIndicator";
import { isPostalCode } from "./utils/isPostalCode";

import Tooltip from "./components/Tooltip/Tooltip";
import FileUpload from "./components/FileUpload";
import CheckboxVariant from "./components/CheckboxVariant";
import RadioButton from "./components/RadioButton";
import RadioVariant from "./components/RadioVariant";
import EmailInput from "./components/EmailInput";
import { useForm } from "react-hook-form";
import { Button } from "@arcteryx/components-button";
import { AddressStory } from "./Address.story";
import { P } from "@arcteryx/components-typography";
import PhoneNumber from "./components/Address/PhoneNumber";
import PostalCode from "./components/Address/PostalCode";
const stories = storiesOf("Form Components", module);

const Form = styled.form`
  width: 100%;
  max-width: 500px;
  float: left;
  height: 100%;
  display: block;
  padding: 10px;
  margin: 4em auto 0;

  @media screen and (min-width: 768px) {
    width: 90%;
  }
`;

const ToolTipWrap = styled.div`
  background-color: var(--colour-grey-background);
  padding: 10px;
  flex-direction: column;
  width: 100px;
  align-items: safe left;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: left;
  -webkit-box-align: left;
  -ms-flex-align: left;
  align-items: left;
  width: 100%;
  position: relative;
  -webkit-transition: all 0.4s ease-in-out;
  transition: all 0.4s ease-in-out;
`;

stories.add("PhoneNumber (NAM)", () => {
  const {
    register,
    formState: { errors },
    handleSubmit,
    watch,
    setValue,
  } = useForm({
    mode: "onBlur",
  });

  const onSubmit = () => {
    console.log("submit");
  };

  return (
    <Form onSubmit={handleSubmit(onSubmit)} autoComplete="on">
      <PhoneNumber
        name="phone"
        currentCountry={"ca"}
        watch={watch}
        toolTip={"hello"}
        isInfo
        arrowDirection={"left"}
        register={register}
        setValue={setValue}
        errors={errors}
        required
      />
    </Form>
  );
});

stories.add("PhoneNumber (EMEA)", () => {
  const {
    register,
    formState: { errors },
    handleSubmit,
    watch,
    setValue,
  } = useForm({
    mode: "onBlur",
  });

  const onSubmit = () => {
    console.log("submit");
  };

  return (
    <Form onSubmit={handleSubmit(onSubmit)} autoComplete="on">
      <PhoneNumber
        name="phone"
        currentCountry={"fr"}
        watch={watch}
        toolTip={"hello"}
        isInfo
        arrowDirection={"left"}
        register={register}
        setValue={setValue}
        errors={errors}
        required
      />
    </Form>
  );
});

stories.add("Postal Code", () => {
  const {
    register,
    formState: { errors },
    handleSubmit,
    watch,
    setValue,
  } = useForm({
    mode: "onBlur",
  });

  const onSubmit = () => {
    console.log("submit");
  };

  return (
    <Form onSubmit={handleSubmit(onSubmit)} autoComplete="on">
      <PostalCode
        register={register}
        errors={errors}
        watch={watch}
        setValue={setValue}
        name="postalCode"
        id="postalCode"
        countryName="country"
      />
    </Form>
  );
});

stories
  .add("Tooltip", () => {
    const birdImg = "https://images.arcteryx.com/foundation-ui/svgs/ReBird_ReGear-TaglineSmall.svg";
    const longTitle =
      "Rewilding your gear lowers the footprint of every adventure. We take back gear that isnâ€™t being used, and refurbish it with the same obsessive design that built it, to extend its active life beyond one adventure or user. Relentlessly good gear, refreshed and returned to the wild";
    const shortTitle = "Short title indeed";

    return (
      <ToolTipWrap>
        {/* Short title */}

        <div style={{ display: "flex", justifyContent: "space-between" }}>
          Short title tooltip
          <Tooltip title={shortTitle} isInfo={false} arrowDirection="top" />
        </div>

        <div>
          <Tooltip title={shortTitle} isInfo={false} arrowDirection="top" /> Short title tooltip
        </div>

        <div>
          Short title tooltip indeed
          <Tooltip title={shortTitle} isInfo={false} arrowDirection="top" />
        </div>

        <div style={{ height: "80vh", display: "flex", flexDirection: "column", justifyContent: "flex-end" }}>
          <div>
            <Tooltip title={shortTitle} isInfo={false} arrowDirection="top" /> Short title tooltip
          </div>
        </div>

        {/* Tooltip top arrow */}

        <div style={{ display: "flex", justifyContent: "space-between" }}>
          This is a tooltip with arrowDirection = top
          <Tooltip title={longTitle} isInfo={false} arrowDirection="top" imgURL={birdImg} />
        </div>

        <div>
          <Tooltip title={longTitle} isInfo={false} arrowDirection="top" imgURL={birdImg} /> arrowDirection = top This
          is a tooltip with
        </div>

        <div>
          This is a tooltip with
          <Tooltip title={longTitle} isInfo={false} arrowDirection="top" imgURL={birdImg} /> arrowDirection = top
        </div>

        <div>
          This is a tooltip with arrowDirection = top
          <Tooltip title={longTitle} isInfo={false} arrowDirection="top" imgURL={birdImg} />
        </div>

        <div style={{ height: "80vh", display: "flex", flexDirection: "column", justifyContent: "flex-end" }}>
          <div>
            <Tooltip title={longTitle} isInfo={false} arrowDirection="top" imgURL={birdImg} /> arrowDirection = top This
            is a tooltip with
          </div>
        </div>

        {/* Tooltip bottom arrow */}

        <div style={{ display: "flex", justifyContent: "space-between" }}>
          This is a tooltip with arrowDirection = bottom
          <Tooltip title={longTitle} isInfo={false} arrowDirection="bottom" imgURL={birdImg} />
        </div>

        <div>
          <Tooltip title={longTitle} isInfo={false} arrowDirection="bottom" imgURL={birdImg} /> arrowDirection = bottom
          This is a tooltip with
        </div>

        <div>
          This is a tooltip with
          <Tooltip title={longTitle} isInfo={false} arrowDirection="bottom" imgURL={birdImg} /> arrowDirection = bottom
        </div>

        <div style={{ height: "80vh", display: "flex", flexDirection: "column", justifyContent: "flex-end" }}>
          <div>
            <Tooltip title={longTitle} isInfo={false} arrowDirection="bottom" imgURL={birdImg} /> arrowDirection =
            bottom This is a tooltip with
          </div>
        </div>

        {/* Tooltip left arrow */}

        <div style={{ display: "flex", justifyContent: "space-between" }}>
          This is a tooltip with arrowDirection = left
          <Tooltip title={longTitle} isInfo={false} arrowDirection="left" imgURL={birdImg} />
        </div>

        <div>
          <Tooltip title={longTitle} isInfo={false} arrowDirection="left" imgURL={birdImg} /> arrowDirection = left This
          is a tooltip with
        </div>

        <div>
          This is a tooltip with
          <Tooltip title={longTitle} isInfo={false} arrowDirection="left" imgURL={birdImg} /> arrowDirection = left
        </div>

        <div style={{ height: "80vh", display: "flex", flexDirection: "column", justifyContent: "flex-end" }}>
          <div>
            <Tooltip title={longTitle} isInfo={false} arrowDirection="left" imgURL={birdImg} /> arrowDirection = left
            This is a tooltip with
          </div>
        </div>

        {/* Tooltip right arrow */}

        <div style={{ display: "flex", justifyContent: "space-between" }}>
          This is a tooltip with arrowDirection = right
          <Tooltip title={longTitle} isInfo={false} arrowDirection="right" imgURL={birdImg} />
        </div>

        <div>
          <Tooltip title={longTitle} isInfo={false} arrowDirection="right" imgURL={birdImg} /> arrowDirection = right
          This is a tooltip with
        </div>

        <div>
          This is a tooltip with
          <Tooltip title={longTitle} isInfo={false} arrowDirection="right" imgURL={birdImg} /> arrowDirection = right
        </div>

        <div style={{ height: "80vh", display: "flex", flexDirection: "column", justifyContent: "flex-end" }}>
          <div>
            <Tooltip title={longTitle} isInfo={false} arrowDirection="right" imgURL={birdImg} /> arrowDirection = right
            This is a tooltip with
          </div>
        </div>
      </ToolTipWrap>
    );
  })
  .add("Form Toggle Button", () => {
    const {
      register,
      formState: { errors },
    } = useForm({ mode: "onChange" });

    return (
      <Form>
        <FormToggleButton labelText="" defaultChecked={true} name="1">
          This is a standard, checked checkbox
        </FormToggleButton>

        <FormToggleButton labelText="" defaultChecked={false} name="2">
          This is a standard, unchecked checkbox
        </FormToggleButton>

        <FormToggleButton disabled defaultChecked={false} name="3">
          This is a disabled, unchecked checkbox
        </FormToggleButton>

        <FormToggleButton disabled defaultChecked={true} name="4">
          This is a disabled, checked checkbox
        </FormToggleButton>

        <FormToggleButton toolTip="I am a tooltip, enjoy my company for a while" defaultChecked={true} name="5">
          This is a standard checkbox with a tooltip
        </FormToggleButton>

        <FormToggleButton defaultChecked={false} name="6" renderAfterLabel={<a href="/help/privacy">Privacy Policy</a>}>
          This is a checkbox with an element rendered after the label.
        </FormToggleButton>

        <FormToggleButton defaultChecked={false} name="7">
          This is a <i>standard checkbox</i> using <strong>htmlText</strong>.
        </FormToggleButton>

        <FormToggleButton
          defaultChecked={true}
          required={true}
          error={errors.cb8}
          {...register("cb8", { required: "you must check this box" })}
        >
          This is a required invalid checkbox , checkbox checked by default
        </FormToggleButton>

        <FormToggleButton
          defaultChecked={false}
          required={true}
          error={errors.cb9}
          {...register("cb9", { required: "you must check this box" })}
        >
          This is a required invalid checkbox
        </FormToggleButton>
      </Form>
    );
  })

  .add("Checkbox Variant", () => {
    const [isChecked, setChecked] = useState(true);
    const [is2Checked, set2Checked] = useState(false);
    const [is3Checked, set3Checked] = useState(false);
    const [is4Checked, set4Checked] = useState(true);

    const [isVariant1Checked, setVariant1Checked] = useState(true);
    const [isVariant2Checked, setVariant2Checked] = useState(false);
    const [isVariant3Checked, setVariant3Checked] = useState(true);
    const [isVariant4Checked, setVariant4Checked] = useState(false);
    return (
      <Form>
        <div style={{ borderBottom: "1px solid grey", margin: "1rem 0", padding: "1rem 0" }}>
          <CheckboxVariant
            labelText="This is a standard, checked checkbox"
            handleChange={() => setChecked(!isChecked)}
            checked={isChecked}
            name="che1"
          >
            Everyday (20)
          </CheckboxVariant>
          <br></br>
          <CheckboxVariant
            labelText="This is a standard, checked checkbox"
            handleChange={() => set2Checked(!is2Checked)}
            checked={is2Checked}
            name="che2"
          >
            Essentials (10)
          </CheckboxVariant>
          <br></br>
          <CheckboxVariant
            labelText="This is a standard, checked checkbox"
            handleChange={() => set3Checked(!is3Checked)}
            checked={is3Checked}
            name="che3"
          >
            What's New
          </CheckboxVariant>
          <br></br>
          <CheckboxVariant
            labelText="This is a standard, checked checkbox"
            handleChange={() => set4Checked(!is4Checked)}
            checked={is4Checked}
            name="che4"
          >
            Trail Running
          </CheckboxVariant>
        </div>
        <p>Individual Checkbox in different states:</p>
        <br />

        <CheckboxVariant
          labelText="checked/selected"
          handleChange={() => setVariant1Checked(!isVariant1Checked)}
          checked={isVariant1Checked}
          name="cheVariant1"
        >
          checked/selected
        </CheckboxVariant>
        <br></br>
        <CheckboxVariant
          labelText="unchecked/unselected"
          handleChange={() => setVariant2Checked(!isVariant2Checked)}
          checked={isVariant2Checked}
          name="cheVariant2"
        >
          unchecked/unselected
        </CheckboxVariant>
        <br></br>
        <CheckboxVariant
          labelText="checked/selected (disabled)"
          handleChange={() => setVariant3Checked(!isVariant3Checked)}
          checked={isVariant3Checked}
          disabled="disabled"
          name="cheVariant3"
        >
          checked/selected (disabled)
        </CheckboxVariant>
        <br></br>
        <CheckboxVariant
          labelText="unchecked/unselected (disabled)"
          handleChange={() => setVariant4Checked(!isVariant4Checked)}
          checked={isVariant4Checked}
          disabled="disabled"
          name="cheVariant4"
        >
          unchecked/unselected (disabled)
        </CheckboxVariant>
      </Form>
    );
  })
  .add("Radio Button", () => {
    const [isApples, setIsApples] = useState(true);
    const [isOranges, setIsOranges] = useState(false);
    const [isRadChecked, setRadChecked] = useState(true);
    const [isRad2Checked, setRad2Checked] = useState(false);
    const [isRad3Checked, setRad3Checked] = useState(false);
    const [isRad4Checked, setRad4Checked] = useState(true);

    const selectFruit = e => {
      setIsApples(e === "Apples");
      setIsOranges(e === "Oranges");
    };
    return (
      <Form>
        <div style={{ borderBottom: "1px solid grey", marginBottom: "1rem" }}>
          <p>Grouped Radio:</p>
          <br />
          <RadioButton
            labelText="Apples"
            handleClick={selectFruit}
            checked={isApples}
            name="group1"
            id="Apples"
            value="Apples"
            isGroup
          />
          <RadioButton
            labelText="Oranges"
            handleClick={selectFruit}
            checked={isOranges}
            name="group1x"
            id="Oranges"
            value="Oranges"
            isGroup
          />
        </div>
        <p>Individual Radio in different states:</p>
        <br />
        <RadioButton
          labelText="A checked radio variant button"
          handleClick={setRadChecked}
          checked={isRadChecked}
          name="rad1"
          value="rad1"
        />
        <RadioButton
          labelText="An unchecked radio variant button"
          handleClick={setRad2Checked}
          checked={isRad2Checked}
          name="rad2"
          value="rad2"
        />
        <RadioButton
          labelText="A disabled, unchecked radio variant button"
          disabled
          handleClick={setRad3Checked}
          checked={isRad3Checked}
          name="rad3"
          value="rad3"
        />
        <RadioButton
          labelText="A disabled, checked radio variant button"
          disabled
          handleClick={setRad4Checked}
          checked={isRad4Checked}
          name="rad4"
          value="rad4"
        />
      </Form>
    );
  })
  .add("Radio Variant", () => {
    const [isApples, setIsApples] = useState(true);
    const [isOranges, setIsOranges] = useState(false);
    const [isRadChecked, setRadChecked] = useState(true);
    const [isRad2Checked, setRad2Checked] = useState(false);
    const [isRad3Checked, setRad3Checked] = useState(false);
    const [isRad4Checked, setRad4Checked] = useState(true);

    const selectFruit = e => {
      setIsApples(e === "Apples");
      setIsOranges(e === "Oranges");
    };
    return (
      <Form>
        <div style={{ borderBottom: "1px solid grey", marginBottom: "1rem" }}>
          <p>Grouped Radio:</p>
          <br />
          <RadioVariant
            labelText="Apples"
            handleClick={selectFruit}
            checked={isApples}
            name="group1"
            id="Apples"
            value="Apples"
            isGroup
          />
          <RadioVariant
            labelText="Oranges"
            handleClick={selectFruit}
            checked={isOranges}
            name="group1x"
            id="Oranges"
            value="Oranges"
            isGroup
          />
        </div>
        <p>Individual Radio in different states:</p>
        <br />
        <RadioVariant
          labelText="A checked radio variant button"
          handleClick={setRadChecked}
          checked={isRadChecked}
          name="rad1"
          value="rad1"
        />
        <RadioVariant
          labelText="An unchecked radio variant button"
          handleClick={setRad2Checked}
          checked={isRad2Checked}
          name="rad2"
          value="rad2"
        />
        <RadioVariant
          labelText="A disabled, unchecked radio variant button"
          disabled
          handleClick={setRad3Checked}
          checked={isRad3Checked}
          name="rad3"
          value="rad3"
        />
        <RadioVariant
          labelText="A disabled, checked radio variant button"
          disabled
          handleClick={setRad4Checked}
          checked={isRad4Checked}
          name="rad4"
          value="rad4"
        />
      </Form>
    );
  })
  .add("Form Input Field Variants", () => {
    return (
      <Form>
        <div style={{ borderBottom: "1px solid grey", marginBottom: "1rem" }}>
          <FormInputField type="text" label="Regular Text Field" />
          <br />
          <FormInputField type="text" label="Disabled Text Field" disabled value="Disabled" />
          <br />
          <FormInputField type="text" label="Read Only Text Field" readOnly value="Read only" />
        </div>
      </Form>
    );
  })
  .add("Form Validation", () => {
    const [isValidInput, setValidInput] = useState(false);
    const [isValidSelect, setValidSelect] = useState(false);
    const [isValidPassword, setValidPassword] = useState(false);
    const [isValidEmail, setValidEmail] = useState(false);

    const strongRegex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,15})");
    const {
      register,
      formState: { errors },
      handleSubmit,
      watch,
      setValue,
    } = useForm({
      defaultValues: {
        password: "",
      },
    });
    const defaultOptions = {
      minLength: 8,
    };
    const password = watch("password");
    const passwordStrength = useMemo(() => ValidatePassword(password, defaultOptions), [password]);

    const validSimplePropsForm = {
      labelText: "Dropdown with placeholder",
      placeHolderText: "Please choose value",

      list: [
        { label: "English", value: "en" },
        { label: "French", value: "fr" },
      ],
      disallowEmptyOption: false,
    };
    const validPasswordFormProps = {
      passwordValidationMessage: [
        { id: 1, title: "LowerCase", content: "at least one lower case letter" },
        { id: 2, title: "UpperCase", content: "at least one capital case letter" },
        { id: 3, title: "Numbers", content: "at least one number" },
        { id: 4, title: "Length", content: "between 8-15 characters" },
        { id: 5, title: "Symbols", content: "at least one special character" },
      ],
    };

    const normalizePostalCode = value => {
      return (
        value
          .replace(/\s/g, "")
          .match(/.{1,4}/g)
          ?.join(" ")
          .substr(0, 19) || ""
      );
    };

    const onSubmit = useCallback(data => {
      alert(JSON.stringify(data));
    }, []);

    return (
      <Form onSubmit={handleSubmit(onSubmit)} autoComplete="on">
        <FormInputField
          id="login"
          type="text"
          label="Login"
          required={true}
          valid={isValidInput}
          {...register("login", {
            required: "This is required",
            validate: {
              validInput: value => (value.length > 0 ? setValidInput(true) : setValidInput(false)),
            },
          })}
          error={errors.login}
          toolTip="Please enter your email so we can send you confirmation of your order and shipping notifications"
        />
        <EmailInput
          id="email"
          label="Email"
          placeholder="bird@arcteryx.com"
          required={true}
          register={register}
          errors={errors}
        />
        <PostalCode register={register} errors={errors.postalCode} watch={watch} setValue={setValue} />
        <FormToggleButton
          defaultChecked={false}
          required={true}
          name="6"
          renderAfterLabel={<a href="/help/privacy">Privacy Policy</a>}
          {...register("policy", {
            required: "You must check this box",
          })}
          error={errors.policy}
          toolTip="tooltip Privacy"
        >
          This is a <i>standard checkbox</i> using htmlText for checking a large text.
        </FormToggleButton>

        <FormSelectField
          id="language"
          type="select"
          label="Language"
          required={true}
          valid={isValidSelect}
          {...register("language", {
            required: "Please choose a value.",
            validate: {
              validInput: value => (value.length > 0 ? setValidSelect(true) : setValidSelect(false)),
            },
          })}
          error={errors.language}
          toolTip="tooltip Choose Value"
          {...validSimplePropsForm}
        />
        <FormInputField
          type="password"
          id="password"
          label="password"
          required
          isPasswordStrength={true}
          valid={isValidPassword}
          {...register("password", {
            required: "Please enter your password.",
            pattern: {
              value: /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\w\s]).{8,15}$/,
              message: "Your password does not satisfy the required parameters.",
            },
            validate: {
              validPassword: value => (strongRegex.test(value) ? setValidPassword(true) : setValidPassword(false)),
            },
          })}
          error={errors.password}
        />
        <PasswordStrengthIndicator passwordStrength={passwordStrength} {...validPasswordFormProps} />

        <Button context="Submit" type="submit">
          Submit
        </Button>
      </Form>
    );
  })
  .add("File upload Validation", () => {
    const {
      register,
      formState: { errors },
      handleSubmit,
      setValue,
    } = useForm();
    const validFileUploadFormProps = {
      id: "fileUpload",
      label: "Certification or proof of employment document",
      required: true,
      requiredErrorText: "This field is required.",
      fileHeaderPart1: "Drag and drop or ",
      fileHeaderPart2: "browse files",
      fileHeaderPart3: "to upload",
      validExtensionMessage: "Valid extensions are: jpg, jpeg, tif, tiff, png, pdf.",
      maxSizeMessage: "Maximum 3 files. Maximum size is: 5 Mb.",
      maxSize: 5242880,
      maxFiles: 3,
      validExtension: "image/*, application/pdf",
      displayMessage: "no file attached",
      validationErrorText: "Upload a valid file format.",
    };

    const onSubmit = useCallback(data => {
      alert(JSON.stringify(data));
    }, []);

    return (
      <Form onSubmit={handleSubmit(onSubmit)}>
        <FileUpload register={register} {...validFileUploadFormProps} error={errors.fileUpload} setValue={setValue} />
        <Button context="Submit" type="submit">
          Submit
        </Button>
      </Form>
    );
  })
  .add("Compare Password", () => {
    const [isValidPassword, setValidPassword] = useState(false);
    const [isValidConfirmPassword, setValidConfirmPassword] = useState(false);
    const strongRegex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,15})");

    const {
      register,
      formState: { errors },
      handleSubmit,
      watch,
    } = useForm({
      mode: "onBlur",
      defaultValues: {
        password: "",
      },
    });
    const defaultOptions = {
      minLength: 8,
    };
    const password = watch("password");
    const passwordStrength = useMemo(() => ValidatePassword(password, defaultOptions), [password]);

    const validPasswordFormProps = {
      passwordValidationMessage: [
        { id: 1, title: "LowerCase", content: "at least one lower case letter" },
        { id: 2, title: "UpperCase", content: "at least one capital case letter" },
        { id: 3, title: "Numbers", content: "at least one number" },
        { id: 4, title: "Length", content: "between 8-15 characters" },
        { id: 5, title: "Symbols", content: "at least one special character" },
      ],
    };

    const onSubmit = useCallback(data => {
      alert(JSON.stringify(data));
    }, []);

    return (
      <Form onSubmit={handleSubmit(onSubmit)} autoComplete="on">
        <FormInputField
          type="password"
          id="password"
          label="password"
          required
          valid={isValidPassword}
          isPasswordStrength={true}
          {...register("password", {
            required: "Please enter your password.",
            pattern: {
              value: /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\w\s]).{8,15}$/,
              message: "Your password does not satisfy the required parameters.",
            },
            validate: {
              validPassword: value => (strongRegex.test(value) ? setValidPassword(true) : setValidPassword(false)),
            },
          })}
          error={errors.password}
        />
        <PasswordStrengthIndicator passwordStrength={passwordStrength} {...validPasswordFormProps} />
        <FormInputField
          type="password"
          id="confirmPassword"
          label="Confirm password"
          required
          valid={isValidConfirmPassword}
          {...register("confirmPassword", {
            required: "Please enter your password.",
            pattern: {
              value: /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\w\s]).{8,15}$/,
              message: "Your password does not satisfy the required parameters.",
            },
            /*  validate: {
              validPassword: value => (strongRegex.test(value) ? setValidPassword(true) : setValidPassword(false)),
            }, */

            validate: value => (value === password ? setValidConfirmPassword(true) : "The passwords do not match"),
          })}
          error={errors.confirmPassword}
        />

        <Button context="Submit" type="submit">
          Submit
        </Button>
      </Form>
    );
  })
  .add("Text area form validation", () => {
    const [isValidTextarea, setValidTextarea] = useState(false);
    const validTextareaProps = {
      cols: 10,
      rows: 5,
      placeholder: "Explain why you feel that you or your organization belongs in our pro program.",
    };
    const {
      register,
      formState: { errors },
      handleSubmit,
    } = useForm({
      mode: "onBlur",
    });

    const onSubmit = useCallback(data => {
      alert(JSON.stringify(data));
    }, []);
    return (
      <Form onSubmit={handleSubmit(onSubmit)} autoComplete="on">
        <FormTextareaField
          id="textarea"
          type="text"
          label="Required Textarea"
          required={true}
          valid={isValidTextarea}
          {...register("textarea", {
            required: "This is required",
            validate: {
              validInput: value => (value.length > 0 ? setValidTextarea(true) : setValidTextarea(false)),
            },
          })}
          error={errors.textarea}
          {...validTextareaProps}
        />

        <FormTextareaField id="textarea2" name="textarea2" type="text" label="Textarea" {...validTextareaProps} />
        <Button context="Submit" type="submit">
          Submit
        </Button>
      </Form>
    );
  })
  .add("Phone and Postal code Masking", () => {
    const [isValidCountry, setValidCountry] = useState(false);
    const [isValidPhone, setValidPhone] = useState(false);
    const [isValidPostalCode, setValidPostalCode] = useState(false);
    const {
      register,
      formState: { errors },
      handleSubmit,
      watch,
      setValue,
    } = useForm({
      mode: "onBlur",
      defaultValues: {
        postalCode: "",
      },
    });
    const validSimplePropsForm = {
      labelText: "Country",
      placeHolderText: "Please choose value",

      list: [
        { label: "Austria", value: "AT" },
        { label: "Belgium", value: "BE" },
        { label: "Canada", value: "CA" },
        { label: "China", value: "CN" },
        { label: "Czech Republic", value: "CZ" },
        { label: "Finland", value: "FI" },
        { label: "France", value: "FR" },
        { label: "Germany", value: "DE" },
        { label: "Ireland", value: "IE" },
        { label: "Italy", value: "IT" },
        { label: "Netherlands", value: "NL" },
        { label: "Norway", value: "NO" },
        { label: "Poland", value: "PL" },
        { label: "Spain", value: "ES" },
        { label: "Sweden", value: "SE" },
        { label: "Switzerland", value: "CH" },
        { label: "United Kingdom", value: "GB" },
        { label: "United States", value: "US" },
      ],
      disallowEmptyOption: false,
    };
    const selectedCountry = watch("country");

    const onSubmit = useCallback(data => {
      alert(JSON.stringify(data));
    }, []);
    return (
      <Form onSubmit={handleSubmit(onSubmit)} autoComplete="on">
        <FormSelectField
          id="country"
          type="select"
          label="Country"
          required={true}
          valid={isValidCountry}
          {...register("country", {
            required: "Please choose a value.",
            validate: {
              validInput: value => (value.length > 0 ? setValidCountry(true) : setValidCountry(false)),
            },
          })}
          error={errors.country}
          toolTip="tooltip Choose Value"
          {...validSimplePropsForm}
        />

        <FormInputField
          id="phone"
          type="tel"
          label="Phone"
          required
          valid={isValidPhone}
          register={register}
          name="phone"
          currentCountry={watch("country")}
          watch={watch}
          setValue={setValue}
          isInfo
          errors={errors}
        />

        <PostalCode register={register} errors={errors.postalCode} watch={watch} setValue={setValue} />
        <Button context="Submit" type="submit">
          Submit
        </Button>
      </Form>
    );
  })
  .add("Address", AddressStory);
